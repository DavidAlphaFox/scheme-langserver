(library (scheme-langserver analysis type rnrs-meta-rules)
  (export rnrs-chez-rules)
  (import 
    (chezscheme)
    (scheme-langserver util natural-order-compare))

(define rnrs-chez-rules (sort 
  (lambda (target1 target2)
    (natural-order-compare 
      (symbol->string (car target1))
      (symbol->string (car target2))))
  '(
(* number? (number? ...))
(+ number? (number? ...))
(- number? (number? number? **1))
(- number? (number?))
; (-1+ number? (number?))
(/ number? (number? number? **1))
(/ number? (number?))
; (1+ number? (number?))
; (1- number? (number?))
(< boolean? (real? real? **1))
(<= boolean? (real? real? **1))
(= boolean? (number? ...))
(> boolean? (real? real? **1))
(>= boolean? (real? real? **1))
(abort void? (something?))
(abort void? ())
(abort-handler boolean? ())
(abs number? (real?))
(acos number? (number?))
(acosh number? (number?))
(add-duration something? ())
(add-duration! void? ())
(add-prefix something? ())
(add1 number? (number?))
(alias something? ())
(andmap boolean? (procedure? list? **1))
(angle number? (number?))
(annotation-expression something? (annotation?))
(annotation-options something? (annotation?))
(annotation-source something? (annotation?))
(annotation-stripped something? (annotation?))
(annotation? boolean? (something?))
(append list? (list? something?))
(append list? ())
(append! pair? ())
(apropos integer? ())
(apropos number? ())
(ash integer? (integer? integer?))
(asin number? (number?))
(asinh number? (number?))
(assert number? ())
(assertion-violation? boolean? (something?))
(atan number? (number?))
(atan number? (real? real?))
(atom? boolean? (something?))
(bignum? boolean? ())
(binary-port-input-count integer? ())
(binary-port-input-size integer? ())
(binary-port-output-count integer? ())
(binary-port-output-size integer? ())
(binary-port? boolean? (something?))
(bitwise-bit-count integer? ())
(bitwise-bit-set? boolean? ())
(boolean=? boolean? ())
(boolean? boolean? (something?))
(bound-identifier=? boolean? ())
(box-cas! void? (box? something? something?))
(box? boolean? (something?))
(bwp-object? boolean? (something?))
(bytevector->immutable-bytevector boolean? ())
(bytevector->s8-list list? ())
(bytevector->sint-list list? ())
(bytevector->string string? ())
(bytevector->u8-list list? ())
(bytevector->uint-list list? ())
(bytevector-copy boolean? ())
(bytevector-copy! void? ())
(bytevector-fill! void? ())
(bytevector-ieee-double-native-ref fixnum? ())
(bytevector-ieee-double-native-set! void? ())
(bytevector-ieee-double-ref fixnum? ())
(bytevector-ieee-double-set! void? ())
(bytevector-ieee-single-native-ref fixnum? ())
(bytevector-ieee-single-native-set! void? ())
(bytevector-ieee-single-ref fixnum? ())
(bytevector-ieee-single-set! void? ())
(bytevector-length integer? ())
(bytevector-s16-native-set! void? ())
(bytevector-s16-set! void? ())
(bytevector-s24-set! void? ())
(bytevector-s32-native-set! void? ())
(bytevector-s32-set! void? ())
(bytevector-s40-set! void? ())
(bytevector-s48-set! void? ())
(bytevector-s56-set! void? ())
(bytevector-s64-native-set! void? ())
(bytevector-s64-set! void? ())
(bytevector-s8-set! void? ())
(bytevector-sint-ref integer? ())
(bytevector-sint-set! void? ())
(bytevector-truncate! void? ())
(bytevector-u16-native-set! void? ())
(bytevector-u16-set! void? ())
(bytevector-u24-set! void? ())
(bytevector-u32-native-set! void? ())
(bytevector-u32-set! void? ())
(bytevector-u40-set! void? ())
(bytevector-u48-set! void? ())
(bytevector-u56-set! void? ())
(bytevector-u64-native-set! void? ())
(bytevector-u64-set! void? ())
(bytevector-u8-set! void? ())
(bytevector-uint-ref integer? ())
(bytevector-uint-set! void? ())
(bytevector=? boolean? (bytevector? bytevector?))
(bytevector? boolean? (something?))
(call-with-bytevector-output-port void? (procedure?))
(call-with-bytevector-output-port void? (procedure? transcoder?))
(call-with-current-continuation something? (procedure?))
(call-with-input-file something? ())
(call-with-input-file void? (string? procedure?))
(call-with-output-file something? ())
(call/1cc something? (procedure?))
(call/cc something? (procedure?))
(ceiling integer? (real?))
(cfl* boolean? (cflonum? ...))
(cfl+ boolean? (cflonum? ...))
(cfl- boolean? (cflonum? **1))
(cfl-conjugate boolean? (cflonum?))
(cfl-imag-part boolean? (cflonum?))
(cfl-magnitude-squared boolean? (cflonum?))
(cfl-real-part boolean? (cflonum?))
(cfl/ boolean? (cflonum? **1))
(cfl= boolean? (cflonum? ...))
(cflonum? boolean? ())
(char- integer? (char? char?))
(char->integer integer? (char?))
(char-alphabetic? boolean? (char?))
(char-ci<=? boolean? (char? char? **1))
(char-ci<? boolean? (char? char? **1))
(char-ci=? boolean? (char? char? **1))
(char-ci>=? boolean? (char? char? **1))
(char-ci>? boolean? (char? char? **1))
(char-downcase boolean? (char?))
(char-foldcase boolean? (char?))
(char-general-category symbol? (char?))
(char-lower-case? boolean? (char?))
(char-name boolean? (char?))
(char-name char? (symbol?))
(char-name symbol? (string? char?))
(char-numeric? boolean? (char?))
(char-ready? boolean? (textual-output-port?))
(char-ready? boolean? ())
(char-title-case? boolean? (char?))
(char-titlecase char? (char?))
(char-upcase char? (char?))
(char-upper-case? boolean? (char?))
(char-whitespace? boolean? (char?))
(char<=? boolean? (char? char? **1))
(char<? boolean? (char? char? **1))
(char=? boolean? (char? char? **1))
(char>=? boolean? (char? char? **1))
(char>? boolean? (char? char? **1))
(char? boolean? (something?))
(chmod (number? x)())
(clear-input-port void? ())
(clear-output-port void? ())
(close-input-port void? ())
(close-output-port void? ())
(close-port void? ())
(command-line list? ())
(compile-time-value? boolean? (something?))
(complex? boolean? (something?))
(compute-composition integer? (something? procedure?))
(compute-composition integer? (something?))
(compute-size integer? (something? procedure?))
(compute-size integer? (something?))
(condition? boolean? (something?))
(conjugate number? (number?))
(continuation-condition? boolean? (something?))
(cos number? (number?))
(cosh number? (number?))
(cost-center-allocation-count integer? ())
(cost-center-instruction-count integer? ())
(cost-center? boolean? (something?))
(date-dst? boolean? ())
(date? boolean? (something?))
(decode-float vector? (flonum?))
(directory-separator? boolean? ())
(display void? (something? textual-output-port?))
(display-condition void? (something? textual-output-port?))
(display-statistics void? (textual-output-port?))
(display-statistics void? ())
(display-string void? (string? textual-output-port?))
(display-string void? (string?))
(div0 number? (number? number?))
(div0-and-mod0 number? (number? number?))
(enum-set-member? boolean? ())
(enum-set-subset? boolean? ())
(enum-set=? boolean? ())
(enum-set? boolean? ())
(environment-mutable? boolean? ())
(environment? boolean? (something?))
(eof-object? boolean? (something?))
(ephemeron-pair? boolean? (something?))
(eq-hashtable-contains? boolean? ())
(eq-hashtable-delete! void? ())
(eq-hashtable-ephemeron? boolean? ())
(eq-hashtable-set! void? ())
(eq-hashtable-update! void? ())
(eq-hashtable-weak? boolean? ())
(eq-hashtable? boolean? (something?))
(eq? boolean? (something?))
(equal? boolean? (something?))
(eqv? boolean? (something?))
(error? boolean? (something?))
(even? boolean? ())
(exact? boolean? (number?))
(file-change-time time? ())
(file-directory? boolean? ())
(file-exists? boolean? ())
(file-modification-time time? ())
(file-port? boolean? ())
(file-position integer? ())
(file-regular? boolean? ())
(file-symbolic-link? boolean? ())
(finite? boolean? (real?))
(fixnum->flonum fixnum? ())
(fixnum-width integer? ())
(fixnum? boolean? ())
(fl* fixnum? ())
(fl+ fixnum? ())
(fl- fixnum? ())
(fl-make-rectangular fixnum? (fixnum? fixnum?))
(fl/ fixnum? ())
(fl< fixnum? (fixnum? **1))
(fl<= fixnum? (fixnum? **1))
(fl<=? boolean? ())
(fl<? boolean? ())
(fl= fixnum? (fixnum? **1))
(fl=? boolean? ())
(fl> fixnum? (fixnum? **1))
(fl>= fixnum? (fixnum? **1))
(fl>=? boolean? ())
(fl>? boolean? ())
(flabs fixnum? ())
(flacos fixnum? ())
(flasin fixnum? ())
(flatan fixnum? ())
(flceiling fixnum? ())
(flcos fixnum? ())
(fldenominator fixnum? ())
(fldiv fixnum? ())
(fldiv-and-mod fixnum? ())
(fldiv0 fixnum? ())
(fldiv0-and-mod0 fixnum? ())
(fleven? boolean? ())
(flexp fixnum? ())
(flexpt fixnum? ())
(flfinite? boolean? ())
(flfloor fixnum? ())
(flinfinite? boolean? ())
(flinteger? boolean? ())
(fllog fixnum? ())
(fllp fixnum? (fixnum?))
(flmax fixnum? ())
(flmin fixnum? ())
(flmod fixnum? ())
(flmod0 fixnum? ())
(flnan? boolean? ())
(flnegative? boolean? ())
(flnonnegative? boolean? ())
(flnonpositive? boolean? ())
(flnumerator fixnum? ())
(flodd? boolean? ())
(flonum->fixnum fixnum? ())
(flonum? boolean? ())
(floor fixnum? (real?))
(flpositive? boolean? ())
(flround fixnum? ())
(flsin fixnum? ())
(flsqrt flonum? ())
(fltan flonum? ())
(fltruncate flonum? ())
(flush-output-port flonum? ())
(flzero? boolean? ())
(foreign-entry? boolean? ())
(foreign-set! void? ())
(foreign-sizeof integer? ())
(format-condition? boolean? (something?))
(free-identifier=? boolean? ())
(fx* fixnum? (fixnum? ...))
(fx* fixnum? ())
(fx*/carry fixnum? ())
(fx+ fixnum? (fixnum? ...))
(fx+ fixnum? ())
(fx+/carry fixnum? ())
(fx- fixnum? (fixnum? **1))
(fx- fixnum? ())
(fx-/carry fixnum? ())
(fx/ fixnum? (fixnum? **1))
(fx1+ fixnum? (fixnum?))
(fx1- fixnum? (fixnum?))
(fx< fixnum? (fixnum? **1))
(fx<= fixnum? (fixnum? **1))
(fx<=? boolean? ())
(fx<? boolean? ())
(fx= fixnum? (fixnum? **1))
(fx=? boolean? ())
(fx> fixnum? (fixnum? **1))
(fx>= fixnum? (fixnum? **1))
(fx>=? boolean? ())
(fx>? boolean? ())
(fxabs fixnum? (fixnum?))
(fxand fixnum? ())
(fxarithmetic-shift fixnum? ())
(fxarithmetic-shift-left fixnum? ())
(fxarithmetic-shift-right fixnum? ())
(fxbit-count fixnum? ())
(fxbit-field fixnum? ())
(fxbit-set? boolean? ())
(fxcopy-bit fixnum? ())
(fxcopy-bit-field fixnum? ())
(fxdiv fixnum? ())
(fxdiv-and-mod fixnum? ())
(fxdiv0 fixnum? ())
(fxdiv0-and-mod0 fixnum? ())
(fxeven? boolean? ())
(fxfirst-bit-set fixnum? ())
(fxif fixnum? ())
(fxior fixnum? ())
(fxlength fixnum? ())
(fxlogand fixnum? (fixnum? ...))
(fxlogbit0 fixnum? (integer? fixnum?))
(fxlogbit1 fixnum? (integer? fixnum?))
(fxlogbit? boolean? (integer? fixnum?))
(fxlogior fixnum? (fixnum? ...))
(fxlognot fixnum? (fixnum?))
(fxlogor fixnum? (fixnum? ...))
(fxlogtest fixnum? (fixnum? fixnum?))
(fxlogxor fixnum? (fixnum? ...))
(fxmax fixnum? ())
(fxmin fixnum? ())
(fxmod fixnum? ())
(fxmod0 fixnum? ())
(fxmodulo fixnum? (fixnum? fixnum?))
(fxnegative? boolean? ())
(fxnonnegative? boolean? (fixnum?))
(fxnonpositive? boolean? (fixnum?))
(fxnot fixnum? ())
(fxodd? boolean? ())
(fxpositive? boolean? ())
(fxquotient fixnum? (fixnum? **1))
(fxremainder fixnum? (fixnum? fixnum?))
(fxreverse-bit-field fixnum? ())
(fxrotate-bit-field fixnum? ())
(fxsll fixnum? (fixnum? integer?))
(fxsra fixnum? (fixnum? integer?))
(fxsrl fixnum? (fixnum? integer?))
(fxvector fxvector? (fixnum? ...))
(fxvector->immutable-fxvector immutable-fxvector? ())
(fxvector->list list? ())
(fxvector-copy fxvector? ())
(fxvector-fill! void? (fxvector? fixnum?))
(fxvector-length integer? ())
(fxvector-ref fixnum? ())
(fxvector-set! void? (fxvector? integer? fixnum?))
(fxvector? boolean? (something?))
(fxxor fixnum? ())
(fxzero? boolean? ())
(gensym? boolean? (something?))
(get-bytevector-n! void? ())
(get-bytevector-some! void? ())
(get-source-table! void? ())
(get-string-n! void? ())
(get-string-some! void? ())
(greatest-fixnum fixnum? ())
(guardian? boolean? (something?))
(hash-table? boolean? (something?))
(hashtable-clear! void? ())
(hashtable-contains? boolean? ())
(hashtable-delete! void? ())
(hashtable-ephemeron? boolean? (something?))
(hashtable-mutable? boolean? ())
(hashtable-set! void? ())
(hashtable-size integer? ())
(hashtable-update! void? ())
(hashtable-weak? boolean? (something?))
(hashtable? boolean? (something?))
(i/o-decoding-error? boolean? (something?))
(i/o-encoding-error? boolean? (something?))
(i/o-error-filename string? ())
(i/o-error-port port? ())
(i/o-error-position integer? ())
(i/o-error? boolean? (something?))
(i/o-file-already-exists-error? boolean? (something?))
(i/o-file-does-not-exist-error? boolean? (something?))
(i/o-file-is-read-only-error? boolean? (something?))
(i/o-file-protection-error? boolean? (something?))
(i/o-filename-error? boolean? (something?))
(i/o-invalid-position-error? boolean? (something?))
(i/o-port-error? boolean? (something?))
(i/o-read-error? boolean? (something?))
(i/o-write-error? boolean? (something?))
(identifier? boolean? (something?))
(immutable-box? boolean? (something?))
(immutable-bytevector? boolean? (something?))
(immutable-fxvector? boolean? (something?))
(immutable-string? boolean? (something?))
(immutable-vector? boolean? (something?))
(implementation-restriction-violation? boolean? (something?))
(inexact->exact exact? (number?))
(inexact? boolean? (number?))
(infinite? boolean? (real?))
(input-port-ready? boolean? ())
(input-port? boolean? (something?))
(integer->char boolean? (integer?))
(integer-valued? boolean? (something?))
(integer? boolean? (something?))
(interactive? boolean? ())
(irritants-condition? boolean? (something?))
(least-fixnum fixnum? ())
(lexical-violation? boolean? (something?))
(list list? (something? ...))
(list* pair? (something? ... something?))
(list->fxvector fxvector? ())
(list->string string? ())
(list->vector vector? ())
(list-copy list? ())
(list-head list? ())
(list-sort list? ())
(list-tail list? ())
(list? boolean? (something?))
(literal-identifier=? boolean? ())
(load void? ())
(load-compiled-from-port void? ())
(load-library void? ())
(load-program void? ())
(load-shared-object void? (string?))
(locked-object? boolean? (something?))
(log number? (number? number?))
(log number? (number?))
(logbit? boolean? ())
(magnitude number? (number?))
(magnitude-squared number? (number?))
(make-annotation annotation? ())
(make-assertion-violation boolean? ())
(make-bytevector boolean? ())
(make-compile-time-value boolean? (something?))
(make-condition boolean? ())
(make-continuation-condition continuation-condition? ())
(make-cost-center cost-center? ())
(make-date date? ())
(make-eq-hashtable eq-hashtable? ())
(make-eqv-hashtable hashtable? ())
(make-error error? ())
(make-format-condition format-condition? ())
(make-fxvector fxvector? (integer? fixnum?))
(make-fxvector fxvector? ())
(make-guardian guadian? ())
(make-hash-table hash-table? ())
(make-hashtable hashtable? ())
(make-i/o-decoding-error boolean? (something?))
(make-i/o-encoding-error boolean? (something? something?))
(make-i/o-error boolean? (something?))
(make-i/o-file-already-exists-error boolean? ())
(make-i/o-file-does-not-exist-error boolean? ())
(make-i/o-file-is-read-only-error boolean? ())
(make-i/o-file-protection-error boolean? ())
(make-i/o-filename-error boolean? ())
(make-i/o-invalid-position-error boolean? ())
(make-i/o-port-error condition? (something?))
(make-i/o-read-error condition? ())
(make-i/o-write-error condition? ())
(make-time time? ())
(mark-port-closed! void? ())
(max real? (real? real?))
(merge list? ())
(merge! void? ())
(message-condition? boolean? (something?))
(min real? (real? real?))
(mkdir void? ())
(mod number? ())
(mod0 number? ())
(modulo void? ())
(most-negative-fixnum fixnum? ())
(most-positive-fixnum fixnum? ())
(multibyte->string string? (bytevector?))
(mutable-box? boolean? (something?))
(mutable-bytevector? boolean? (something?))
(mutable-fxvector? boolean? (something?))
(mutable-string? boolean? (something?))
(mutable-vector? boolean? (something?))
(mutex-acquire void? ())
(mutex? boolean? (something?))
(nan? boolean? (real?))
(negative? boolean? (real?))
(new-cafe void? ())
(newline void? ())
(no-infinities-violation? boolean? (something?))
(no-nans-violation? boolean? (something?))
(non-continuable-violation? boolean? (something?))
(nonnegative? boolean? (real?))
(nonpositive? boolean? (real?))
(not boolean? (something?))
(null? boolean? (something?))
(number->string string? ())
(number? boolean? ())
(numerator number? ())
(object-counts integer? ())
(oblist list? ())
(odd? boolean? ())
(open-bytevector-input-port binary-port? (bytevector?))
(open-bytevector-input-port binary-port? (bytevector? transcoder?))
(open-bytevector-input-port input-port? (bytevector?))
(open-bytevector-input-port input-port? (bytevector? transcoder?))
(open-bytevector-output-port binary-port? ())
(open-bytevector-output-port output-port? ())
(output-port? boolean? (something?))
(pair? boolean? (something?))
(path-absolute? boolean? ())
(petite? boolean? ())
(port-bol? boolean? ())
(port-closed? boolean? ())
(port-eof? boolean? ())
(port-file-compressed! void? ())
(port-has-port-length? boolean? ())
(port-has-port-nonblocking?? boolean? ())
(port-has-port-position? boolean? ())
(port-has-set-port-length!? boolean? ())
(port-has-set-port-nonblocking!? boolean? ())
(port-has-set-port-position!? boolean? ())
(port-input-count integer? ())
(port-input-empty? boolean? ())
(port-input-size integer? ())
(port-nonblocking? boolean? ())
(port-output-count integer? ())
(port-output-full? boolean? ())
(port-output-size integer? ())
(port-position integer? ())
(port? boolean? (something?))
(positive? boolean? (real?))
(procedure? boolean? (something?))
(profile-release-counters integer? ())
(put-char void? (textual-output-port? char?))
(put-datum void? (textual-output-port? something?))
(put-hash-table! void? ())
(put-registry! void? ())
(put-source-table void? ())
(put-string void? ())
(put-string-some void? ())
(put-u8 void? ())
(quotient integer? ())
(raise void? (something?))
(raise-continuable void? (something?))
(random real? (real?))
(rational-valued? boolean? (something?))
(rational? boolean? (something?))
(rationalize real? (real? real?))
(ratnum? boolean? ())
(read-char boolean? (textual-output-port?))
(read-char boolean? ())
(real->flonum flonum? (real?))
(real-part real? (number?))
(real-time integer? ())
(real-valued? boolean? (something?))
(real? boolean? (something?))
(record-constructor-descriptor? boolean? (something?))
(record-field-accessible? boolean? ())
(record-field-mutable? boolean? ())
(record-type-descriptor? boolean? (something?))
(record-type-generative? boolean? ())
(record-type-opaque? boolean? ())
(record-type-sealed? boolean? ())
(record? boolean? (something?))
(remove! void? (something? list?))
(remove-hash-table! void? ())
(remove-registry! void? ())
(remq! void? (something? list?))
(remv! void? (something? list?))
(reset-cost-center! void? ())
(reset-maximum-memory-bytes! void? ())
(reverse! void? ())
(round integer? (real?))
(s8-list->bytevector boolean? ())
(serious-condition? boolean? (something?))
(set! void? ())
(set-binary-port-input-buffer! void? (binary-input-port? bytevector?))
(set-binary-port-input-index! void? ())
(set-binary-port-input-size! void? ())
(set-binary-port-output-buffer! void? (binary-output-port? bytevector?))
(set-binary-port-output-index! void? ())
(set-binary-port-output-size! void? ())
(set-box! void? (box? something? ))
(set-car! void? (pair? something?))
(set-cdr! void? (pair? something?))
(set-port-bol! void? (output-port? something?))
(set-port-eof! void? (input-port? something?))
(set-port-input-buffer! void? ())
(set-port-input-index! void? ())
(set-port-input-size! void? ())
(set-port-length! void? ())
(set-port-name! void? (port? something?))
(set-port-nonblocking! void? (port? something?))
(set-port-output-buffer! void? ())
(set-port-output-index! void? ())
(set-port-output-size! void? ())
(set-port-position! void? ())
(set-sstats-bytes! void? ())
(set-sstats-cpu! void? ())
(set-sstats-gc-bytes! void? ())
(set-sstats-gc-count! void? ())
(set-sstats-gc-cpu! void? ())
(set-sstats-gc-real! void? ())
(set-sstats-real! void? ())
(set-textual-port-input-buffer! void? ())
(set-textual-port-input-index! void? ())
(set-textual-port-input-size! void? ())
(set-textual-port-output-buffer! void? ())
(set-textual-port-output-index! void? ())
(set-textual-port-output-size! void? ())
(set-time-nanosecond! void? ())
(set-time-second! void? ())
(set-time-type! void? ())
(set-timer void? ())
(set-top-level-value! void? (symbol? something? ))
(set-top-level-value! void? (symbol? something? environment?))
(set-virtual-register! void? ())
(sin number? (number?))
(sinh number? (number?))
(sint-list->bytevector boolean? ())
(sleep void? ())
(sort list? ())
(sort! void? ())
(source-condition? boolean? (something?))
(source-file-descriptor? boolean? (something?))
(source-object? boolean? (something?))
(source-table-contains? boolean? (something?))
(source-table-delete! void? (source-table? source-object?))
(source-table-set! void? (source-table? source-object? something?))
(source-table-size integer? ())
(source-table? boolean? (something?))
(sqrt number? (number?))
(sstats-gc-count integer? ())
(sstats? boolean? (something?))
(string->bytevector boolean? ())
(string->immutable-string immutable-string? ())
(string->list list? ())
(string->number number? ())
(string->symbol symbol? ())
(string->utf16 boolean? ())
(string->utf32 boolean? ())
(string->utf8 boolean? ())
(string-ci<=? boolean? ())
(string-ci<? boolean? ())
(string-ci=? boolean? ())
(string-ci>=? boolean? ())
(string-ci>? boolean? ())
(string-copy! void? ())
(string-fill! void? ())
(string-hash integer? (string?))
(string-length integer? (string?))
(string-ref char? (string? integer?))
(string-set! void? (string? integer? char?))
(string-titlecase string? (string?))
(string-truncate! void? ())
(string-upcase string? (string?))
(string<=? boolean? ())
(string<? boolean? ())
(string=? boolean? ())
(string>=? boolean? ())
(string>? boolean? ())
(string? boolean? (something?))
(sub1 number? (number?))
(subst! void? ())
(substq! void? ())
(substring-fill! void? ())
(substv! void? ())
(subtract-duration! void? ())
(symbol->string string? ())
(symbol-hash integer? ())
(symbol-hashtable-contains? boolean? ())
(symbol-hashtable-delete! void? ())
(symbol-hashtable-set! void? ())
(symbol-hashtable-update! void? ())
(symbol-hashtable? boolean? (something?))
(symbol=? boolean? ())
(symbol? boolean? (something?))
(syntax->annotation annotation? (something?))
(syntax->list list? ())
(syntax->vector vector? ())
(syntax-error error? (something? string? ...))
(syntax-violation? boolean? (something?))
(tan number? (number?))
(tanh number? (number?))
(textual-port-input-count integer? ())
(textual-port-input-size integer? ())
(textual-port-output-count integer? ())
(textual-port-output-size integer? ())
(textual-port? boolean? (something?))
(thread-condition? boolean? (something?))
(thread? boolean? (something?))
(threaded? boolean? ())
(time-difference! void? ())
(time-utc->date date? ())
(time<=? boolean? ())
(time<? boolean? ())
(time=? boolean? ())
(time>=? boolean? ())
(time>? boolean? ())
(time? boolean? (something?))
(top-level-bound? boolean? ())
(top-level-mutable? boolean? ())
(top-level-syntax? boolean? ())
(trace-case-lambda procedure? ())
(trace-lambda procedure? ())
(transcoder? boolean? (something?))
(truncate real? (real?))
(u8-list->bytevector boolean? ())
(uint-list->bytevector boolean? ())
(undefined-violation? boolean? (something?))
(utf16->string string? (bytevector?))
(utf32->string string? (bytevector?))
(utf8->string string? (bytevector?))
(vector vector? (something? ...))
(vector->immutable-vector immutable-vector? ())
(vector->list list? ())
(vector-cas! void? (vector? integer? something? something?))
(vector-copy vector? ())
(vector-fill! void? ())
(vector-length integer? ())
(vector-set! void? ())
(vector-set-fixnum! void? ())
(vector-sort vector? ())
(vector-sort! void? ())
(vector? boolean? (something?))
(violation? boolean? (something?))
(virtual-register-count integer? ())
(void void? ())
(warning? boolean? (something?))
(weak-pair? boolean? (something?))
(who-condition? boolean? (something?))
(write void? ())
(write-char void? (char? textual-input-port?))
(write-char void? (char?))
(zero? boolean? (number?))
)))
)
(library (scheme-langserver analysis identifier meta)
   (export 
      find-meta)
   (import 
      (rnrs)
      (scheme-langserver util binary-search)
      (scheme-langserver analysis identifier reference)
      (scheme-langserver analysis type util)
      (scheme-langserver analysis type rnrs-meta-rules))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (find-meta list-instance)
   (cond
      [(equal? list-instance '(rnrs)) rnrs]
      [(equal? list-instance '(scheme)) scheme] 
      [(equal? list-instance '(chezscheme)) chezscheme]
      [(equal? list-instance '(rnrs condition)) rnrs-condition]
      [(equal? list-instance '(rnrs base)) rnrs-base]
      [(equal? list-instance '(rnrs files)) rnrs-files]
      [(equal? list-instance '(rnrs syntax-case)) rnrs-syntax-case]
      [(equal? list-instance '(rnrs exception)) rnrs-exception]
      [(equal? list-instance '(rnrs lists)) rnrs-lists]
      [(equal? list-instance '(rnrs bytevectors)) rnrs-bytevectors]
      [(equal? list-instance '(rnrs control)) rnrs-control]
      [(equal? list-instance '(rnrs unicode)) rnrs-unicode]
      [(equal? list-instance '(rnrs enums)) rnrs-enums]
      [(equal? list-instance '(rnrs r5rs)) rnrs-r5rs]
      [(equal? list-instance '(rnrs eval)) rnrs-eval]
      [(equal? list-instance '(rnrs hashtables)) rnrs-hashtables]
      [(equal? list-instance '(rnrs sorting)) rnrs-sorting]
      [(equal? list-instance '(rnrs programs)) rnrs-programs]
      [(equal? list-instance '(rnrs mutable-pairs)) rnrs-mutable-pairs]
      [(equal? list-instance '(rnrs mutable-strings)) rnrs-mutable-strings]
      [(equal? list-instance '(rnrs io ports)) rnrs-io-ports]
      [(equal? list-instance '(rnrs io simple)) rnrs-io-simple]
      [(equal? list-instance '(rnrs arithmetic flonums)) rnrs-arithmetic-flonums]
      [(equal? list-instance '(rnrs arithmetic bitwise)) rnrs-arithmetic-bitwise]
      [(equal? list-instance '(rnrs arithmetic fixnums)) rnrs-arithmetic-fixnums]
      [(equal? list-instance '(rnrs records syntactic)) rnrs-records-syntactic]
      [(equal? list-instance '(rnrs records procedure)) rnrs-records-procedure]
      [(equal? list-instance '(rnrs records inspection)) rnrs-records-inspection]
      [(equal? list-instance '(chezscheme csv7)) chezscheme-csv7] 
      [(equal? list-instance '(scheme csv7)) scheme-csv7]
      [else '()]))

(define (private-process library-instance list-instance)
   (sort-identifier-references 
      (map 
         (lambda (identifier-pair) 
            (make-identifier-reference 
               (car identifier-pair) 
               '() 
               '() 
               library-instance 
               (cadr identifier-pair)
               '() 
               (map 
                  (lambda (pair)
                     (construct-type-expression-with-meta (cdr pair)))
                  (binary-search
                     (list->vector rnrs-chez-rules)
                     (lambda (target0 target1)
                        (natural-order-compare 
                           (symbol->string (car target0))
                           (symbol->string (car target1))))
                     (list (car identifier-pair))))))
         list-instance)))

(define rnrs (private-process '(rnrs) '(
(&assertion	syntax)
(&condition	syntax)
(&error	syntax)
(&i/o	syntax)
(&i/o-decoding	syntax)
(&i/o-encoding	syntax)
(&i/o-file-already-exists	syntax)
(&i/o-file-does-not-exist	syntax)
(&i/o-file-is-read-only	syntax)
(&i/o-file-protection	syntax)
(&i/o-filename	syntax)
(&i/o-invalid-position	syntax)
(&i/o-port	syntax)
(&i/o-read	syntax)
(&i/o-write	syntax)
(&implementation-restriction	syntax)
(&irritants	syntax)
(&lexical	syntax)
(&message	syntax)
(&no-infinities	syntax)
(&no-nans	syntax)
(&non-continuable	syntax)
(&serious	syntax)
(&syntax	syntax)
(&undefined	syntax)
(&violation	syntax)
(&warning	syntax)
(&who	syntax)
(*	Category)
(+	procedure)
(-	procedure)
(...	syntax)
(/	procedure)
(=>	syntax)
(_	syntax)
(abs	procedure)
(acos	procedure)
(and	syntax)
(angle	procedure)
(append	procedure)
(apply	procedure)
(asin	procedure)
(assert	syntax)
(assertion-violation	procedure)
(assertion-violation?	procedure)
(assoc	procedure)
(assp	procedure)
(assq	procedure)
(assv	procedure)
(atan	procedure)
(begin	syntax)
(binary-port?	procedure)
(bitwise-and	procedure)
(bitwise-arithmetic-shift	procedure)
(bitwise-arithmetic-shift-left	procedure)
(bitwise-arithmetic-shift-right	procedure)
(bitwise-bit-count	procedure)
(bitwise-bit-field	procedure)
(bitwise-bit-set?	procedure)
(bitwise-copy-bit	procedure)
(bitwise-copy-bit-field	procedure)
(bitwise-first-bit-set	procedure)
(bitwise-if	procedure)
(bitwise-ior	procedure)
(bitwise-length	procedure)
(bitwise-not	procedure)
(bitwise-reverse-bit-field	procedure)
(bitwise-rotate-bit-field	procedure)
(bitwise-xor	procedure)
(boolean=?	procedure)
(boolean?	procedure)
(bound-identifier=?	procedure)
(buffer-mode	syntax)
(buffer-mode?	syntax)
(bytevector->sint-list	procedure)
(bytevector->string	procedure)
(bytevector->u8-list	procedure)
(bytevector->uint-list	procedure)
(bytevector-copy	procedure)
(bytevector-copy!	procedure)
(bytevector-fill!	procedure)
(bytevector-ieee-double-native-ref	procedure)
(bytevector-ieee-double-native-set!	procedure)
(bytevector-ieee-double-ref	procedure)
(bytevector-ieee-double-set!	procedure)
(bytevector-ieee-single-native-ref	procedure)
(bytevector-ieee-single-native-set!	procedure)
(bytevector-ieee-single-ref	procedure)
(bytevector-ieee-single-set!	procedure)
(bytevector-length	procedure)
(bytevector-s16-native-ref	procedure)
(bytevector-s16-native-set!	procedure)
(bytevector-s16-ref	procedure)
(bytevector-s16-set!	procedure)
(bytevector-s32-native-ref	procedure)
(bytevector-s32-native-set!	procedure)
(bytevector-s32-ref	procedure)
(bytevector-s32-set!	procedure)
(bytevector-s64-native-ref	procedure)
(bytevector-s64-native-set!	procedure)
(bytevector-s64-ref	procedure)
(bytevector-s64-set!	procedure)
(bytevector-s8-ref	procedure)
(bytevector-s8-set!	procedure)
(bytevector-sint-ref	procedure)
(bytevector-sint-set!	procedure)
(bytevector-u16-native-ref	procedure)
(bytevector-u16-native-set!	procedure)
(bytevector-u16-ref	procedure)
(bytevector-u16-set!	procedure)
(bytevector-u32-native-ref	procedure)
(bytevector-u32-native-set!	procedure)
(bytevector-u32-ref	procedure)
(bytevector-u32-set!	procedure)
(bytevector-u64-native-ref	procedure)
(bytevector-u64-native-set!	procedure)
(bytevector-u64-ref	procedure)
(bytevector-u64-set!	procedure)
(bytevector-u8-ref	procedure)
(bytevector-u8-set!	procedure)
(bytevector-uint-ref	procedure)
(bytevector-uint-set!	procedure)
(bytevector=?	procedure)
(bytevector?	procedure)
(caaaar	procedure)
(caaadr	procedure)
(caaar	procedure)
(caadar	procedure)
(caaddr	procedure)
(caadr	procedure)
(caar	procedure)
(cadaar	procedure)
(cadadr	procedure)
(cadar	procedure)
(caddar	procedure)
(cadddr	procedure)
(caddr	procedure)
(cadr	procedure)
(call-with-bytevector-output-port	procedure)
(call-with-current-continuation	procedure)
(call-with-port	procedure)
(call-with-string-output-port	procedure)
(call-with-values	procedure)
(call/cc	procedure)
(car	procedure)
(case-lambda	syntax)
(cdaaar	procedure)
(cdaadr	procedure)
(cdaar	procedure)
(cdadar	procedure)
(cdaddr	procedure)
(cdadr	procedure)
(cdar	procedure)
(cddaar	procedure)
(cddadr	procedure)
(cddar	procedure)
(cdddar	procedure)
(cddddr	procedure)
(cdddr	procedure)
(cddr	procedure)
(cdr	procedure)
(ceiling	procedure)
(char->integer	procedure)
(char-alphabetic?	procedure)
(char-downcase	procedure)
(char-foldcase	procedure)
(char-general-category	procedure)
(char-lower-case?	procedure)
(char-numeric?	procedure)
(char-title-case?	procedure)
(char-titlecase	procedure)
(char-upcase	procedure)
(char-upper-case?	procedure)
(char-whitespace?	procedure)
(char?	procedure)
(close-input-port	procedure)
(close-output-port	procedure)
(close-port	procedure)
(complex?	procedure)
(cond	syntax)
(condition	procedure)
(condition-accessor	procedure)
(condition-irritants	procedure)
(condition-message	procedure)
(condition-predicate	procedure)
(condition-who	procedure)
(condition?	procedure)
(cons	procedure)
(cons*	procedure)
(cos	procedure)
(datum->syntax	procedure)
(define	syntax)
(define-condition-type	syntax)
(define-enumeration	syntax)
(define-record-type	syntax)
(define-syntax	syntax)
(denominator	procedure)
(display	procedure)
(div	procedure)
(div-and-mod	procedure)
(div0	procedure)
(div0-and-mod0	procedure)
(do	syntax)
(else	syntax)
(endianness	syntax)
(enum-set->list	procedure)
(enum-set-complement	procedure)
(enum-set-constructor	procedure)
(enum-set-difference	procedure)
(enum-set-indexer	procedure)
(enum-set-intersection	procedure)
(enum-set-member?	procedure)
(enum-set-projection	procedure)
(enum-set-subset?	procedure)
(enum-set-union	procedure)
(enum-set-universe	procedure)
(enum-set=?	procedure)
(eof-object	procedure)
(eof-object?	procedure)
(eol-style	syntax)
(eq?	procedure)
(equal-hash	procedure)
(equal?	procedure)
(eqv?	procedure)
(error	procedure)
(error-handling-mode	syntax)
(error?	procedure)
(even?	procedure)
(exact	procedure)
(exact-integer-sqrt	procedure)
(exact?	procedure)
(exists	procedure)
(exp	procedure)
(expt	procedure)
(fields	syntax)
(file-options	syntax)
(filter	procedure)
(find	procedure)
(finite?	procedure)
(fixnum->flonum	procedure)
(fixnum-width	procedure)
(fixnum?	procedure)
(fl*	procedure)
(fl+	procedure)
(fl-	procedure)
(fl/	procedure)
(fl<=?	procedure)
(fl<?	procedure)
(fl=?	procedure)
(fl>=?	procedure)
(fl>?	procedure)
(flabs	procedure)
(flacos	procedure)
(flasin	procedure)
(flatan	procedure)
(flceiling	procedure)
(flcos	procedure)
(fldenominator	procedure)
(fldiv	procedure)
(fldiv-and-mod	procedure)
(fldiv0	procedure)
(fldiv0-and-mod0	procedure)
(fleven?	procedure)
(flexp	procedure)
(flexpt	procedure)
(flfinite?	procedure)
(flfloor	procedure)
(flinfinite?	procedure)
(flinteger?	procedure)
(fllog	procedure)
(flmax	procedure)
(flmin	procedure)
(flmod	procedure)
(flmod0	procedure)
(flnan?	procedure)
(flnegative?	procedure)
(flnumerator	procedure)
(flodd?	procedure)
(flonum?	procedure)
(floor	procedure)
(flpositive?	procedure)
(flround	procedure)
(flsin	procedure)
(flsqrt	procedure)
(fltan	procedure)
(fltruncate	procedure)
(flzero?	procedure)
(fold-left	procedure)
(fold-right	procedure)
(for-all	procedure)
(for-each	procedure)
(free-identifier=?	procedure)
(fx*/carry	procedure)
(fx+/carry	procedure)
(fx-/carry	procedure)
(fx<=?	procedure)
(fx<?	procedure)
(fx=?	procedure)
(fx>=?	procedure)
(fx>?	procedure)
(fxand	procedure)
(fxarithmetic-shift	procedure)
(fxarithmetic-shift-left	procedure)
(fxarithmetic-shift-right	procedure)
(fxbit-count	procedure)
(fxbit-field	procedure)
(fxbit-set?	procedure)
(fxcopy-bit	procedure)
(fxcopy-bit-field	procedure)
(fxdiv	procedure)
(fxdiv-and-mod	procedure)
(fxdiv0	procedure)
(fxdiv0-and-mod0	procedure)
(fxeven?	procedure)
(fxfirst-bit-set	procedure)
(fxif	procedure)
(fxior	procedure)
(fxlength	procedure)
(fxmax	procedure)
(fxmin	procedure)
(fxmod	procedure)
(fxmod0	procedure)
(fxnegative?	procedure)
(fxnot	procedure)
(fxodd?	procedure)
(fxpositive?	procedure)
(fxreverse-bit-field	procedure)
(fxrotate-bit-field	procedure)
(fxxor	procedure)
(fxzero?	procedure)
(gcd	procedure)
(generate-temporaries	procedure)
(get-bytevector-all	procedure)
(get-bytevector-n	procedure)
(get-bytevector-n!	procedure)
(get-bytevector-some	procedure)
(get-char	procedure)
(get-datum	procedure)
(get-line	procedure)
(get-string-all	procedure)
(get-string-n	procedure)
(get-string-n!	procedure)
(get-u8	procedure)
(greatest-fixnum	procedure)
(guard	syntax)
(hashtable-clear!	procedure)
(hashtable-contains?	procedure)
(hashtable-copy	procedure)
(hashtable-delete!	procedure)
(hashtable-equivalence-function	procedure)
(hashtable-hash-function	procedure)
(hashtable-mutable?	procedure)
(hashtable-ref	procedure)
(hashtable-set!	procedure)
(hashtable-size	procedure)
(hashtable-update!	procedure)
(hashtable?	procedure)
(i/o-decoding-error?	procedure)
(i/o-encoding-error-char	procedure)
(i/o-encoding-error?	procedure)
(i/o-error-filename	procedure)
(i/o-error-port	procedure)
(i/o-error-position	procedure)
(i/o-error?	procedure)
(i/o-file-already-exists-error?	procedure)
(i/o-file-does-not-exist-error?	procedure)
(i/o-file-is-read-only-error?	procedure)
(i/o-file-protection-error?	procedure)
(i/o-filename-error?	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-port-error?	procedure)
(i/o-read-error?	procedure)
(i/o-write-error?	procedure)
(identifier-syntax	syntax)
(identifier?	procedure)
(if	syntax)
(imag-part	procedure)
(immutable	syntax)
(implementation-restriction-violation?	procedure)
(inexact	procedure)
(inexact?	procedure)
(infinite?	procedure)
(input-port?	procedure)
(integer->char	procedure)
(integer-valued?	procedure)
(integer?	procedure)
(irritants-condition?	procedure)
(lambda	syntax)
(latin-1-codec	procedure)
(lcm	procedure)
(least-fixnum	procedure)
(length	procedure)
(let	syntax)
(let*	syntax)
(let*-values	syntax)
(let-syntax	syntax)
(let-values	syntax)
(letrec	syntax)
(letrec*	syntax)
(letrec-syntax	syntax)
(lexical-violation?	procedure)
(list	procedure)
(list->string	procedure)
(list->vector	procedure)
(list-ref	procedure)
(list-sort	procedure)
(list-tail	procedure)
(list?	procedure)
(log	procedure)
(lookahead-char	procedure)
(lookahead-u8	procedure)
(magnitude	procedure)
(make-assertion-violation	procedure)
(make-bytevector	procedure)
(make-custom-binary-input-port	procedure)
(make-custom-binary-input/output-port	procedure)
(make-custom-binary-output-port	procedure)
(make-custom-textual-input-port	procedure)
(make-custom-textual-input/output-port	procedure)
(make-custom-textual-output-port	procedure)
(make-enumeration	procedure)
(make-eq-hashtable	procedure)
(make-eqv-hashtable	procedure)
(make-error	procedure)
(make-hashtable	procedure)
(make-i/o-decoding-error	procedure)
(make-i/o-encoding-error	procedure)
(make-i/o-error	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(make-i/o-file-is-read-only-error	procedure)
(make-i/o-file-protection-error	procedure)
(make-i/o-filename-error	procedure)
(make-i/o-invalid-position-error	procedure)
(make-i/o-port-error	procedure)
(make-i/o-read-error	procedure)
(make-i/o-write-error	procedure)
(make-implementation-restriction-violation	procedure)
(make-irritants-condition	procedure)
(make-lexical-violation	procedure)
(make-message-condition	procedure)
(make-no-infinities-violation	procedure)
(make-no-nans-violation	procedure)
(make-non-continuable-violation	procedure)
(make-polar	procedure)
(make-record-constructor-descriptor	procedure)
(make-record-type-descriptor	procedure)
(make-rectangular	procedure)
(make-serious-condition	procedure)
(make-string	procedure)
(make-syntax-violation	procedure)
(make-transcoder	procedure)
(make-undefined-violation	procedure)
(make-variable-transformer	procedure)
(make-vector	procedure)
(make-violation	procedure)
(make-warning	procedure)
(make-who-condition	procedure)
(map	procedure)
(max	procedure)
(member	procedure)
(memp	procedure)
(memq	procedure)
(memv	procedure)
(message-condition?	procedure)
(min	procedure)
(mod	procedure)
(mod0	procedure)
(mutable	syntax)
(nan?	procedure)
(native-endianness	procedure)
(native-eol-style	procedure)
(native-transcoder	procedure)
(negative?	procedure)
(newline	procedure)
(no-infinities-violation?	procedure)
(no-nans-violation?	procedure)
(non-continuable-violation?	procedure)
(nongenerative	syntax)
(not	procedure)
(null?	procedure)
(number?	procedure)
(numerator	procedure)
(odd?	procedure)
(opaque	syntax)
(open-bytevector-input-port	procedure)
(open-bytevector-output-port	procedure)
(open-file-input-port	procedure)
(open-file-input/output-port	procedure)
(open-file-output-port	procedure)
(open-string-input-port	procedure)
(open-string-output-port	procedure)
(or	syntax)
(output-port-buffer-mode	procedure)
(output-port?	procedure)
(pair?	procedure)
(parent	syntax)
(parent-rtd	syntax)
(partition	procedure)
(peek-char	procedure)
(port-eof?	procedure)
(port-has-port-position?	procedure)
(port-has-set-port-position!?	procedure)
(port-position	procedure)
(port-transcoder	procedure)
(port?	procedure)
(positive?	procedure)
(procedure?	procedure)
(protocol	syntax)
(put-bytevector	procedure)
(put-char	procedure)
(put-datum	procedure)
(put-string	procedure)
(put-u8	procedure)
(quasiquote	syntax)
(quasisyntax	syntax)
(quote	syntax)
(<	procedure)
(<=	procedure)
(=	procedure)
(>	procedure)
(>=	procedure)
(call-with-input-file	procedure)
(call-with-output-file	procedure)
(case	syntax)
(char-ci<=?	procedure)
(char-ci<?	procedure)
(char-ci=?	procedure)
(char-ci>=?	procedure)
(char-ci>?	procedure)
(char<=?	procedure)
(char<?	procedure)
(char=?	procedure)
(char>=?	procedure)
(char>?	procedure)
(command-line	global-param)
(current-error-port	thread-param)
(current-input-port	thread-param)
(current-output-port	thread-param)
(delete-file	procedure)
(dynamic-wind	procedure)
(exit	procedure)
(file-exists?	procedure)
(flush-output-port	procedure)
(fx*	procedure)
(fx+	procedure)
(fx-	procedure)
(hashtable-entries	procedure)
(hashtable-keys	procedure)
(number->string	procedure)
(open-input-file	procedure)
(open-output-file	procedure)
(record-constructor	procedure)
(record?	procedure)
(standard-error-port	procedure)
(standard-input-port	procedure)
(standard-output-port	procedure)
(string->number	procedure)
(string-ci<=?	procedure)
(string-ci<?	procedure)
(string-ci=?	procedure)
(string-ci>=?	procedure)
(string-ci>?	procedure)
(string<=?	procedure)
(string<?	procedure)
(string=?	procedure)
(string>=?	procedure)
(string>?	procedure)
(syntax-rules	syntax)
(utf-16-codec	procedure)
(with-input-from-file	procedure)
(with-output-to-file	procedure)
(raise	procedure)
(raise-continuable	procedure)
(rational-valued?	procedure)
(rational?	procedure)
(rationalize	procedure)
(read	procedure)
(read-char	procedure)
(real->flonum	procedure)
(real-part	procedure)
(real-valued?	procedure)
(real?	procedure)
(record-accessor	procedure)
(record-constructor-descriptor	syntax)
(record-field-mutable?	procedure)
(record-mutator	procedure)
(record-predicate	procedure)
(record-rtd	procedure)
(record-type-descriptor	procedure)
(record-type-descriptor?	procedure)
(record-type-field-names	procedure)
(record-type-generative?	procedure)
(record-type-name	procedure)
(record-type-opaque?	procedure)
(record-type-parent	procedure)
(record-type-sealed?	procedure)
(record-type-uid	procedure)
(remove	procedure)
(remp	procedure)
(remq	procedure)
(remv	procedure)
(reverse	procedure)
(round	procedure)
(sealed	syntax)
(serious-condition?	procedure)
(set!	syntax)
(set-port-position!	procedure)
(simple-conditions	procedure)
(sin	procedure)
(sint-list->bytevector	procedure)
(sqrt	procedure)
(string	procedure)
(string->bytevector	procedure)
(string->list	procedure)
(string->symbol	procedure)
(string->utf16	procedure)
(string->utf32	procedure)
(string->utf8	procedure)
(string-append	procedure)
(string-ci-hash	procedure)
(string-copy	procedure)
(string-downcase	procedure)
(string-foldcase	procedure)
(string-for-each	procedure)
(string-hash	procedure)
(string-length	procedure)
(string-normalize-nfc	procedure)
(string-normalize-nfd	procedure)
(string-normalize-nfkc	procedure)
(string-normalize-nfkd	procedure)
(string-ref	procedure)
(string-titlecase	procedure)
(string-upcase	procedure)
(string?	procedure)
(substring	procedure)
(symbol->string	procedure)
(symbol-hash	procedure)
(symbol=?	procedure)
(symbol?	procedure)
(syntax	syntax)
(syntax->datum	procedure)
(syntax-case	syntax)
(syntax-violation	procedure)
(syntax-violation-form	procedure)
(syntax-violation-subform	procedure)
(syntax-violation?	procedure)
(tan	procedure)
(textual-port?	procedure)
(transcoded-port	procedure)
(transcoder-codec	procedure)
(transcoder-eol-style	procedure)
(transcoder-error-handling-mode	procedure)
(truncate	procedure)
(u8-list->bytevector	procedure)
(uint-list->bytevector	procedure)
(undefined-violation?	procedure)
(unless	syntax)
(unquote	syntax)
(unquote-splicing	syntax)
(unsyntax	syntax)
(unsyntax-splicing	syntax)
(utf-8-codec	procedure)
(utf16->string	procedure)
(utf32->string	procedure)
(utf8->string	procedure)
(values	procedure)
(vector	procedure)
(vector->list	procedure)
(vector-fill!	procedure)
(vector-for-each	procedure)
(vector-length	procedure)
(vector-map	procedure)
(vector-ref	procedure)
(vector-set!	procedure)
(vector-sort	procedure)
(vector-sort!	procedure)
(vector?	procedure)
(violation?	procedure)
(warning?	procedure)
(when	syntax)
(who-condition?	procedure)
(with-exception-handler	procedure)
(with-syntax	syntax)
(write	procedure)
(write-char	procedure)
(zero?	procedure))))

(define scheme (private-process '(scheme) '(
(+	procedure)
; (1+	procedure)
(fxlogand	procedure)
(symbol-hashtable-update!	procedure)
(r6rs:dynamic-wind	#f)
(trace-define	syntax)
(mutable-string?	procedure)
(assert	syntax)
(textual-port-input-count	procedure)
(property-list	procedure)
(make-parameter	procedure)
(compile-library	procedure)
(logbit0	procedure)
(logbit1	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(pretty-line-length	thread-param)
(bytevector-s56-ref	procedure)
(make-custom-binary-output-port	procedure)
(logbit?	procedure)
(virtual-register	procedure)
(ftype-set!	syntax)
(fields	syntax)
(make-ftype-pointer	syntax)
(make-source-object	procedure)
(port-output-full?	procedure)
(abs	procedure)
(break-handler	thread-param)
(fl*	procedure)
(library-directories	thread-param)
(fl+	procedure)
(set-binary-port-output-buffer!	procedure)
(fl-	procedure)
(fl/	procedure)
(port-output-index	procedure)
(car	procedure)
(fl<	procedure)
(fl=	procedure)
(and	syntax)
(fl>	procedure)
(cdr	procedure)
(profile-line-number-color	thread-param)
(eq?	procedure)
(bytevector-s64-ref	procedure)
(fx*	procedure)
(fx+	procedure)
(ash	procedure)
(make-assertion-violation	procedure)
(fx-	procedure)
(gcd	procedure)
(fx/	procedure)
(div	procedure)
(box	procedure)
(record-type-field-names	procedure)
(flacos	procedure)
(fx<	procedure)
(fx=	procedure)
(cos	procedure)
(fx>	procedure)
(string->symbol	procedure)
(compile-whole-program	procedure)
(bytevector-u16-set!	procedure)
(for-each	procedure)
(lcm	procedure)
(exp	procedure)
(map	procedure)
(let	syntax)
(max	procedure)
(disable-interrupts	procedure)
(min	procedure)
(make-i/o-port-error	procedure)
(log	procedure)
(bytevector-compress	procedure)
(string<=?	procedure)
(mod	procedure)
(fldiv0	procedure)
(expt-mod	procedure)
(string>=?	procedure)
(rec	syntax)
(not	procedure)
(flatan	procedure)
(tan	procedure)
(critical-section	syntax)
(vector-length	procedure)
(close-port	procedure)
(set-textual-port-output-size!	procedure)
(flasin	procedure)
(binary-port-output-size	procedure)
(sin	procedure)
(make-object-finder	procedure)
(engine-return	procedure)
(current-expand	thread-param)
(console-input-port	global-param)
(textual-port-input-index	procedure)
(port-bol?	procedure)
(&i/o-write	syntax)
(filter	procedure)
(datum->syntax	procedure)
(no-infinities-violation?	procedure)
(vector-for-each	procedure)
(gensym	procedure)
(fxvector-ref	procedure)
(flpositive?	procedure)
(bytevector-ieee-double-ref	procedure)
(getenv	procedure)
(eq-hashtable-delete!	procedure)
(set-port-input-buffer!	procedure)
(standard-error-port	procedure)
(port-eof?	procedure)
(make-input/output-port	procedure)
(r6rs:char-ci<?	#f)
(set-port-output-index!	procedure)
(r6rs:char-ci=?	#f)
(r6rs:char-ci>?	#f)
(who-condition?	procedure)
(i/o-decoding-error?	procedure)
(make-i/o-invalid-position-error	procedure)
(bytevector-u24-set!	procedure)
(flnan?	procedure)
(add1	procedure)
(mutable-fxvector?	procedure)
(flexpt	procedure)
(flodd?	procedure)
(imag-part	procedure)
(reverse!	procedure)
(top-level-program	syntax)
(&source	syntax)
(flmod0	procedure)
(source-table-delete!	procedure)
(&i/o-file-does-not-exist	syntax)
(date-zone-offset	procedure)
(caar	procedure)
(foreign-callable-entry-point	procedure)
(cfl*	procedure)
(print-record	thread-param)
(cfl+	procedure)
(acos	procedure)
(bytevector-u16-ref	procedure)
(cadr	procedure)
(cfl-	procedure)
(cfl/	procedure)
(fold-left	procedure)
(compile-program-handler	thread-param)
(unsyntax-splicing	syntax)
(fl<=	procedure)
(open-process-ports	procedure)
(fl<?	procedure)
(fl=?	procedure)
(fl>=	procedure)
(fl>?	procedure)
(cfl=	procedure)
(port-name	procedure)
(cdar	procedure)
(output-port-buffer-mode	procedure)
(logtest	procedure)
(condition-irritants	procedure)
(cddr	procedure)
(case	syntax)
(display-condition	procedure)
(r5rs	module)
(foreign-entry?	procedure)
(fx1+	procedure)
(fx1-	procedure)
(csv7:record-field-accessor	#f)
(cfl-real-part	procedure)
(bytevector-u24-ref	procedure)
(&lexical	syntax)
(set-port-nonblocking!	procedure)
(div0	procedure)
(transcoder-eol-style	procedure)
(bitwise-first-bit-set	procedure)
(pretty-one-line-limit	thread-param)
(foreign-alloc	procedure)
(make-condition	procedure)
(atan	procedure)
(remove-hash-table!	procedure)
(inexact?	procedure)
(box?	procedure)
(fx<=	procedure)
(fx<?	procedure)
(asin	procedure)
(fx=?	procedure)
(fx>=	procedure)
(fx>?	procedure)
(bytevector-u32-set!	procedure)
(clear-output-port	procedure)
(newline	procedure)
(cond	syntax)
(assp	procedure)
(assq	procedure)
(cons	procedure)
(assv	procedure)
(bytevector-u32-ref	procedure)
(cosh	procedure)
(hashtable-clear!	procedure)
(keyboard-interrupt-handler	thread-param)
(find	procedure)
(enum-set?	procedure)
(string->utf16	procedure)
(string->utf32	procedure)
(string-append	procedure)
(else	syntax)
(fxvector-length	procedure)
(put-hash-table!	procedure)
(ieee	module)
(inexact->exact	procedure)
(define-syntax	syntax)
(i/o-file-does-not-exist-error?	procedure)
(eqv?	procedure)
(fllp	procedure)
(r6rs:syntax-rules	#f)
(get-datum/annotations	procedure)
(u8-list->bytevector	procedure)
(eval	procedure)
(flsqrt	procedure)
(equal?	procedure)
(flceiling	procedure)
(bytevector-u40-ref	procedure)
(print-vector-length	thread-param)
(let*	syntax)
(bytevector-s64-native-set!	procedure)
(cp0-outer-unroll-limit	thread-param)
(expression-editor	module)
(implicit-exports	syntax)
(nan?	procedure)
(error-handling-mode	syntax)
(exit	procedure)
(fxif	procedure)
(record-type-equal-procedure	procedure)
(r6rs:char-ci<=?	#f)
(expt	procedure)
(odd?	procedure)
(fxcopy-bit	procedure)
(port-has-port-nonblocking??	procedure)
(exact?	procedure)
(r6rs:char-ci>=?	#f)
(transcoder-codec	procedure)
(timer-interrupt-handler	thread-param)
(real-valued?	procedure)
(iota	procedure)
(top-level-value	procedure)
(mod0	procedure)
(memp	procedure)
(memq	procedure)
(memv	procedure)
(meta	syntax)
(hashtable-hash-function	procedure)
(syntax-violation-subform	procedure)
(get-thread-id	procedure)
(load	procedure)
(datum->syntax-object	procedure)
(list	procedure)
(format	procedure)
(bytevector-u40-set!	procedure)
(internal-defines-as-letrec*	thread-param)
(error?	procedure)
(bytevector-u64-native-ref	procedure)
(default-exception-handler	procedure)
(endianness	syntax)
(port-file-descriptor	procedure)
(utf-16-codec	procedure)
(read	procedure)
(except	syntax)
(errorf	procedure)
(set!	syntax)
(bitwise-arithmetic-shift-right	procedure)
(case-sensitive	thread-param)
(lambda	syntax)
(substring-fill!	procedure)
(quotient	procedure)
(enum-set-complement	procedure)
(violation?	procedure)
(annotation?	procedure)
(remp	procedure)
(remq	procedure)
(remv	procedure)
(only	syntax)
(make-guardian	procedure)
(tanh	procedure)
(undefined-variable-warnings	thread-param)
(box-cas!	procedure)
(&error	syntax)
(pretty-print	procedure)
(path-extension	procedure)
(buffer-mode?	syntax)
(procedure?	procedure)
(sinh	procedure)
(i/o-error?	procedure)
(bytevector	procedure)
(sub1	procedure)
(binary-port?	procedure)
(time	syntax)
(unregister-guardian	procedure)
(nonnegative?	procedure)
(flinteger?	procedure)
(set-top-level-value!	procedure)
(date-zone-name	procedure)
(foreign-entry	procedure)
(syntax->list	procedure)
(load-program	procedure)
(&syntax	syntax)
(let-values	syntax)
(fxnonpositive?	procedure)
(sort	procedure)
(when	syntax)
(port-position	procedure)
(bytevector-uint-ref	procedure)
(sqrt	procedure)
(pretty-standard-indent	thread-param)
(void	procedure)
(bytevector-s16-native-ref	procedure)
(scheme-environment	procedure)
(r6rs:char<?	#f)
(r6rs:char=?	#f)
(r6rs:char>?	#f)
(&message	syntax)
(fxdiv0	procedure)
(source-object-column	procedure)
(file-position	procedure)
(open-output-string	procedure)
(bytevector-ieee-double-set!	procedure)
(unget-u8	procedure)
(with-source-path	procedure)
(expand	procedure)
(exists	procedure)
(define-top-level-value	procedure)
(append!	procedure)
(collect-rendezvous	procedure)
(path-last	procedure)
(current-date	procedure)
(make-irritants-condition	procedure)
(define-record-type	syntax)
(char-numeric?	procedure)
(display-statistics	procedure)
(library-list	procedure)
(open-bytevector-output-port	procedure)
(string-normalize-nfc	procedure)
(string-normalize-nfd	procedure)
(export	syntax)
(file-symbolic-link?	procedure)
(fxodd?	procedure)
(bytevector-u48-ref	procedure)
(length	procedure)
(make-custom-textual-input-port	procedure)
(raise-continuable	procedure)
(fxmod0	procedure)
(annotation-stripped	procedure)
(current-eval	thread-param)
(fasl-file	procedure)
(set-sstats-gc-count!	procedure)
(import	syntax)
(path-rest	procedure)
(set-virtual-register!	procedure)
(put-string-some	procedure)
(parameterize	syntax)
(bytevector-u56-ref	procedure)
(ftype-init-lock!	syntax)
(cost-center-time	procedure)
(immutable	syntax)
(r6rs:char<=?	#f)
(r6rs:char>=?	#f)
(port-output-size	procedure)
(expand-output	thread-param)
(collect-trip-bytes	global-param)
(fxbit-field	procedure)
(member	procedure)
(path-root	procedure)
(call/1cc	procedure)
(unread-char	procedure)
(bytevector-u64-ref	procedure)
(char-ci<?	procedure)
(char-ci=?	procedure)
(char-ci>?	procedure)
(collect-request-handler	global-param)
(locked-object?	procedure)
(null-environment	procedure)
(cost-center-allocation-count	procedure)
(i/o-encoding-error-char	procedure)
(rationalize	procedure)
(create-exception-state	procedure)
(scheme-program	global-param)
(letrec	syntax)
(make-boot-file	procedure)
(sstats-bytes	procedure)
(fxbit-count	procedure)
(open-file-input/output-port	procedure)
(time-difference!	procedure)
(merge!	procedure)
(weak-cons	procedure)
(string-ci<=?	procedure)
(record-writer	procedure)
(binary-port-input-size	procedure)
(string-ci>=?	procedure)
(hashtable-contains?	procedure)
(trace-case-lambda	syntax)
(vector-fill!	procedure)
(trace-lambda	syntax)
(fasl-read	procedure)
(open-fd-input-port	procedure)
(r6rs:call-with-output-file	#f)
(strip-fasl-file	procedure)
(hashtable?	procedure)
(write-char	procedure)
(current-time	procedure)
(record-case	syntax)
(generate-inspector-information	thread-param)
(bytevector-s8-set!	procedure)
(fluid-let-syntax	syntax)
(apropos	procedure)
(petite?	procedure)
(interactive?	procedure)
(source-file-descriptor?	procedure)
(hashtable-equivalence-function	procedure)
(r6rs:current-input-port	#f)
(ftype-spin-lock!	syntax)
(let*-values	syntax)
(open-input-output-file	procedure)
(oblist	procedure)
(bytevector-uint-set!	procedure)
(open-fd-input/output-port	procedure)
(subtract-duration	procedure)
(hash-table-for-each	procedure)
(char-title-case?	procedure)
(set-sstats-gc-bytes!	procedure)
(last-pair	procedure)
(caaar	procedure)
(caadr	procedure)
(fxlength	procedure)
(&i/o-read	syntax)
(cadar	procedure)
(logand	procedure)
(caddr	procedure)
(collections	procedure)
(abort	procedure)
(r6rs:call-with-input-file	#f)
(condition-predicate	procedure)
(string-ci-hash	procedure)
(fl<=?	procedure)
(char-name	procedure)
(enum-set-universe	procedure)
(acosh	procedure)
(fl>=?	procedure)
(string->bytevector	procedure)
(cdaar	procedure)
(time-nanosecond	procedure)
(cdadr	procedure)
(symbol-hashtable-cell	procedure)
(&non-continuable	syntax)
(make-i/o-error	procedure)
(compress-format	thread-param)
(begin	syntax)
(cddar	procedure)
(fxnegative?	procedure)
(compile-file-message	thread-param)
(record?	procedure)
(cdddr	procedure)
(bytevector-ieee-double-native-set!	procedure)
(logior	procedure)
(&i/o-port	syntax)
(symbol-hashtable-delete!	procedure)
(foreign-address-name	procedure)
(current-input-port	thread-param)
(condition-message	procedure)
(lognot	procedure)
(char-	procedure)
(csv7:record-field-mutable?	#f)
(textual-port-input-buffer	procedure)
(char?	procedure)
(custom-port-buffer-size	thread-param)
(fxfirst-bit-set	procedure)
(pariah	syntax)
(make-variable-transformer	procedure)
(alias	syntax)
(date?	procedure)
(set-binary-port-input-index!	procedure)
(parent	syntax)
(delete-file	procedure)
(ftype-ref	syntax)
(real-part	procedure)
(hashtable-entries	procedure)
(put-datum	procedure)
(path-absolute?	procedure)
(debug	procedure)
(logxor	procedure)
(bytevector-u32-native-set!	procedure)
(angle	procedure)
(open-source-file	procedure)
(r6rs:file-exists?	#f)
(vector->immutable-vector	procedure)
(define-structure	syntax)
(delay	syntax)
(flnonpositive?	procedure)
(fxarithmetic-shift	procedure)
(bytevector->uint-list	procedure)
(datum	syntax)
(fxvector->list	procedure)
(enable-interrupts	procedure)
(chmod	procedure)
(console-output-port	global-param)
(library-extensions	thread-param)
(call-with-current-continuation	procedure)
(mutex-acquire	procedure)
(bytevector->s8-list	procedure)
(put-char	procedure)
(real->flonum	procedure)
(module	syntax)
(source-condition?	procedure)
(fx<=?	procedure)
(modulo	procedure)
(atanh	procedure)
(immutable-bytevector?	procedure)
(source-directories	global-param)
(real-time	procedure)
(profile-dump-data	procedure)
(fx>=?	procedure)
(collect	procedure)
(ephemeron-cons	procedure)
(call-with-port	procedure)
(break	procedure)
(display	procedure)
(port-has-port-length?	procedure)
(make-no-nans-violation	procedure)
(apply	procedure)
(asinh	procedure)
(let-syntax	syntax)
(csv7:record-type-symbol	#f)
(time-utc->date	procedure)
(directory-separator	procedure)
(atom?	procedure)
(make-record-type	procedure)
(symbol-hashtable-set!	procedure)
(compile-whole-library	procedure)
(cons*	procedure)
(get-bytevector-some!	procedure)
(date-nanosecond	procedure)
(bitwise-bit-set?	procedure)
(rational-valued?	procedure)
(string-copy!	procedure)
(r5rs-syntax	module)
(string-fill!	procedure)
(assoc	procedure)
(with-implicit	syntax)
(top-level-mutable?	procedure)
(source-object-bfp	procedure)
(quasisyntax	syntax)
(flabs	procedure)
(string-length	procedure)
(bytevector-s32-native-ref	procedure)
(sstats-gc-real	procedure)
(ratnum?	procedure)
(char-downcase	procedure)
(iconv-codec	procedure)
(char-upper-case?	procedure)
(input-port-ready?	procedure)
(source-object-efp	procedure)
(-	procedure)
(interaction-environment	thread-param)
(sstats-print	procedure)
(random	procedure)
(gensym->unique-string	procedure)
(fldiv	procedure)
(flcos	procedure)
(bytevector-length	procedure)
(input-port?	procedure)
(<=	procedure)
(=>	syntax)
(>=	procedure)
(r6rs:standard-input-port	#f)
(subtract-duration!	procedure)
(object-counts	procedure)
(compile	procedure)
(flexp	procedure)
(current-memory-bytes	procedure)
(fxlogior	procedure)
(mark-port-closed!	procedure)
(flmax	procedure)
(string-ref	procedure)
(profile-dump-html	procedure)
(pretty-format	procedure)
(&continuation	syntax)
(flmin	procedure)
(fllog	procedure)
(source-object-sfd	procedure)
(flmod	procedure)
(identifier?	procedure)
(current-directory	global-param)
(pretty-maximum-lines	thread-param)
(profile-dump-list	procedure)
(gensym-count	thread-param)
(fxlognot	procedure)
(make-serious-condition	procedure)
(binary-port-output-buffer	procedure)
(fltan	procedure)
(floor	procedure)
(enable-cross-library-optimization	thread-param)
(make-custom-binary-input/output-port	procedure)
(syntax-object->datum	procedure)
(flsin	procedure)
(irritants-condition?	procedure)
(optimize-level	thread-param)
(library-search-handler	thread-param)
(i/o-file-already-exists-error?	procedure)
(even?	procedure)
(call-with-input-file	procedure)
(fxlogbit0	procedure)
(make-lexical-violation	procedure)
(fxlogbit1	procedure)
(fxvector-copy	procedure)
(annotation-options	procedure)
(force	procedure)
(cd	global-param)
(fxlogbit?	procedure)
(port-input-size	procedure)
(do	syntax)
(bitwise-bit-field	procedure)
(fxlogxor	procedure)
(if	syntax)
(exact	procedure)
(top-level-syntax	procedure)
(compile-to-file	procedure)
(bytevector-copy	procedure)
(error	procedure)
(substring	procedure)
(or	syntax)
(scheme	module)
(generate-procedure-source-information	thread-param)
(sealed	syntax)
(source-table-ref	procedure)
(record-accessor	procedure)
(copy-environment	procedure)
(opaque	syntax)
(list-head	procedure)
(default-record-equal-procedure	thread-param)
(fxabs	procedure)
(rename	syntax)
(bitwise-bit-count	procedure)
(open-file-input-port	procedure)
(make-i/o-file-is-read-only-error	procedure)
(list-copy	procedure)
(fxand	procedure)
(library-version	procedure)
(guard	syntax)
(bytevector-u48-set!	procedure)
(fxmodulo	procedure)
(cost-center?	procedure)
(fxdiv	procedure)
(remove!	procedure)
(open-string-output-port	procedure)
(implementation-restriction-violation?	procedure)
(port-has-set-port-position!?	procedure)
(debug-level	thread-param)
(flnumerator	procedure)
(register-signal-handler	procedure)
(fxior	procedure)
(fxmax	procedure)
(integer?	procedure)
(fxmin	procedure)
(initial-bytes-allocated	procedure)
(remove	procedure)
(fxmod	procedure)
(compile-library-handler	thread-param)
(define-property	syntax)
(make-i/o-filename-error	procedure)
(record-type-name	procedure)
(trace-output-port	thread-param)
(fxnot	procedure)
(fxvector-set!	procedure)
(remprop	procedure)
(record-hash-procedure	procedure)
(call-with-values	procedure)
(fxsll	procedure)
(fxsra	procedure)
(vector-sort!	procedure)
(fxsrl	procedure)
(merge	procedure)
(utf-8-codec	procedure)
(command-line-arguments	global-param)
(make-vector	procedure)
(list*	procedure)
(read-token	procedure)
(bwp-object?	procedure)
(fxxor	procedure)
(list?	procedure)
(visit-compiled-from-port	procedure)
(div0-and-mod0	procedure)
(pair?	procedure)
(mkdir	procedure)
(set-time-second!	procedure)
(collect-notify	global-param)
(self-evaluating-vectors	thread-param)
(mutex?	procedure)
(bytevector-u56-set!	procedure)
(remove-foreign-entry	procedure)
(library-exports	procedure)
(ieee-environment	procedure)
(eol-style	syntax)
(compile-to-port	procedure)
(block-read	procedure)
(isqrt	procedure)
(syntax-violation	procedure)
(list-tail	procedure)
(set-sstats-bytes!	procedure)
(environment?	procedure)
(transcoded-port	procedure)
(logor	procedure)
(undefined-violation?	procedure)
(ftype-guardian	syntax)
(prefix	syntax)
(bitwise-rotate-bit-field	procedure)
(binary-port-input-buffer	procedure)
(make-thread-parameter	procedure)
(mutable	syntax)
(fxlogtest	procedure)
(r6rs:with-output-to-file	#f)
(source-table?	procedure)
(mutable-bytevector?	procedure)
(eof-object	procedure)
(finite?	procedure)
(bytevector-u64-native-set!	procedure)
(real?	procedure)
(list-sort	procedure)
(bytevector-u8-set!	procedure)
(profile-query-weight	procedure)
(foreign-callable	syntax)
(bytevector-ieee-single-set!	procedure)
(raise	procedure)
(eq-hashtable-ref	procedure)
(trace-let	syntax)
(put-u8	procedure)
(subset-mode	thread-param)
(for-all	procedure)
(date-year-day	procedure)
(time-second	procedure)
(bytevector-u64-set!	procedure)
(gensym?	procedure)
(make-custom-textual-input/output-port	procedure)
(remq!	procedure)
(new-cafe	procedure)
(make-ephemeron-eq-hashtable	procedure)
(enum-set-indexer	procedure)
(remv!	procedure)
(scheme-version	procedure)
(printf	procedure)
(char-foldcase	procedure)
(load-library	procedure)
(make-i/o-encoding-error	procedure)
(i/o-error-filename	procedure)
(reverse	procedure)
(magnitude	procedure)
(number?	procedure)
(condition-name	procedure)
(compile-imported-libraries	thread-param)
(procedure-arity-mask	procedure)
(flfloor	procedure)
(reset	procedure)
(time<?	procedure)
(enum-set-union	procedure)
(time=?	procedure)
(time>?	procedure)
(null?	procedure)
(fresh-line	procedure)
(set-port-input-index!	procedure)
(ormap	procedure)
(fleven?	procedure)
(guardian?	procedure)
(current-exception-state	thread-param)
(revisit	procedure)
(fxdiv0-and-mod0	procedure)
(eval-when	syntax)
(&implementation-restriction	syntax)
(port?	procedure)
(with-input-from-string	procedure)
(bytevector->immutable-bytevector	procedure)
(threaded?	procedure)
(r6rs:hashtable-entries	#f)
(rational?	procedure)
(values	procedure)
(hashtable-ephemeron?	procedure)
(with-output-to-string	procedure)
(make-i/o-write-error	procedure)
(i/o-file-is-read-only-error?	procedure)
(sleep	procedure)
(time?	procedure)
(bound-identifier=?	procedure)
(utf-16le-codec	procedure)
(sc-expand	procedure)
(foreign-sizeof	procedure)
(source-file-descriptor-path	procedure)
(condition-wait	procedure)
(vector	procedure)
(time-difference	procedure)
(char->integer	procedure)
(integer-valued?	procedure)
(engine-block	procedure)
(bitwise-and	procedure)
(infinite?	procedure)
(ftype-pointer=?	syntax)
(make-sstats	procedure)
(cp0-effort-limit	thread-param)
(getprop	procedure)
(char-titlecase	procedure)
(compress-level	thread-param)
(waiter-prompt-and-read	thread-param)
(round	procedure)
(utf32->string	procedure)
(date-and-time	procedure)
(sort!	procedure)
(bytevector->u8-list	procedure)
(drop-prefix	syntax)
(trace	syntax)
(record-constructor-descriptor?	procedure)
(syntax-violation-form	procedure)
(vector-cas!	procedure)
(get-char	procedure)
(quote	syntax)
(cpu-time	procedure)
(port-nonblocking?	procedure)
(make-string	procedure)
(bitwise-ior	procedure)
(record-field-mutable?	procedure)
(unbox	procedure)
(eq-hashtable-ephemeron?	procedure)
(commonization-level	thread-param)
(date-dst?	procedure)
(eval-syntax-expanders-when	thread-param)
(putenv	procedure)
(subst	procedure)
(enum-set=?	procedure)
(bitwise-not	procedure)
(string-truncate!	procedure)
(r6rs:delete-file	#f)
(verify-loadability	procedure)
(textual-port-input-size	procedure)
(condition	procedure)
(textual-port-output-size	procedure)
(make-syntax-violation	procedure)
(visit	procedure)
(type-descriptor	syntax)
(hash-table?	procedure)
(generate-instruction-counts	thread-param)
(constructor	syntax)
(flnegative?	procedure)
(make-ephemeron-eqv-hashtable	procedure)
(get-string-some!	procedure)
(string-for-each	procedure)
(bitwise-xor	procedure)
(fold-right	procedure)
(date-hour	procedure)
(make-input-port	procedure)
(condition-accessor	procedure)
(string-ci<?	procedure)
(string-ci=?	procedure)
(string-ci>?	procedure)
(record-type-hash-procedure	procedure)
(i/o-filename-error?	procedure)
(vector-copy	procedure)
(format-condition?	procedure)
(i/o-write-error?	procedure)
(fxquotient	procedure)
(boolean?	procedure)
(bytevector-s16-set!	procedure)
(enum-set-projection	procedure)
(default-prompt-and-read	procedure)
(bytevector-s16-native-set!	procedure)
(pretty-initial-indent	thread-param)
(immutable-vector?	procedure)
(zero?	procedure)
(get-line	procedure)
(ftype-pointer?	syntax)
(bitwise-copy-bit	procedure)
(transcript-cafe	procedure)
(standard-input-port	procedure)
(list->vector	procedure)
(fxarithmetic-shift-right	procedure)
(source-object?	procedure)
(get-mode	procedure)
(case-lambda	syntax)
(&i/o-decoding	syntax)
(make-source-table	procedure)
(print-precision	thread-param)
(write	procedure)
(subst!	procedure)
(sstats-real	procedure)
(bytevector-ieee-single-native-ref	procedure)
(csv7:record-field-accessible?	#f)
(command-line	global-param)
(record-type-uid	procedure)
(enum-set-subset?	procedure)
(make-undefined-violation	procedure)
(greatest-fixnum	procedure)
(r6rs:record?	#f)
(fxvector	procedure)
(set-binary-port-input-size!	procedure)
(fixnum?	procedure)
(flonum?	procedure)
(bytevector-uncompress	procedure)
(substq	procedure)
(flush-output-port	procedure)
(substv	procedure)
(string-copy	procedure)
(file-regular?	procedure)
(string-hash	procedure)
(latin-1-codec	procedure)
(bytevector-s24-set!	procedure)
(date-year	procedure)
(vector-set!	procedure)
(compile-time-value?	procedure)
(unless	syntax)
(source-table-cell	procedure)
(flfinite?	procedure)
(directory-list	procedure)
(port-output-buffer	procedure)
(cfl-conjugate	procedure)
(fltruncate	procedure)
(transcript-off	procedure)
(make-who-condition	procedure)
(r6rs:utf-16-codec	#f)
(concatenate-object-files	procedure)
(print-extended-identifiers	thread-param)
(positive?	procedure)
(file-change-time	procedure)
(hashtable-update!	procedure)
(process	procedure)
(&violation	syntax)
(sstats-gc-cpu	procedure)
(make-weak-eq-hashtable	procedure)
(random-seed	thread-param)
(string<?	procedure)
(string=?	procedure)
(vector-sort	procedure)
(time<=?	procedure)
(string>?	procedure)
(fxvector->immutable-fxvector	procedure)
(set-sstats-gc-real!	procedure)
(compile-script	procedure)
(time>=?	procedure)
(make-continuation-condition	procedure)
(string	procedure)
(locate-source-object-source	procedure)
(condition-continuation	procedure)
(syntax->datum	procedure)
(record-mutator	procedure)
(cost-center-instruction-count	procedure)
(source-table-dump	procedure)
(revisit-compiled-from-port	procedure)
(profile	syntax)
(r6rs:case	#f)
(char-ready?	procedure)
(put-bytevector	procedure)
(make-i/o-decoding-error	procedure)
(bytevector-s32-set!	procedure)
(top-level-syntax?	procedure)
(make-custom-binary-input-port	procedure)
(string-set!	procedure)
(fx*/carry	procedure)
(syntax-error	procedure)
(exit-handler	thread-param)
(fldenominator	procedure)
(current-locate-source-object-source	thread-param)
(gensym-prefix	thread-param)
(flround	procedure)
(environment-symbols	procedure)
(enum-set-member?	procedure)
(i/o-read-error?	procedure)
(maximum-memory-bytes	procedure)
(fluid-let	syntax)
(make-boot-header	procedure)
(letrec-syntax	syntax)
(textual-port-output-count	procedure)
(r6rs:standard-output-port	#f)
(generate-covin-files	thread-param)
(record-rtd	procedure)
(scheme-start	global-param)
(cfl-magnitude-squared	procedure)
(source-object-line	procedure)
(set-time-nanosecond!	procedure)
(default-record-hash-procedure	thread-param)
(profile-clear	procedure)
(binary-port-input-count	procedure)
(set-binary-port-output-size!	procedure)
(unquote-splicing	syntax)
(bitwise-copy-bit-field	procedure)
(set-sstats-cpu!	procedure)
(&i/o-encoding	syntax)
(r6rs:eval	#f)
(source-table-set!	procedure)
(syntax-case	syntax)
(make-non-continuable-violation	procedure)
(port-has-set-port-nonblocking!?	procedure)
(set-timer	procedure)
(fxnonnegative?	procedure)
(csv7:record-type-field-decls	#f)
(fasl-compressed	thread-param)
(r6rs:exit	#f)
(bytevector-u16-native-ref	procedure)
(import-only	syntax)
(bytevector-s40-set!	procedure)
(with-output-to-file	procedure)
(truncate-file	procedure)
(open-input-string	procedure)
(load-shared-object	procedure)
(&i/o-filename	syntax)
(base-exception-handler	thread-param)
(file-buffer-size	thread-param)
(ftype-lock!	syntax)
(source-table-size	procedure)
(console-error-port	thread-param)
(file-options	syntax)
(dynamic-wind	procedure)
(port-has-port-position?	procedure)
(bitwise-reverse-bit-field	procedure)
(symbol-hashtable-contains?	procedure)
(hashtable-cell	procedure)
(syntax	syntax)
(remainder	procedure)
(hashtable-values	procedure)
(fixnum-width	procedure)
(flzero?	procedure)
(&i/o-invalid-position	syntax)
(source-condition-form	procedure)
(textual-port-output-index	procedure)
(list->string	procedure)
(open-output-file	procedure)
(immutable-fxvector?	procedure)
(condition-who	procedure)
(record-type-parent	procedure)
(binary-port-input-index	procedure)
(meta-cond	syntax)
(ftype-locked-decr!	syntax)
(hashtable-copy	procedure)
(make-eq-hashtable	procedure)
(run-cp0	thread-param)
(open-bytevector-input-port	procedure)
(protocol	syntax)
(system	procedure)
(bytevector-sint-ref	procedure)
(i/o-file-protection-error?	procedure)
(flonum->fixnum	procedure)
(fixnum->flonum	procedure)
(syntax->annotation	procedure)
(number->string	procedure)
(thread?	procedure)
(with-syntax	syntax)
(r6rs:string-ci<=?	#f)
(uint-list->bytevector	procedure)
(record-type-descriptor	procedure)
(r6rs:string-ci>=?	#f)
(enable-object-counts	global-param)
(hashtable-keys	procedure)
(transcript-on	procedure)
(condition?	procedure)
(bitwise-if	procedure)
(simple-conditions	procedure)
(collect-generation-radix	global-param)
(transcoder?	procedure)
(truncate-port	procedure)
(symbol-hashtable?	procedure)
(put-string	procedure)
(vector?	procedure)
(sstats-cpu	procedure)
(set-port-bol!	procedure)
(make-fxvector	procedure)
(maybe-compile-program	procedure)
(bytevector-sint-set!	procedure)
(trace-define-syntax	syntax)
(profile-clear-database	procedure)
(date-minute	procedure)
(foreign-free	procedure)
(hashtable-set!	procedure)
(vector-map	procedure)
(string-upcase	procedure)
(enumerate	procedure)
(r6rs:number->string	#f)
(fx+/carry	procedure)
(set-port-eof!	procedure)
(make-record-type-descriptor	procedure)
(make-custom-textual-output-port	procedure)
(vector-ref	procedure)
(waiter-prompt-string	thread-param)
(open-file-output-port	procedure)
(interpret	procedure)
(fprintf	procedure)
(standard-output-port	procedure)
(r6rs:hashtable-keys	#f)
(continuation-condition?	procedure)
(i/o-encoding-error?	procedure)
(set-car!	procedure)
(generate-temporaries	procedure)
(hashtable-size	procedure)
(make-output-port	procedure)
(set-cdr!	procedure)
(fxvector-fill!	procedure)
(set-port-name!	procedure)
(path-first	procedure)
(list-ref	procedure)
(compile-time-value-value	procedure)
(add-prefix	syntax)
(library-requirements	procedure)
(hashtable-ref	procedure)
(suppress-greeting	global-param)
(close-input-port	procedure)
(profile-load-data	procedure)
(environment-mutable?	procedure)
(foreign-set!	procedure)
(print-brackets	thread-param)
(&serious	syntax)
(&format	syntax)
(make-eqv-hashtable	procedure)
(apropos-list	procedure)
(set-box!	procedure)
(set-port-length!	procedure)
(message-condition?	procedure)
(denominator	procedure)
(magnitude-squared	procedure)
(csv7:record-type-field-names	#f)
(date->time-utc	procedure)
(thread-condition?	procedure)
(make-source-condition	procedure)
(enum-set-intersection	procedure)
(symbol-hashtable-ref	procedure)
(list->fxvector	procedure)
(bitwise-arithmetic-shift-left	procedure)
(bytevector->sint-list	procedure)
(set-sstats-real!	procedure)
(copy-time	procedure)
(put-source-table	procedure)
(syntax-rules	syntax)
(non-continuable-violation?	procedure)
(date-day	procedure)
(port-input-buffer	procedure)
(bytevector-s64-native-ref	procedure)
(ftype-locked-incr!	syntax)
(r6rs:flush-output-port	#f)
(set-port-position!	procedure)
(annotation-source	procedure)
(directory-separator?	procedure)
(invoke-library	procedure)
(syntax-violation?	procedure)
(call-with-output-file	procedure)
(extend-syntax	syntax)
(r6rs:string-ci<?	#f)
(r6rs:string-ci=?	#f)
(r6rs:string-ci>?	#f)
(binary-port-output-count	procedure)
(eq-hashtable?	procedure)
(r6rs:open-input-file	#f)
(fasl-strip-options	syntax)
(current-transcoder	thread-param)
(virtual-register-count	procedure)
(port-closed?	procedure)
(bitwise-length	procedure)
(import-notify	thread-param)
(delete-directory	procedure)
(date-month	procedure)
(nonpositive?	procedure)
(display-string	procedure)
(assertion-violation	procedure)
(ftype-unlock!	syntax)
(print-graph	thread-param)
(&condition	syntax)
(define-top-level-syntax	procedure)
(with-cost-center	procedure)
(bytes-deallocated	procedure)
(make-compile-time-value	procedure)
(textual-port-output-buffer	procedure)
(eq-hashtable-cell	procedure)
(flnonnegative?	procedure)
(make-bytevector	procedure)
(make-implementation-restriction-violation	procedure)
(immutable-box?	procedure)
(fxdiv-and-mod	procedure)
(r6rs:fx*	#f)
(r6rs:fx+	#f)
(r6rs:fx-	#f)
(bytevector=?	procedure)
(lock-object	procedure)
(source-file-descriptor	procedure)
(decode-float	procedure)
(fxreverse-bit-field	procedure)
(output-port?	procedure)
(conjugate	procedure)
(include	syntax)
(parent-rtd	syntax)
(mutable-vector?	procedure)
(native-endianness	procedure)
(compile-profile	thread-param)
(port-input-count	procedure)
(exact-integer-sqrt	procedure)
(warning	procedure)
(scheme-version-number	procedure)
(file-length	procedure)
(foreign-procedure	syntax)
(expand/optimize	procedure)
(set-port-output-size!	procedure)
(binary-port-output-index	procedure)
(print-level	thread-param)
(date-second	procedure)
(textual-port?	procedure)
(cp0-score-limit	thread-param)
(file-directory?	procedure)
(putprop	procedure)
(ftype-pointer-address	procedure)
(compile-program	procedure)
(clear-input-port	procedure)
(&assertion	syntax)
(set-textual-port-input-index!	procedure)
(compile-interpret-simple	thread-param)
(hashtable-cells	procedure)
(collect-maximum-generation	global-param)
(string-downcase	procedure)
(make-source-file-descriptor	procedure)
(bytevector-u32-native-ref	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-error-port	procedure)
(port-input-empty?	procedure)
(mutex-release	procedure)
(make-format-condition	procedure)
(r6rs:string<?	#f)
(r6rs:string=?	#f)
(r6rs:string>?	#f)
(generate-profile-forms	thread-param)
(condition-signal	procedure)
(top-level-bound?	procedure)
(bitwise-arithmetic-shift	procedure)
(get-bytevector-n	procedure)
(pretty-file	procedure)
(mutable-box?	procedure)
(r6rs:current-output-port	#f)
(source-file-descriptor-checksum	procedure)
(define-condition-type	syntax)
(truncate	procedure)
(char-upcase	procedure)
(locate-source	procedure)
(transcoder-error-handling-mode	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-annotation	procedure)
(eq-hashtable-set!	procedure)
(port-input-index	procedure)
(ftype-sizeof	syntax)
(inexact	procedure)
(get-string-n!	procedure)
(print-radix	thread-param)
(path-parent	procedure)
(fldiv-and-mod	procedure)
(csv7:record-field-mutator	#f)
(bytevector-truncate!	procedure)
(profile-release-counters	procedure)
(unsyntax	syntax)
(indirect-export	syntax)
(char-lower-case?	procedure)
(*	Category)
(+	procedure)
(/	procedure)
(port-transcoder	procedure)
(<	procedure)
(=	procedure)
(>	procedure)
(port-has-set-port-length!?	procedure)
(complex?	procedure)
(file-modification-time	procedure)
(port-handler	procedure)
(make-no-infinities-violation	procedure)
(open-input-file	procedure)
(_	syntax)
(ftype-&ref	syntax)
(r6rs:current-error-port	#f)
(fork-thread	procedure)
(symbol=?	procedure)
(expand/optimize-output	thread-param)
(eof-object?	procedure)
(sint-list->bytevector	procedure)
(utf-16be-codec	procedure)
(immutable-string?	procedure)
(char-alphabetic?	procedure)
(r6rs:open-output-file	#f)
(fxeven?	procedure)
(get-bytevector-n!	procedure)
(file-port?	procedure)
(print-gensym	thread-param)
(default-library-search-handler	procedure)
(string-normalize-nfkc	procedure)
(string-normalize-nfkd	procedure)
(sstats-gc-count	procedure)
(reset-handler	thread-param)
(char-ci<=?	procedure)
(eq-hashtable-update!	procedure)
(box-immutable	procedure)
(char-ci>=?	procedure)
(current-make-source-object	thread-param)
(bytevector-u16-native-set!	procedure)
(hashtable-delete!	procedure)
(eq-hashtable-contains?	procedure)
(set-binary-port-input-buffer!	procedure)
(ftype-pointer-ftype	procedure)
(buffer-mode	syntax)
(bytevector-ieee-single-ref	procedure)
(set-binary-port-output-index!	procedure)
(profile-dump	procedure)
(put-bytevector-some	procedure)
(open-fd-output-port	procedure)
(make-record-constructor-descriptor	procedure)
(predicate	syntax)
(scheme-script	global-param)
(native-eol-style	procedure)
(unget-char	procedure)
(free-identifier=?	procedure)
(current-error-port	thread-param)
(bytevector-ieee-single-native-set!	procedure)
(get-source-table!	procedure)
(least-fixnum	procedure)
(condition-broadcast	procedure)
(inspect/object	procedure)
(sstats-gc-bytes	procedure)
(no-nans-violation?	procedure)
(call/cc	procedure)
(utf8->string	procedure)
(get-datum	procedure)
(call-with-string-output-port	procedure)
(library-requirements-options	syntax)
(make-error	procedure)
(csv7:record-type-name	#f)
(caaaar	procedure)
(set-port-input-size!	procedure)
(bytevector-s48-set!	procedure)
(record-constructor-descriptor	syntax)
(caaadr	procedure)
(fx-/carry	procedure)
(fxpositive?	procedure)
(syntax->vector	procedure)
(with-profile-tracker	procedure)
(fxcopy-bit-field	procedure)
(caadar	procedure)
(define-ftype	syntax)
(caaddr	procedure)
(debug-on-exception	global-param)
(substq!	procedure)
(record-type-generative?	procedure)
(substv!	procedure)
(set-textual-port-input-buffer!	procedure)
(compute-size	procedure)
(cadaar	procedure)
(cadadr	procedure)
(define-record	syntax)
(set-textual-port-output-index!	procedure)
(time-type	procedure)
(caddar	procedure)
(cadddr	procedure)
(mutex-name	procedure)
(string->number	procedure)
(&no-nans	syntax)
(library	syntax)
(machine-type	procedure)
(add-duration!	procedure)
(symbol->string	procedure)
(get-bytevector-some	procedure)
(fldiv0-and-mod0	procedure)
(vector->list	procedure)
(port-length	procedure)
(string->immutable-string	procedure)
(fxlogor	procedure)
(lookahead-u8	procedure)
(set-port-output-buffer!	procedure)
(library-object-filename	procedure)
(file-access-time	procedure)
(record-type-sealed?	procedure)
(define-enumeration	syntax)
(numerator	procedure)
(annotation-option-set	syntax)
(block-write	procedure)
(get-string-n	procedure)
(cdaaar	procedure)
(string-foldcase	procedure)
(unlock-object	procedure)
(bytevector-s56-set!	procedure)
(make-date	procedure)
(cdaadr	procedure)
(record-type-opaque?	procedure)
(cdadar	procedure)
(cdaddr	procedure)
(get-process-id	procedure)
(record-predicate	procedure)
(&irritants	syntax)
(cddaar	procedure)
(&i/o	syntax)
(ftype-pointer-null?	syntax)
(cddadr	procedure)
(r6rs:string->number	#f)
(cdddar	procedure)
(csv7:record-type-descriptor	#f)
(cddddr	procedure)
(utf16->string	procedure)
(file-exists?	procedure)
(r6rs:standard-error-port	#f)
(set-textual-port-output-buffer!	procedure)
(make-cost-center	procedure)
(bytevector-copy!	procedure)
(bytevector-fill!	procedure)
(maybe-compile-file	procedure)
(cfl-imag-part	procedure)
(bytevector-s8-ref	procedure)
(foreign-callable-code-object	procedure)
(close-output-port	procedure)
(add-duration	procedure)
(compile-file	procedure)
(div-and-mod	procedure)
(enum-set-difference	procedure)
(set-sstats-gc-cpu!	procedure)
(quasiquote	syntax)
(make-hash-table	procedure)
(inspect	procedure)
(enum-set->list	procedure)
(bytevector-s64-set!	procedure)
(literal-identifier=?	procedure)
(get-string-some	procedure)
(fxremainder	procedure)
(environment	procedure)
(boolean=?	procedure)
(release-minimum-generation	global-param)
(set-textual-port-input-size!	procedure)
(letrec*	syntax)
(make-i/o-read-error	procedure)
(r6rs:string<=?	#f)
(rename-file	procedure)
(make-list	procedure)
(vector-set-fixnum!	procedure)
(symbol-hash	procedure)
(make-i/o-file-protection-error	procedure)
(&i/o-file-already-exists	syntax)
(char<?	procedure)
(char=?	procedure)
(char>?	procedure)
(r6rs:string>=?	#f)
(sstats?	procedure)
(record-reader	procedure)
(record-equal-procedure	procedure)
(abort-handler	thread-param)
(bytevector-s16-ref	procedure)
(r6rs:<	#f)
(r6rs:=	#f)
(s8-list->bytevector	procedure)
(r6rs:>	#f)
(lookahead-char	procedure)
(require-nongenerative-clause	thread-param)
(i/o-error-position	procedure)
(&who	syntax)
(weak-pair?	procedure)
(reset-cost-center!	procedure)
(generate-wpo-files	thread-param)
(&undefined	syntax)
(bytevector-s24-ref	procedure)
(ephemeron-pair?	procedure)
(fl-make-rectangular	procedure)
(make-polar	procedure)
(fxarithmetic-shift-left	procedure)
(generate-interrupt-trap	thread-param)
(make-mutex	procedure)
(&i/o-file-is-read-only	syntax)
(&warning	syntax)
(assertion-violation?	procedure)
(fxbit-set?	procedure)
(make-time	procedure)
(integer-length	procedure)
(r6rs:with-input-from-file	#f)
(andmap	procedure)
(make-message-condition	procedure)
(call-with-bytevector-output-port	procedure)
(assertion-violationf	procedure)
(maybe-compile-library	procedure)
(bytevector-s32-ref	procedure)
(string?	procedure)
(hashtable-weak?	procedure)
(define	syntax)
(compile-port	procedure)
(make-violation	procedure)
(serious-condition?	procedure)
(debug-condition	thread-param)
(trace-print	thread-param)
(print-length	thread-param)
(sstats-difference	procedure)
(bytevector-s40-ref	procedure)
(date-week-day	procedure)
($primitive	syntax)
(print-char-name	thread-param)
(char-general-category	procedure)
(make-transcoder	procedure)
(&no-infinities	syntax)
(fxrotate-bit-field	procedure)
(r6rs:command-line	#f)
(eq-hashtable-weak?	procedure)
(bytes-allocated	procedure)
(set-time-type!	procedure)
(string->list	procedure)
(char<=?	procedure)
(bytevector-u8-ref	procedure)
(generate-allocation-counts	thread-param)
(char>=?	procedure)
(...	syntax)
(make-weak-eqv-hashtable	procedure)
(current-output-port	thread-param)
(lexical-violation?	procedure)
(record-type-descriptor?	procedure)
(with-interrupts-disabled	syntax)
(with-mutex	syntax)
(define-values	syntax)
(get-output-string	procedure)
(char-whitespace?	procedure)
(get-hash-table	procedure)
(integer->char	procedure)
(ftype-pointer->sexpr	procedure)
(string-titlecase	procedure)
(make-hashtable	procedure)
(waiter-write	thread-param)
(r6rs:<=	#f)
(r6rs:>=	#f)
(source-table-contains?	procedure)
(fxzero?	procedure)
(most-positive-fixnum	procedure)
(enum-set-constructor	procedure)
(native-transcoder	procedure)
(untrace	syntax)
(cflonum?	procedure)
(nongenerative	syntax)
(get-string-all	procedure)
(unquote	syntax)
(fxvector?	procedure)
(fasl-write	procedure)
(compute-composition	procedure)
(peek-char	procedure)
(scheme-report-environment	procedure)
(make-engine	procedure)
(string->utf8	procedure)
(make-warning	procedure)
(port-file-compressed!	procedure)
(append	procedure)
(statistics	procedure)
(partition	procedure)
(with-exception-handler	procedure)
(negative?	procedure)
(flinfinite?	procedure)
(r6rs:record-constructor	#f)
(annotation-expression	procedure)
(ceiling	procedure)
(bytevector->string	procedure)
(foreign-ref	procedure)
(hash-table-map	procedure)
(make-rectangular	procedure)
(bytevector-s32-native-set!	procedure)
(heap-reserve-ratio	global-param)
(make-enumeration	procedure)
(profile-palette	thread-param)
(warning?	procedure)
(open-string-input-port	procedure)
($system	module)
(get-u8	procedure)
(warningf	procedure)
(exclusive-cond	syntax)
(port-output-count	procedure)
(load-compiled-from-port	procedure)
(most-negative-fixnum	procedure)
(hashtable-mutable?	procedure)
(print-unicode	thread-param)
(get-bytevector-all	procedure)
(identifier-syntax	syntax)
(&i/o-file-protection	syntax)
(bytevector?	procedure)
(read-char	procedure)
(symbol?	procedure)
(reset-maximum-memory-bytes!	procedure)
(bytevector-ieee-double-native-ref	procedure)
(equal-hash	procedure)
(with-input-from-file	procedure)
(bignum?	procedure)
(trace-do	syntax)
(i/o-port-error?	procedure)
(exact->inexact	procedure)
(bytevector-s48-ref	procedure)
(record-constructor	procedure))))
(define chezscheme (private-process '(chezscheme) '(
(symbol-hashtable-update!	procedure)
(r6rs:dynamic-wind	#f)
(trace-define	syntax)
(+	procedure)
(-	procedure)
; (1+	procedure)
(mutable-string?	procedure)
(assert	syntax)
(textual-port-input-count	procedure)
(property-list	procedure)
(make-parameter	procedure)
(compile-library	procedure)
(logbit0	procedure)
(logbit1	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(pretty-line-length	thread-param)
(bytevector-s56-ref	procedure)
(make-custom-binary-output-port	procedure)
(logbit?	procedure)
(virtual-register	procedure)
(ftype-set!	syntax)
(fields	syntax)
(make-ftype-pointer	syntax)
(make-source-object	procedure)
(port-output-full?	procedure)
(abs	procedure)
(break-handler	thread-param)
(fl*	procedure)
(library-directories	thread-param)
(fl+	procedure)
(set-binary-port-output-buffer!	procedure)
(fl-	procedure)
(fl/	procedure)
(port-output-index	procedure)
(car	procedure)
(fl<	procedure)
(fl=	procedure)
(and	syntax)
(fl>	procedure)
(cdr	procedure)
(profile-line-number-color	thread-param)
(eq?	procedure)
(bytevector-s64-ref	procedure)
(fx*	procedure)
(fx+	procedure)
(ash	procedure)
(make-assertion-violation	procedure)
(fx-	procedure)
(gcd	procedure)
(fx/	procedure)
(div	procedure)
(box	procedure)
(record-type-field-names	procedure)
(flacos	procedure)
(fx<	procedure)
(fx=	procedure)
(cos	procedure)
(fx>	procedure)
(string->symbol	procedure)
(compile-whole-program	procedure)
(bytevector-u16-set!	procedure)
(for-each	procedure)
(lcm	procedure)
(exp	procedure)
(map	procedure)
(let	syntax)
(max	procedure)
(disable-interrupts	procedure)
(min	procedure)
(make-i/o-port-error	procedure)
(log	procedure)
(bytevector-compress	procedure)
(string<=?	procedure)
(mod	procedure)
(fldiv0	procedure)
(expt-mod	procedure)
(string>=?	procedure)
(rec	syntax)
(not	procedure)
(flatan	procedure)
(tan	procedure)
(critical-section	syntax)
(vector-length	procedure)
(close-port	procedure)
(set-textual-port-output-size!	procedure)
(flasin	procedure)
(binary-port-output-size	procedure)
(sin	procedure)
(make-object-finder	procedure)
(engine-return	procedure)
(current-expand	thread-param)
(console-input-port	global-param)
(textual-port-input-index	procedure)
(port-bol?	procedure)
(&i/o-write	syntax)
(filter	procedure)
(datum->syntax	procedure)
(no-infinities-violation?	procedure)
(vector-for-each	procedure)
(gensym	procedure)
(fxvector-ref	procedure)
(flpositive?	procedure)
(bytevector-ieee-double-ref	procedure)
(getenv	procedure)
(eq-hashtable-delete!	procedure)
(set-port-input-buffer!	procedure)
(standard-error-port	procedure)
(port-eof?	procedure)
(make-input/output-port	procedure)
(r6rs:char-ci<?	#f)
(set-port-output-index!	procedure)
(r6rs:char-ci=?	#f)
(r6rs:char-ci>?	#f)
(who-condition?	procedure)
(i/o-decoding-error?	procedure)
(make-i/o-invalid-position-error	procedure)
(bytevector-u24-set!	procedure)
(flnan?	procedure)
(add1	procedure)
(mutable-fxvector?	procedure)
(flexpt	procedure)
(flodd?	procedure)
(imag-part	procedure)
(reverse!	procedure)
(top-level-program	syntax)
(&source	syntax)
(flmod0	procedure)
(source-table-delete!	procedure)
(&i/o-file-does-not-exist	syntax)
(date-zone-offset	procedure)
(caar	procedure)
(foreign-callable-entry-point	procedure)
(cfl*	procedure)
(print-record	thread-param)
(cfl+	procedure)
(acos	procedure)
(bytevector-u16-ref	procedure)
(cadr	procedure)
(cfl-	procedure)
(cfl/	procedure)
(fold-left	procedure)
(compile-program-handler	thread-param)
(unsyntax-splicing	syntax)
(fl<=	procedure)
(open-process-ports	procedure)
(fl<?	procedure)
(fl=?	procedure)
(fl>=	procedure)
(fl>?	procedure)
(cfl=	procedure)
(port-name	procedure)
(cdar	procedure)
(output-port-buffer-mode	procedure)
(logtest	procedure)
(condition-irritants	procedure)
(cddr	procedure)
(case	syntax)
(display-condition	procedure)
(r5rs	module)
(foreign-entry?	procedure)
(fx1+	procedure)
(fx1-	procedure)
(csv7:record-field-accessor	#f)
(cfl-real-part	procedure)
(bytevector-u24-ref	procedure)
(&lexical	syntax)
(set-port-nonblocking!	procedure)
(div0	procedure)
(transcoder-eol-style	procedure)
(bitwise-first-bit-set	procedure)
(pretty-one-line-limit	thread-param)
(foreign-alloc	procedure)
(make-condition	procedure)
(atan	procedure)
(remove-hash-table!	procedure)
(inexact?	procedure)
(box?	procedure)
(fx<=	procedure)
(fx<?	procedure)
(asin	procedure)
(fx=?	procedure)
(fx>=	procedure)
(fx>?	procedure)
(bytevector-u32-set!	procedure)
(clear-output-port	procedure)
(newline	procedure)
(cond	syntax)
(assp	procedure)
(assq	procedure)
(cons	procedure)
(assv	procedure)
(bytevector-u32-ref	procedure)
(cosh	procedure)
(hashtable-clear!	procedure)
(keyboard-interrupt-handler	thread-param)
(find	procedure)
(enum-set?	procedure)
(string->utf16	procedure)
(string->utf32	procedure)
(string-append	procedure)
(else	syntax)
(fxvector-length	procedure)
(put-hash-table!	procedure)
(ieee	module)
(inexact->exact	procedure)
(define-syntax	syntax)
(i/o-file-does-not-exist-error?	procedure)
(eqv?	procedure)
(fllp	procedure)
(r6rs:syntax-rules	#f)
(get-datum/annotations	procedure)
(u8-list->bytevector	procedure)
(eval	procedure)
(flsqrt	procedure)
(equal?	procedure)
(flceiling	procedure)
(bytevector-u40-ref	procedure)
(print-vector-length	thread-param)
(let*	syntax)
(bytevector-s64-native-set!	procedure)
(cp0-outer-unroll-limit	thread-param)
(expression-editor	module)
(implicit-exports	syntax)
(nan?	procedure)
(error-handling-mode	syntax)
(exit	procedure)
(fxif	procedure)
(record-type-equal-procedure	procedure)
(r6rs:char-ci<=?	#f)
(expt	procedure)
(odd?	procedure)
(fxcopy-bit	procedure)
(port-has-port-nonblocking??	procedure)
(exact?	procedure)
(r6rs:char-ci>=?	#f)
(transcoder-codec	procedure)
(timer-interrupt-handler	thread-param)
(real-valued?	procedure)
(iota	procedure)
(top-level-value	procedure)
(mod0	procedure)
(memp	procedure)
(memq	procedure)
(memv	procedure)
(meta	syntax)
(hashtable-hash-function	procedure)
(syntax-violation-subform	procedure)
(get-thread-id	procedure)
(load	procedure)
(datum->syntax-object	procedure)
(list	procedure)
(format	procedure)
(bytevector-u40-set!	procedure)
(internal-defines-as-letrec*	thread-param)
(error?	procedure)
(bytevector-u64-native-ref	procedure)
(default-exception-handler	procedure)
(endianness	syntax)
(port-file-descriptor	procedure)
(utf-16-codec	procedure)
(read	procedure)
(except	syntax)
(errorf	procedure)
(set!	syntax)
(bitwise-arithmetic-shift-right	procedure)
(case-sensitive	thread-param)
(lambda	syntax)
(substring-fill!	procedure)
(quotient	procedure)
(enum-set-complement	procedure)
(violation?	procedure)
(annotation?	procedure)
(remp	procedure)
(remq	procedure)
(remv	procedure)
(only	syntax)
(make-guardian	procedure)
(tanh	procedure)
(undefined-variable-warnings	thread-param)
(box-cas!	procedure)
(&error	syntax)
(pretty-print	procedure)
(path-extension	procedure)
(buffer-mode?	syntax)
(procedure?	procedure)
(sinh	procedure)
(i/o-error?	procedure)
(bytevector	procedure)
(sub1	procedure)
(binary-port?	procedure)
(time	syntax)
(unregister-guardian	procedure)
(nonnegative?	procedure)
(flinteger?	procedure)
(set-top-level-value!	procedure)
(date-zone-name	procedure)
(foreign-entry	procedure)
(syntax->list	procedure)
(load-program	procedure)
(&syntax	syntax)
(let-values	syntax)
(fxnonpositive?	procedure)
(sort	procedure)
(when	syntax)
(port-position	procedure)
(bytevector-uint-ref	procedure)
(sqrt	procedure)
(pretty-standard-indent	thread-param)
(void	procedure)
(bytevector-s16-native-ref	procedure)
(scheme-environment	procedure)
(r6rs:char<?	#f)
(r6rs:char=?	#f)
(r6rs:char>?	#f)
(&message	syntax)
(fxdiv0	procedure)
(source-object-column	procedure)
(file-position	procedure)
(open-output-string	procedure)
(bytevector-ieee-double-set!	procedure)
(unget-u8	procedure)
(with-source-path	procedure)
(expand	procedure)
(exists	procedure)
(define-top-level-value	procedure)
(append!	procedure)
(collect-rendezvous	procedure)
(path-last	procedure)
(current-date	procedure)
(make-irritants-condition	procedure)
(define-record-type	syntax)
(char-numeric?	procedure)
(display-statistics	procedure)
(library-list	procedure)
(open-bytevector-output-port	procedure)
(string-normalize-nfc	procedure)
(string-normalize-nfd	procedure)
(export	syntax)
(file-symbolic-link?	procedure)
(fxodd?	procedure)
(bytevector-u48-ref	procedure)
(length	procedure)
(make-custom-textual-input-port	procedure)
(raise-continuable	procedure)
(fxmod0	procedure)
(annotation-stripped	procedure)
(current-eval	thread-param)
(fasl-file	procedure)
(set-sstats-gc-count!	procedure)
(import	syntax)
(path-rest	procedure)
(set-virtual-register!	procedure)
(put-string-some	procedure)
(parameterize	syntax)
(bytevector-u56-ref	procedure)
(ftype-init-lock!	syntax)
(cost-center-time	procedure)
(immutable	syntax)
(r6rs:char<=?	#f)
(r6rs:char>=?	#f)
(port-output-size	procedure)
(expand-output	thread-param)
(collect-trip-bytes	global-param)
(fxbit-field	procedure)
(member	procedure)
(path-root	procedure)
(call/1cc	procedure)
(unread-char	procedure)
(bytevector-u64-ref	procedure)
(char-ci<?	procedure)
(char-ci=?	procedure)
(char-ci>?	procedure)
(collect-request-handler	global-param)
(locked-object?	procedure)
(null-environment	procedure)
(cost-center-allocation-count	procedure)
(i/o-encoding-error-char	procedure)
(rationalize	procedure)
(create-exception-state	procedure)
(scheme-program	global-param)
(letrec	syntax)
(make-boot-file	procedure)
(sstats-bytes	procedure)
(fxbit-count	procedure)
(open-file-input/output-port	procedure)
(time-difference!	procedure)
(merge!	procedure)
(weak-cons	procedure)
(string-ci<=?	procedure)
(record-writer	procedure)
(binary-port-input-size	procedure)
(string-ci>=?	procedure)
(hashtable-contains?	procedure)
(trace-case-lambda	syntax)
(vector-fill!	procedure)
(trace-lambda	syntax)
(fasl-read	procedure)
(open-fd-input-port	procedure)
(r6rs:call-with-output-file	#f)
(strip-fasl-file	procedure)
(hashtable?	procedure)
(write-char	procedure)
(current-time	procedure)
(record-case	syntax)
(generate-inspector-information	thread-param)
(bytevector-s8-set!	procedure)
(fluid-let-syntax	syntax)
(apropos	procedure)
(petite?	procedure)
(interactive?	procedure)
(source-file-descriptor?	procedure)
(hashtable-equivalence-function	procedure)
(r6rs:current-input-port	#f)
(ftype-spin-lock!	syntax)
(let*-values	syntax)
(open-input-output-file	procedure)
(oblist	procedure)
(bytevector-uint-set!	procedure)
(open-fd-input/output-port	procedure)
(subtract-duration	procedure)
(hash-table-for-each	procedure)
(char-title-case?	procedure)
(set-sstats-gc-bytes!	procedure)
(last-pair	procedure)
(caaar	procedure)
(caadr	procedure)
(fxlength	procedure)
(&i/o-read	syntax)
(cadar	procedure)
(logand	procedure)
(caddr	procedure)
(collections	procedure)
(abort	procedure)
(r6rs:call-with-input-file	#f)
(condition-predicate	procedure)
(string-ci-hash	procedure)
(fl<=?	procedure)
(char-name	procedure)
(enum-set-universe	procedure)
(acosh	procedure)
(fl>=?	procedure)
(string->bytevector	procedure)
(cdaar	procedure)
(time-nanosecond	procedure)
(cdadr	procedure)
(symbol-hashtable-cell	procedure)
(&non-continuable	syntax)
(make-i/o-error	procedure)
(compress-format	thread-param)
(begin	syntax)
(cddar	procedure)
(fxnegative?	procedure)
(compile-file-message	thread-param)
(record?	procedure)
(cdddr	procedure)
(bytevector-ieee-double-native-set!	procedure)
(logior	procedure)
(&i/o-port	syntax)
(symbol-hashtable-delete!	procedure)
(foreign-address-name	procedure)
(current-input-port	thread-param)
(condition-message	procedure)
(lognot	procedure)
(char-	procedure)
(csv7:record-field-mutable?	#f)
(textual-port-input-buffer	procedure)
(char?	procedure)
(custom-port-buffer-size	thread-param)
(fxfirst-bit-set	procedure)
(pariah	syntax)
(make-variable-transformer	procedure)
(alias	syntax)
(date?	procedure)
(set-binary-port-input-index!	procedure)
(parent	syntax)
(delete-file	procedure)
(ftype-ref	syntax)
(real-part	procedure)
(hashtable-entries	procedure)
(put-datum	procedure)
(path-absolute?	procedure)
(debug	procedure)
(logxor	procedure)
(bytevector-u32-native-set!	procedure)
(angle	procedure)
(open-source-file	procedure)
(r6rs:file-exists?	#f)
(vector->immutable-vector	procedure)
(define-structure	syntax)
(delay	syntax)
(flnonpositive?	procedure)
(fxarithmetic-shift	procedure)
(bytevector->uint-list	procedure)
(datum	syntax)
(fxvector->list	procedure)
(enable-interrupts	procedure)
(chmod	procedure)
(console-output-port	global-param)
(library-extensions	thread-param)
(call-with-current-continuation	procedure)
(mutex-acquire	procedure)
(bytevector->s8-list	procedure)
(put-char	procedure)
(real->flonum	procedure)
(module	syntax)
(source-condition?	procedure)
(fx<=?	procedure)
(modulo	procedure)
(atanh	procedure)
(immutable-bytevector?	procedure)
(source-directories	global-param)
(real-time	procedure)
(profile-dump-data	procedure)
(fx>=?	procedure)
(collect	procedure)
(ephemeron-cons	procedure)
(call-with-port	procedure)
(break	procedure)
(display	procedure)
(port-has-port-length?	procedure)
(make-no-nans-violation	procedure)
(apply	procedure)
(asinh	procedure)
(let-syntax	syntax)
(csv7:record-type-symbol	#f)
(time-utc->date	procedure)
(directory-separator	procedure)
(atom?	procedure)
(make-record-type	procedure)
(symbol-hashtable-set!	procedure)
(compile-whole-library	procedure)
(cons*	procedure)
(get-bytevector-some!	procedure)
(date-nanosecond	procedure)
(bitwise-bit-set?	procedure)
(rational-valued?	procedure)
(string-copy!	procedure)
(r5rs-syntax	module)
(string-fill!	procedure)
(assoc	procedure)
(with-implicit	syntax)
(top-level-mutable?	procedure)
(source-object-bfp	procedure)
(quasisyntax	syntax)
(flabs	procedure)
(string-length	procedure)
(bytevector-s32-native-ref	procedure)
(sstats-gc-real	procedure)
(ratnum?	procedure)
(char-downcase	procedure)
(iconv-codec	procedure)
(char-upper-case?	procedure)
(input-port-ready?	procedure)
(source-object-efp	procedure)
(fxlogand	procedure)
(interaction-environment	thread-param)
(sstats-print	procedure)
(random	procedure)
(gensym->unique-string	procedure)
(fldiv	procedure)
(flcos	procedure)
(bytevector-length	procedure)
(input-port?	procedure)
(<=	procedure)
(=>	syntax)
(>=	procedure)
(r6rs:standard-input-port	#f)
(subtract-duration!	procedure)
(object-counts	procedure)
(compile	procedure)
(flexp	procedure)
(current-memory-bytes	procedure)
(fxlogior	procedure)
(mark-port-closed!	procedure)
(flmax	procedure)
(string-ref	procedure)
(profile-dump-html	procedure)
(pretty-format	procedure)
(&continuation	syntax)
(flmin	procedure)
(fllog	procedure)
(source-object-sfd	procedure)
(flmod	procedure)
(identifier?	procedure)
(current-directory	global-param)
(pretty-maximum-lines	thread-param)
(profile-dump-list	procedure)
(gensym-count	thread-param)
(fxlognot	procedure)
(make-serious-condition	procedure)
(binary-port-output-buffer	procedure)
(fltan	procedure)
(floor	procedure)
(enable-cross-library-optimization	thread-param)
(make-custom-binary-input/output-port	procedure)
(syntax-object->datum	procedure)
(flsin	procedure)
(irritants-condition?	procedure)
(optimize-level	thread-param)
(library-search-handler	thread-param)
(i/o-file-already-exists-error?	procedure)
(even?	procedure)
(call-with-input-file	procedure)
(fxlogbit0	procedure)
(make-lexical-violation	procedure)
(fxlogbit1	procedure)
(fxvector-copy	procedure)
(annotation-options	procedure)
(force	procedure)
(cd	global-param)
(fxlogbit?	procedure)
(port-input-size	procedure)
(do	syntax)
(bitwise-bit-field	procedure)
(fxlogxor	procedure)
(if	syntax)
(exact	procedure)
(top-level-syntax	procedure)
(compile-to-file	procedure)
(bytevector-copy	procedure)
(error	procedure)
(substring	procedure)
(or	syntax)
(scheme	module)
(generate-procedure-source-information	thread-param)
(sealed	syntax)
(source-table-ref	procedure)
(record-accessor	procedure)
(copy-environment	procedure)
(opaque	syntax)
(list-head	procedure)
(default-record-equal-procedure	thread-param)
(fxabs	procedure)
(rename	syntax)
(bitwise-bit-count	procedure)
(open-file-input-port	procedure)
(make-i/o-file-is-read-only-error	procedure)
(list-copy	procedure)
(fxand	procedure)
(library-version	procedure)
(guard	syntax)
(bytevector-u48-set!	procedure)
(fxmodulo	procedure)
(cost-center?	procedure)
(fxdiv	procedure)
(remove!	procedure)
(open-string-output-port	procedure)
(implementation-restriction-violation?	procedure)
(port-has-set-port-position!?	procedure)
(debug-level	thread-param)
(flnumerator	procedure)
(register-signal-handler	procedure)
(fxior	procedure)
(fxmax	procedure)
(integer?	procedure)
(fxmin	procedure)
(initial-bytes-allocated	procedure)
(remove	procedure)
(fxmod	procedure)
(compile-library-handler	thread-param)
(define-property	syntax)
(make-i/o-filename-error	procedure)
(record-type-name	procedure)
(trace-output-port	thread-param)
(fxnot	procedure)
(fxvector-set!	procedure)
(remprop	procedure)
(record-hash-procedure	procedure)
(call-with-values	procedure)
(fxsll	procedure)
(fxsra	procedure)
(vector-sort!	procedure)
(fxsrl	procedure)
(merge	procedure)
(utf-8-codec	procedure)
(command-line-arguments	global-param)
(make-vector	procedure)
(list*	procedure)
(read-token	procedure)
(bwp-object?	procedure)
(fxxor	procedure)
(list?	procedure)
(visit-compiled-from-port	procedure)
(div0-and-mod0	procedure)
(pair?	procedure)
(mkdir	procedure)
(set-time-second!	procedure)
(collect-notify	global-param)
(mutex?	procedure)
(bytevector-u56-set!	procedure)
(remove-foreign-entry	procedure)
(library-exports	procedure)
(ieee-environment	procedure)
(eol-style	syntax)
(compile-to-port	procedure)
(block-read	procedure)
(isqrt	procedure)
(syntax-violation	procedure)
(list-tail	procedure)
(set-sstats-bytes!	procedure)
(environment?	procedure)
(transcoded-port	procedure)
(logor	procedure)
(undefined-violation?	procedure)
(ftype-guardian	syntax)
(prefix	syntax)
(bitwise-rotate-bit-field	procedure)
(binary-port-input-buffer	procedure)
(make-thread-parameter	procedure)
(mutable	syntax)
(fxlogtest	procedure)
(r6rs:with-output-to-file	#f)
(source-table?	procedure)
(mutable-bytevector?	procedure)
(eof-object	procedure)
(finite?	procedure)
(bytevector-u64-native-set!	procedure)
(real?	procedure)
(list-sort	procedure)
(bytevector-u8-set!	procedure)
(profile-query-weight	procedure)
(foreign-callable	syntax)
(bytevector-ieee-single-set!	procedure)
(raise	procedure)
(eq-hashtable-ref	procedure)
(trace-let	syntax)
(put-u8	procedure)
(subset-mode	thread-param)
(for-all	procedure)
(date-year-day	procedure)
(time-second	procedure)
(bytevector-u64-set!	procedure)
(gensym?	procedure)
(make-custom-textual-input/output-port	procedure)
(remq!	procedure)
(new-cafe	procedure)
(make-ephemeron-eq-hashtable	procedure)
(enum-set-indexer	procedure)
(remv!	procedure)
(scheme-version	procedure)
(printf	procedure)
(char-foldcase	procedure)
(load-library	procedure)
(make-i/o-encoding-error	procedure)
(i/o-error-filename	procedure)
(reverse	procedure)
(magnitude	procedure)
(number?	procedure)
(condition-name	procedure)
(compile-imported-libraries	thread-param)
(procedure-arity-mask	procedure)
(flfloor	procedure)
(reset	procedure)
(time<?	procedure)
(enum-set-union	procedure)
(time=?	procedure)
(time>?	procedure)
(null?	procedure)
(fresh-line	procedure)
(set-port-input-index!	procedure)
(ormap	procedure)
(fleven?	procedure)
(guardian?	procedure)
(current-exception-state	thread-param)
(revisit	procedure)
(fxdiv0-and-mod0	procedure)
(eval-when	syntax)
(&implementation-restriction	syntax)
(port?	procedure)
(with-input-from-string	procedure)
(bytevector->immutable-bytevector	procedure)
(threaded?	procedure)
(r6rs:hashtable-entries	#f)
(rational?	procedure)
(values	procedure)
(hashtable-ephemeron?	procedure)
(with-output-to-string	procedure)
(make-i/o-write-error	procedure)
(i/o-file-is-read-only-error?	procedure)
(sleep	procedure)
(time?	procedure)
(bound-identifier=?	procedure)
(utf-16le-codec	procedure)
(sc-expand	procedure)
(foreign-sizeof	procedure)
(source-file-descriptor-path	procedure)
(condition-wait	procedure)
(vector	procedure)
(time-difference	procedure)
(char->integer	procedure)
(integer-valued?	procedure)
(engine-block	procedure)
(bitwise-and	procedure)
(infinite?	procedure)
(ftype-pointer=?	syntax)
(make-sstats	procedure)
(cp0-effort-limit	thread-param)
(getprop	procedure)
(char-titlecase	procedure)
(compress-level	thread-param)
(waiter-prompt-and-read	thread-param)
(round	procedure)
(utf32->string	procedure)
(date-and-time	procedure)
(sort!	procedure)
(bytevector->u8-list	procedure)
(drop-prefix	syntax)
(trace	syntax)
(record-constructor-descriptor?	procedure)
(syntax-violation-form	procedure)
(vector-cas!	procedure)
(get-char	procedure)
(quote	syntax)
(cpu-time	procedure)
(port-nonblocking?	procedure)
(make-string	procedure)
(bitwise-ior	procedure)
(record-field-mutable?	procedure)
(unbox	procedure)
(eq-hashtable-ephemeron?	procedure)
(commonization-level	thread-param)
(date-dst?	procedure)
(eval-syntax-expanders-when	thread-param)
(putenv	procedure)
(subst	procedure)
(enum-set=?	procedure)
(bitwise-not	procedure)
(string-truncate!	procedure)
(r6rs:delete-file	#f)
(verify-loadability	procedure)
(textual-port-input-size	procedure)
(condition	procedure)
(textual-port-output-size	procedure)
(make-syntax-violation	procedure)
(visit	procedure)
(type-descriptor	syntax)
(hash-table?	procedure)
(generate-instruction-counts	thread-param)
(constructor	syntax)
(flnegative?	procedure)
(make-ephemeron-eqv-hashtable	procedure)
(get-string-some!	procedure)
(string-for-each	procedure)
(bitwise-xor	procedure)
(fold-right	procedure)
(date-hour	procedure)
(make-input-port	procedure)
(condition-accessor	procedure)
(string-ci<?	procedure)
(string-ci=?	procedure)
(string-ci>?	procedure)
(record-type-hash-procedure	procedure)
(i/o-filename-error?	procedure)
(vector-copy	procedure)
(format-condition?	procedure)
(i/o-write-error?	procedure)
(fxquotient	procedure)
(boolean?	procedure)
(bytevector-s16-set!	procedure)
(enum-set-projection	procedure)
(default-prompt-and-read	procedure)
(bytevector-s16-native-set!	procedure)
(pretty-initial-indent	thread-param)
(immutable-vector?	procedure)
(zero?	procedure)
(get-line	procedure)
(ftype-pointer?	syntax)
(bitwise-copy-bit	procedure)
(transcript-cafe	procedure)
(standard-input-port	procedure)
(list->vector	procedure)
(fxarithmetic-shift-right	procedure)
(source-object?	procedure)
(get-mode	procedure)
(case-lambda	syntax)
(&i/o-decoding	syntax)
(make-source-table	procedure)
(print-precision	thread-param)
(write	procedure)
(subst!	procedure)
(sstats-real	procedure)
(bytevector-ieee-single-native-ref	procedure)
(csv7:record-field-accessible?	#f)
(command-line	global-param)
(record-type-uid	procedure)
(enum-set-subset?	procedure)
(make-undefined-violation	procedure)
(greatest-fixnum	procedure)
(r6rs:record?	#f)
(fxvector	procedure)
(set-binary-port-input-size!	procedure)
(fixnum?	procedure)
(flonum?	procedure)
(bytevector-uncompress	procedure)
(substq	procedure)
(flush-output-port	procedure)
(substv	procedure)
(string-copy	procedure)
(file-regular?	procedure)
(string-hash	procedure)
(latin-1-codec	procedure)
(bytevector-s24-set!	procedure)
(date-year	procedure)
(vector-set!	procedure)
(compile-time-value?	procedure)
(unless	syntax)
(source-table-cell	procedure)
(flfinite?	procedure)
(directory-list	procedure)
(port-output-buffer	procedure)
(cfl-conjugate	procedure)
(fltruncate	procedure)
(transcript-off	procedure)
(make-who-condition	procedure)
(r6rs:utf-16-codec	#f)
(concatenate-object-files	procedure)
(print-extended-identifiers	thread-param)
(positive?	procedure)
(file-change-time	procedure)
(hashtable-update!	procedure)
(process	procedure)
(&violation	syntax)
(sstats-gc-cpu	procedure)
(make-weak-eq-hashtable	procedure)
(random-seed	thread-param)
(string<?	procedure)
(string=?	procedure)
(vector-sort	procedure)
(time<=?	procedure)
(string>?	procedure)
(fxvector->immutable-fxvector	procedure)
(set-sstats-gc-real!	procedure)
(compile-script	procedure)
(time>=?	procedure)
(make-continuation-condition	procedure)
(string	procedure)
(locate-source-object-source	procedure)
(condition-continuation	procedure)
(syntax->datum	procedure)
(record-mutator	procedure)
(cost-center-instruction-count	procedure)
(source-table-dump	procedure)
(revisit-compiled-from-port	procedure)
(profile	syntax)
(r6rs:case	#f)
(char-ready?	procedure)
(put-bytevector	procedure)
(make-i/o-decoding-error	procedure)
(bytevector-s32-set!	procedure)
(top-level-syntax?	procedure)
(make-custom-binary-input-port	procedure)
(string-set!	procedure)
(fx*/carry	procedure)
(syntax-error	procedure)
(exit-handler	thread-param)
(fldenominator	procedure)
(current-locate-source-object-source	thread-param)
(gensym-prefix	thread-param)
(flround	procedure)
(environment-symbols	procedure)
(enum-set-member?	procedure)
(i/o-read-error?	procedure)
(maximum-memory-bytes	procedure)
(fluid-let	syntax)
(make-boot-header	procedure)
(letrec-syntax	syntax)
(textual-port-output-count	procedure)
(r6rs:standard-output-port	#f)
(generate-covin-files	thread-param)
(record-rtd	procedure)
(scheme-start	global-param)
(cfl-magnitude-squared	procedure)
(source-object-line	procedure)
(set-time-nanosecond!	procedure)
(default-record-hash-procedure	thread-param)
(profile-clear	procedure)
(binary-port-input-count	procedure)
(set-binary-port-output-size!	procedure)
(unquote-splicing	syntax)
(bitwise-copy-bit-field	procedure)
(set-sstats-cpu!	procedure)
(&i/o-encoding	syntax)
(r6rs:eval	#f)
(source-table-set!	procedure)
(syntax-case	syntax)
(make-non-continuable-violation	procedure)
(port-has-set-port-nonblocking!?	procedure)
(set-timer	procedure)
(fxnonnegative?	procedure)
(csv7:record-type-field-decls	#f)
(fasl-compressed	thread-param)
(r6rs:exit	#f)
(bytevector-u16-native-ref	procedure)
(import-only	syntax)
(bytevector-s40-set!	procedure)
(with-output-to-file	procedure)
(truncate-file	procedure)
(open-input-string	procedure)
(load-shared-object	procedure)
(&i/o-filename	syntax)
(base-exception-handler	thread-param)
(file-buffer-size	thread-param)
(ftype-lock!	syntax)
(source-table-size	procedure)
(console-error-port	thread-param)
(file-options	syntax)
(dynamic-wind	procedure)
(port-has-port-position?	procedure)
(bitwise-reverse-bit-field	procedure)
(symbol-hashtable-contains?	procedure)
(hashtable-cell	procedure)
(syntax	syntax)
(remainder	procedure)
(hashtable-values	procedure)
(fixnum-width	procedure)
(flzero?	procedure)
(&i/o-invalid-position	syntax)
(source-condition-form	procedure)
(textual-port-output-index	procedure)
(list->string	procedure)
(open-output-file	procedure)
(immutable-fxvector?	procedure)
(condition-who	procedure)
(record-type-parent	procedure)
(binary-port-input-index	procedure)
(meta-cond	syntax)
(ftype-locked-decr!	syntax)
(hashtable-copy	procedure)
(make-eq-hashtable	procedure)
(run-cp0	thread-param)
(open-bytevector-input-port	procedure)
(protocol	syntax)
(system	procedure)
(bytevector-sint-ref	procedure)
(i/o-file-protection-error?	procedure)
(flonum->fixnum	procedure)
(fixnum->flonum	procedure)
(syntax->annotation	procedure)
(number->string	procedure)
(thread?	procedure)
(with-syntax	syntax)
(r6rs:string-ci<=?	#f)
(uint-list->bytevector	procedure)
(record-type-descriptor	procedure)
(r6rs:string-ci>=?	#f)
(enable-object-counts	global-param)
(hashtable-keys	procedure)
(transcript-on	procedure)
(condition?	procedure)
(bitwise-if	procedure)
(simple-conditions	procedure)
(collect-generation-radix	global-param)
(transcoder?	procedure)
(truncate-port	procedure)
(symbol-hashtable?	procedure)
(put-string	procedure)
(vector?	procedure)
(sstats-cpu	procedure)
(set-port-bol!	procedure)
(make-fxvector	procedure)
(maybe-compile-program	procedure)
(bytevector-sint-set!	procedure)
(trace-define-syntax	syntax)
(profile-clear-database	procedure)
(date-minute	procedure)
(foreign-free	procedure)
(hashtable-set!	procedure)
(vector-map	procedure)
(string-upcase	procedure)
(enumerate	procedure)
(r6rs:number->string	#f)
(fx+/carry	procedure)
(set-port-eof!	procedure)
(make-record-type-descriptor	procedure)
(make-custom-textual-output-port	procedure)
(vector-ref	procedure)
(waiter-prompt-string	thread-param)
(open-file-output-port	procedure)
(interpret	procedure)
(fprintf	procedure)
(standard-output-port	procedure)
(r6rs:hashtable-keys	#f)
(continuation-condition?	procedure)
(i/o-encoding-error?	procedure)
(set-car!	procedure)
(generate-temporaries	procedure)
(hashtable-size	procedure)
(make-output-port	procedure)
(set-cdr!	procedure)
(fxvector-fill!	procedure)
(set-port-name!	procedure)
(path-first	procedure)
(list-ref	procedure)
(compile-time-value-value	procedure)
(add-prefix	syntax)
(library-requirements	procedure)
(hashtable-ref	procedure)
(suppress-greeting	global-param)
(close-input-port	procedure)
(profile-load-data	procedure)
(environment-mutable?	procedure)
(foreign-set!	procedure)
(print-brackets	thread-param)
(&serious	syntax)
(&format	syntax)
(make-eqv-hashtable	procedure)
(apropos-list	procedure)
(set-box!	procedure)
(set-port-length!	procedure)
(message-condition?	procedure)
(denominator	procedure)
(magnitude-squared	procedure)
(csv7:record-type-field-names	#f)
(date->time-utc	procedure)
(thread-condition?	procedure)
(make-source-condition	procedure)
(enum-set-intersection	procedure)
(symbol-hashtable-ref	procedure)
(list->fxvector	procedure)
(bitwise-arithmetic-shift-left	procedure)
(bytevector->sint-list	procedure)
(set-sstats-real!	procedure)
(copy-time	procedure)
(put-source-table	procedure)
(syntax-rules	syntax)
(non-continuable-violation?	procedure)
(date-day	procedure)
(port-input-buffer	procedure)
(bytevector-s64-native-ref	procedure)
(ftype-locked-incr!	syntax)
(r6rs:flush-output-port	#f)
(set-port-position!	procedure)
(annotation-source	procedure)
(directory-separator?	procedure)
(invoke-library	procedure)
(syntax-violation?	procedure)
(call-with-output-file	procedure)
(extend-syntax	syntax)
(r6rs:string-ci<?	#f)
(r6rs:string-ci=?	#f)
(r6rs:string-ci>?	#f)
(binary-port-output-count	procedure)
(eq-hashtable?	procedure)
(r6rs:open-input-file	#f)
(fasl-strip-options	syntax)
(current-transcoder	thread-param)
(virtual-register-count	procedure)
(port-closed?	procedure)
(bitwise-length	procedure)
(import-notify	thread-param)
(delete-directory	procedure)
(date-month	procedure)
(nonpositive?	procedure)
(display-string	procedure)
(assertion-violation	procedure)
(ftype-unlock!	syntax)
(print-graph	thread-param)
(&condition	syntax)
(define-top-level-syntax	procedure)
(with-cost-center	procedure)
(bytes-deallocated	procedure)
(make-compile-time-value	procedure)
(textual-port-output-buffer	procedure)
(eq-hashtable-cell	procedure)
(flnonnegative?	procedure)
(make-bytevector	procedure)
(make-implementation-restriction-violation	procedure)
(immutable-box?	procedure)
(fxdiv-and-mod	procedure)
(r6rs:fx*	#f)
(r6rs:fx+	#f)
(r6rs:fx-	#f)
(bytevector=?	procedure)
(lock-object	procedure)
(source-file-descriptor	procedure)
(decode-float	procedure)
(fxreverse-bit-field	procedure)
(output-port?	procedure)
(conjugate	procedure)
(include	syntax)
(parent-rtd	syntax)
(mutable-vector?	procedure)
(native-endianness	procedure)
(compile-profile	thread-param)
(port-input-count	procedure)
(exact-integer-sqrt	procedure)
(warning	procedure)
(scheme-version-number	procedure)
(file-length	procedure)
(foreign-procedure	syntax)
(expand/optimize	procedure)
(set-port-output-size!	procedure)
(binary-port-output-index	procedure)
(print-level	thread-param)
(date-second	procedure)
(textual-port?	procedure)
(cp0-score-limit	thread-param)
(file-directory?	procedure)
(putprop	procedure)
(ftype-pointer-address	procedure)
(compile-program	procedure)
(clear-input-port	procedure)
(&assertion	syntax)
(set-textual-port-input-index!	procedure)
(compile-interpret-simple	thread-param)
(hashtable-cells	procedure)
(collect-maximum-generation	global-param)
(string-downcase	procedure)
(make-source-file-descriptor	procedure)
(bytevector-u32-native-ref	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-error-port	procedure)
(port-input-empty?	procedure)
(mutex-release	procedure)
(make-format-condition	procedure)
(r6rs:string<?	#f)
(r6rs:string=?	#f)
(r6rs:string>?	#f)
(generate-profile-forms	thread-param)
(condition-signal	procedure)
(top-level-bound?	procedure)
(bitwise-arithmetic-shift	procedure)
(get-bytevector-n	procedure)
(pretty-file	procedure)
(mutable-box?	procedure)
(r6rs:current-output-port	#f)
(source-file-descriptor-checksum	procedure)
(define-condition-type	syntax)
(truncate	procedure)
(char-upcase	procedure)
(locate-source	procedure)
(transcoder-error-handling-mode	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-annotation	procedure)
(eq-hashtable-set!	procedure)
(port-input-index	procedure)
(ftype-sizeof	syntax)
(inexact	procedure)
(get-string-n!	procedure)
(print-radix	thread-param)
(path-parent	procedure)
(fldiv-and-mod	procedure)
(csv7:record-field-mutator	#f)
(bytevector-truncate!	procedure)
(profile-release-counters	procedure)
(unsyntax	syntax)
(indirect-export	syntax)
(char-lower-case?	procedure)
(*	Category)
(+	procedure)
(-	procedure)
(/	procedure)
(port-transcoder	procedure)
(<	procedure)
(=	procedure)
(>	procedure)
(port-has-set-port-length!?	procedure)
(complex?	procedure)
(file-modification-time	procedure)
(port-handler	procedure)
(make-no-infinities-violation	procedure)
(open-input-file	procedure)
(_	syntax)
(ftype-&ref	syntax)
(r6rs:current-error-port	#f)
(fork-thread	procedure)
(symbol=?	procedure)
(expand/optimize-output	thread-param)
(eof-object?	procedure)
(sint-list->bytevector	procedure)
(utf-16be-codec	procedure)
(immutable-string?	procedure)
(char-alphabetic?	procedure)
(r6rs:open-output-file	#f)
(fxeven?	procedure)
(get-bytevector-n!	procedure)
(file-port?	procedure)
(print-gensym	thread-param)
(default-library-search-handler	procedure)
(string-normalize-nfkc	procedure)
(string-normalize-nfkd	procedure)
(sstats-gc-count	procedure)
(reset-handler	thread-param)
(char-ci<=?	procedure)
(eq-hashtable-update!	procedure)
(box-immutable	procedure)
(char-ci>=?	procedure)
(current-make-source-object	thread-param)
(bytevector-u16-native-set!	procedure)
(hashtable-delete!	procedure)
(eq-hashtable-contains?	procedure)
(set-binary-port-input-buffer!	procedure)
(ftype-pointer-ftype	procedure)
(buffer-mode	syntax)
(bytevector-ieee-single-ref	procedure)
(set-binary-port-output-index!	procedure)
(profile-dump	procedure)
(put-bytevector-some	procedure)
(open-fd-output-port	procedure)
(make-record-constructor-descriptor	procedure)
(predicate	syntax)
(scheme-script	global-param)
(native-eol-style	procedure)
(unget-char	procedure)
(free-identifier=?	procedure)
(current-error-port	thread-param)
(bytevector-ieee-single-native-set!	procedure)
(get-source-table!	procedure)
(least-fixnum	procedure)
(condition-broadcast	procedure)
(inspect/object	procedure)
(sstats-gc-bytes	procedure)
(no-nans-violation?	procedure)
(call/cc	procedure)
(utf8->string	procedure)
(get-datum	procedure)
(call-with-string-output-port	procedure)
(library-requirements-options	syntax)
(make-error	procedure)
(csv7:record-type-name	#f)
(caaaar	procedure)
(set-port-input-size!	procedure)
(bytevector-s48-set!	procedure)
(record-constructor-descriptor	syntax)
(caaadr	procedure)
(fx-/carry	procedure)
(fxpositive?	procedure)
(syntax->vector	procedure)
(with-profile-tracker	procedure)
(fxcopy-bit-field	procedure)
(caadar	procedure)
(define-ftype	syntax)
(caaddr	procedure)
(debug-on-exception	global-param)
(substq!	procedure)
(record-type-generative?	procedure)
(substv!	procedure)
(set-textual-port-input-buffer!	procedure)
(compute-size	procedure)
(cadaar	procedure)
(cadadr	procedure)
(define-record	syntax)
(set-textual-port-output-index!	procedure)
(time-type	procedure)
(caddar	procedure)
(cadddr	procedure)
(mutex-name	procedure)
(string->number	procedure)
(&no-nans	syntax)
(library	syntax)
(machine-type	procedure)
(add-duration!	procedure)
(symbol->string	procedure)
(get-bytevector-some	procedure)
(fldiv0-and-mod0	procedure)
(vector->list	procedure)
(port-length	procedure)
(string->immutable-string	procedure)
(fxlogor	procedure)
(lookahead-u8	procedure)
(set-port-output-buffer!	procedure)
(library-object-filename	procedure)
(file-access-time	procedure)
(record-type-sealed?	procedure)
(define-enumeration	syntax)
(numerator	procedure)
(annotation-option-set	syntax)
(block-write	procedure)
(get-string-n	procedure)
(cdaaar	procedure)
(string-foldcase	procedure)
(unlock-object	procedure)
(bytevector-s56-set!	procedure)
(make-date	procedure)
(cdaadr	procedure)
(record-type-opaque?	procedure)
(cdadar	procedure)
(cdaddr	procedure)
(get-process-id	procedure)
(record-predicate	procedure)
(&irritants	syntax)
(cddaar	procedure)
(&i/o	syntax)
(ftype-pointer-null?	syntax)
(cddadr	procedure)
(r6rs:string->number	#f)
(cdddar	procedure)
(csv7:record-type-descriptor	#f)
(cddddr	procedure)
(utf16->string	procedure)
(file-exists?	procedure)
(r6rs:standard-error-port	#f)
(set-textual-port-output-buffer!	procedure)
(make-cost-center	procedure)
(bytevector-copy!	procedure)
(bytevector-fill!	procedure)
(maybe-compile-file	procedure)
(cfl-imag-part	procedure)
(bytevector-s8-ref	procedure)
(foreign-callable-code-object	procedure)
(close-output-port	procedure)
(add-duration	procedure)
(compile-file	procedure)
(div-and-mod	procedure)
(enum-set-difference	procedure)
(set-sstats-gc-cpu!	procedure)
(quasiquote	syntax)
(make-hash-table	procedure)
(inspect	procedure)
(enum-set->list	procedure)
(bytevector-s64-set!	procedure)
(literal-identifier=?	procedure)
(get-string-some	procedure)
(fxremainder	procedure)
(environment	procedure)
(boolean=?	procedure)
(release-minimum-generation	global-param)
(set-textual-port-input-size!	procedure)
(letrec*	syntax)
(make-i/o-read-error	procedure)
(r6rs:string<=?	#f)
(rename-file	procedure)
(make-list	procedure)
(vector-set-fixnum!	procedure)
(symbol-hash	procedure)
(make-i/o-file-protection-error	procedure)
(&i/o-file-already-exists	syntax)
(char<?	procedure)
(char=?	procedure)
(char>?	procedure)
(r6rs:string>=?	#f)
(sstats?	procedure)
(record-reader	procedure)
(record-equal-procedure	procedure)
(abort-handler	thread-param)
(bytevector-s16-ref	procedure)
(r6rs:<	#f)
(r6rs:=	#f)
(s8-list->bytevector	procedure)
(r6rs:>	#f)
(lookahead-char	procedure)
(require-nongenerative-clause	thread-param)
(i/o-error-position	procedure)
(&who	syntax)
(weak-pair?	procedure)
(reset-cost-center!	procedure)
(generate-wpo-files	thread-param)
(&undefined	syntax)
(bytevector-s24-ref	procedure)
(ephemeron-pair?	procedure)
(fl-make-rectangular	procedure)
(make-polar	procedure)
(fxarithmetic-shift-left	procedure)
(generate-interrupt-trap	thread-param)
(make-mutex	procedure)
(&i/o-file-is-read-only	syntax)
(&warning	syntax)
(assertion-violation?	procedure)
(fxbit-set?	procedure)
(make-time	procedure)
(integer-length	procedure)
(r6rs:with-input-from-file	#f)
(andmap	procedure)
(make-message-condition	procedure)
(call-with-bytevector-output-port	procedure)
(assertion-violationf	procedure)
(maybe-compile-library	procedure)
(bytevector-s32-ref	procedure)
(string?	procedure)
(hashtable-weak?	procedure)
(define	syntax)
(compile-port	procedure)
(make-violation	procedure)
(serious-condition?	procedure)
(debug-condition	thread-param)
(trace-print	thread-param)
(print-length	thread-param)
(sstats-difference	procedure)
(bytevector-s40-ref	procedure)
(date-week-day	procedure)
($primitive	syntax)
(print-char-name	thread-param)
(char-general-category	procedure)
(make-transcoder	procedure)
(&no-infinities	syntax)
(fxrotate-bit-field	procedure)
(r6rs:command-line	#f)
(eq-hashtable-weak?	procedure)
(bytes-allocated	procedure)
(set-time-type!	procedure)
(string->list	procedure)
(char<=?	procedure)
(bytevector-u8-ref	procedure)
(generate-allocation-counts	thread-param)
(char>=?	procedure)
(...	syntax)
(make-weak-eqv-hashtable	procedure)
(current-output-port	thread-param)
(lexical-violation?	procedure)
(record-type-descriptor?	procedure)
(with-interrupts-disabled	syntax)
(with-mutex	syntax)
(define-values	syntax)
(get-output-string	procedure)
(char-whitespace?	procedure)
(get-hash-table	procedure)
(integer->char	procedure)
(ftype-pointer->sexpr	procedure)
(string-titlecase	procedure)
(make-hashtable	procedure)
(waiter-write	thread-param)
(r6rs:<=	#f)
(r6rs:>=	#f)
(source-table-contains?	procedure)
(fxzero?	procedure)
(most-positive-fixnum	procedure)
(enum-set-constructor	procedure)
(native-transcoder	procedure)
(untrace	syntax)
(cflonum?	procedure)
(nongenerative	syntax)
(get-string-all	procedure)
(unquote	syntax)
(fxvector?	procedure)
(fasl-write	procedure)
(compute-composition	procedure)
(peek-char	procedure)
(scheme-report-environment	procedure)
(make-engine	procedure)
(string->utf8	procedure)
(make-warning	procedure)
(port-file-compressed!	procedure)
(append	procedure)
(statistics	procedure)
(partition	procedure)
(with-exception-handler	procedure)
(negative?	procedure)
(flinfinite?	procedure)
(r6rs:record-constructor	#f)
(annotation-expression	procedure)
(ceiling	procedure)
(bytevector->string	procedure)
(foreign-ref	procedure)
(hash-table-map	procedure)
(make-rectangular	procedure)
(bytevector-s32-native-set!	procedure)
(heap-reserve-ratio	global-param)
(make-enumeration	procedure)
(profile-palette	thread-param)
(warning?	procedure)
(open-string-input-port	procedure)
($system	module)
(get-u8	procedure)
(warningf	procedure)
(exclusive-cond	syntax)
(port-output-count	procedure)
(load-compiled-from-port	procedure)
(most-negative-fixnum	procedure)
(hashtable-mutable?	procedure)
(print-unicode	thread-param)
(get-bytevector-all	procedure)
(identifier-syntax	syntax)
(&i/o-file-protection	syntax)
(bytevector?	procedure)
(read-char	procedure)
(symbol?	procedure)
(reset-maximum-memory-bytes!	procedure)
(bytevector-ieee-double-native-ref	procedure)
(equal-hash	procedure)
(with-input-from-file	procedure)
(bignum?	procedure)
(trace-do	syntax)
(i/o-port-error?	procedure)
(exact->inexact	procedure)
(bytevector-s48-ref	procedure)
(record-constructor	procedure)
(equal?	procedure)
(list-instance	#f)
(rnrs	#f)
(condition	procedure)
(&assertion	syntax))))

(define rnrs-condition (private-process '(rnrs condition) '(
(&assertion	syntax)
(&condition	syntax)
(&error	syntax)
(&implementation-restriction	syntax)
(&irritants	syntax)
(&lexical	syntax)
(&message	syntax)
(&non-continuable	syntax)
(&serious	syntax)
(&syntax	syntax)
(&undefined	syntax)
(&violation	syntax)
(&warning	syntax)
(&who	syntax)
(assertion-violation?	procedure)
(condition	procedure)
(condition-accessor	procedure)
(condition-irritants	procedure)
(condition-message	procedure)
(condition-predicate	procedure)
(condition-who	procedure)
(condition?	procedure)
(define-condition-type	syntax)
(error?	procedure)
(implementation-restriction-violation?	procedure)
(irritants-condition?	procedure)
(lexical-violation?	procedure)
(make-assertion-violation	procedure)
(make-error	procedure)
(make-implementation-restriction-violation	procedure)
(make-irritants-condition	procedure)
(make-lexical-violation	procedure)
(make-message-condition	procedure)
(make-non-continuable-violation	procedure)
(make-serious-condition	procedure)
(make-syntax-violation	procedure)
(make-undefined-violation	procedure)
(make-violation	procedure)
(make-warning	procedure)
(make-who-condition	procedure)
(message-condition?	procedure)
(non-continuable-violation?	procedure)
(serious-condition?	procedure)
(simple-conditions	procedure)
(syntax-violation-form	procedure)
(syntax-violation-subform	procedure)
(syntax-violation?	procedure)
(undefined-violation?	procedure)
(violation?	procedure)
(warning?	procedure)
(who-condition?	procedure))))

(define rnrs-files (private-process '(rnrs files) '(
(&i/o	syntax)
(&i/o-file-already-exists	syntax)
(&i/o-file-does-not-exist	syntax)
(&i/o-file-is-read-only	syntax)
(&i/o-file-protection	syntax)
(&i/o-filename	syntax)
(&i/o-invalid-position	syntax)
(&i/o-port	syntax)
(&i/o-read	syntax)
(&i/o-write	syntax)
(i/o-error-filename	procedure)
(i/o-error-port	procedure)
(i/o-error-position	procedure)
(i/o-error?	procedure)
(i/o-file-already-exists-error?	procedure)
(i/o-file-does-not-exist-error?	procedure)
(i/o-file-is-read-only-error?	procedure)
(i/o-file-protection-error?	procedure)
(i/o-filename-error?	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-port-error?	procedure)
(i/o-read-error?	procedure)
(i/o-write-error?	procedure)
(make-i/o-error	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(make-i/o-file-is-read-only-error	procedure)
(make-i/o-file-protection-error	procedure)
(make-i/o-filename-error	procedure)
(make-i/o-invalid-position-error	procedure)
(make-i/o-port-error	procedure)
(make-i/o-read-error	procedure)
(make-i/o-write-error	procedure)
(delete-file	procedure)
(file-exists?	procedure)
)))

(define rnrs-base (private-process '(rnrs base) '(
(+	procedure)
(*	procedure)
(-	procedure)
(...	syntax)
(/	procedure)
(=>	syntax)
(_	syntax)
(abs	procedure)
(acos	procedure)
(and	syntax)
(angle	procedure)
(append	procedure)
(apply	procedure)
(asin	procedure)
(assert	syntax)
(assertion-violation	procedure)
(atan	procedure)
(begin	syntax)
(boolean=?	procedure)
(boolean?	procedure)
(caaaar	procedure)
(caaadr	procedure)
(caaar	procedure)
(caadar	procedure)
(caaddr	procedure)
(caadr	procedure)
(caar	procedure)
(cadaar	procedure)
(cadadr	procedure)
(cadar	procedure)
(caddar	procedure)
(cadddr	procedure)
(caddr	procedure)
(cadr	procedure)
(call-with-current-continuation	procedure)
(call-with-values	procedure)
(call/cc	procedure)
(car	procedure)
(cdaaar	procedure)
(cdaadr	procedure)
(cdaar	procedure)
(cdadar	procedure)
(cdaddr	procedure)
(cdadr	procedure)
(cdar	procedure)
(cddaar	procedure)
(cddadr	procedure)
(cddar	procedure)
(cdddar	procedure)
(cddddr	procedure)
(cdddr	procedure)
(cddr	procedure)
(cdr	procedure)
(ceiling	procedure)
(char->integer	procedure)
(char?	procedure)
(complex?	procedure)
(cond	syntax)
(cons	procedure)
(cos	procedure)
(define	syntax)
(define-syntax	syntax)
(denominator	procedure)
(div	procedure)
(div-and-mod	procedure)
(div0	procedure)
(div0-and-mod0	procedure)
(else	syntax)
(eq?	procedure)
(equal?	procedure)
(eqv?	procedure)
(error	procedure)
(even?	procedure)
(exact	procedure)
(exact-integer-sqrt	procedure)
(exact?	procedure)
(exp	procedure)
(expt	procedure)
(finite?	procedure)
(floor	procedure)
(for-each	procedure)
(gcd	procedure)
(identifier-syntax	syntax)
(if	syntax)
(imag-part	procedure)
(inexact	procedure)
(inexact?	procedure)
(infinite?	procedure)
(integer->char	procedure)
(integer-valued?	procedure)
(integer?	procedure)
(lambda	syntax)
(lcm	procedure)
(length	procedure)
(let	syntax)
(let*	syntax)
(let*-values	syntax)
(let-syntax	syntax)
(let-values	syntax)
(letrec	syntax)
(letrec*	syntax)
(letrec-syntax	syntax)
(list	procedure)
(list->string	procedure)
(list->vector	procedure)
(list-ref	procedure)
(list-tail	procedure)
(list?	procedure)
(log	procedure)
(magnitude	procedure)
(make-polar	procedure)
(make-rectangular	procedure)
(make-string	procedure)
(make-vector	procedure)
(map	procedure)
(max	procedure)
(min	procedure)
(mod	procedure)
(mod0	procedure)
(nan?	procedure)
(negative?	procedure)
(not	procedure)
(null?	procedure)
(number?	procedure)
(numerator	procedure)
(odd?	procedure)
(or	syntax)
(pair?	procedure)
(positive?	procedure)
(procedure?	procedure)
(quasiquote	syntax)
(quote	syntax)
(<	procedure)
(<=	procedure)
(=	procedure)
(>	procedure)
(>=	procedure)
(case	syntax)
(char<=?	procedure)
(char<?	procedure)
(char=?	procedure)
(char>=?	procedure)
(char>?	procedure)
(dynamic-wind	procedure)
(number->string	procedure)
(string->number	procedure)
(string<=?	procedure)
(string<?	procedure)
(string=?	procedure)
(string>=?	procedure)
(string>?	procedure)
(syntax-rules	syntax)
(rational-valued?	procedure)
(rational?	procedure)
(rationalize	procedure)
(real-part	procedure)
(real-valued?	procedure)
(real?	procedure)
(reverse	procedure)
(round	procedure)
(set!	syntax)
(sin	procedure)
(sqrt	procedure)
(string	procedure)
(string->list	procedure)
(string->symbol	procedure)
(string-append	procedure)
(string-copy	procedure)
(string-for-each	procedure)
(string-length	procedure)
(string-ref	procedure)
(string?	procedure)
(substring	procedure)
(symbol->string	procedure)
(symbol=?	procedure)
(symbol?	procedure)
(tan	procedure)
(truncate	procedure)
(unquote	syntax)
(unquote-splicing	syntax)
(values	procedure)
(vector	procedure)
(vector->list	procedure)
(vector-fill!	procedure)
(vector-for-each	procedure)
(vector-length	procedure)
(vector-map	procedure)
(vector-ref	procedure)
(vector-set!	procedure)
(vector?	procedure)
(zero?	procedure))))

(define rnrs-syntax-case (private-process '(rnrs syntax case) '(
(...	syntax)
(_	syntax)
(bound-identifier=?	procedure)
(datum->syntax	procedure)
(free-identifier=?	procedure)
(generate-temporaries	procedure)
(identifier?	procedure)
(make-variable-transformer	procedure)
(quasisyntax	syntax)
(syntax	syntax)
(syntax->datum	procedure)
(syntax-case	syntax)
(syntax-violation	procedure)
(unsyntax	syntax)
(unsyntax-splicing	syntax)
(with-syntax	syntax))))

(define rnrs-exception (private-process '(rnrs exception) '(
(=>	syntax)
(else	syntax)
(guard	syntax)
(raise	procedure)
(raise-continuable	procedure)
(with-exception-handler	procedure))))

(define rnrs-lists (private-process '(rnrs lists) '(
(assoc	procedure)
(assp	procedure)
(assq	procedure)
(assv	procedure)
(cons*	procedure)
(exists	procedure)
(filter	procedure)
(find	procedure)
(fold-left	procedure)
(fold-right	procedure)
(for-all	procedure)
(member	procedure)
(memp	procedure)
(memq	procedure)
(memv	procedure)
(partition	procedure)
(remove	procedure)
(remp	procedure)
(remq	procedure)
(remv	procedure))))

(define rnrs-bytevectors (private-process '(rnrs bytevectors) '(
(bytevector->sint-list	procedure)
(bytevector->u8-list	procedure)
(bytevector->uint-list	procedure)
(bytevector-copy	procedure)
(bytevector-copy!	procedure)
(bytevector-fill!	procedure)
(bytevector-ieee-double-native-ref	procedure)
(bytevector-ieee-double-native-set!	procedure)
(bytevector-ieee-double-ref	procedure)
(bytevector-ieee-double-set!	procedure)
(bytevector-ieee-single-native-ref	procedure)
(bytevector-ieee-single-native-set!	procedure)
(bytevector-ieee-single-ref	procedure)
(bytevector-ieee-single-set!	procedure)
(bytevector-length	procedure)
(bytevector-s16-native-ref	procedure)
(bytevector-s16-native-set!	procedure)
(bytevector-s16-ref	procedure)
(bytevector-s16-set!	procedure)
(bytevector-s32-native-ref	procedure)
(bytevector-s32-native-set!	procedure)
(bytevector-s32-ref	procedure)
(bytevector-s32-set!	procedure)
(bytevector-s64-native-ref	procedure)
(bytevector-s64-native-set!	procedure)
(bytevector-s64-ref	procedure)
(bytevector-s64-set!	procedure)
(bytevector-s8-ref	procedure)
(bytevector-s8-set!	procedure)
(bytevector-sint-ref	procedure)
(bytevector-sint-set!	procedure)
(bytevector-u16-native-ref	procedure)
(bytevector-u16-native-set!	procedure)
(bytevector-u16-ref	procedure)
(bytevector-u16-set!	procedure)
(bytevector-u32-native-ref	procedure)
(bytevector-u32-native-set!	procedure)
(bytevector-u32-ref	procedure)
(bytevector-u32-set!	procedure)
(bytevector-u64-native-ref	procedure)
(bytevector-u64-native-set!	procedure)
(bytevector-u64-ref	procedure)
(bytevector-u64-set!	procedure)
(bytevector-u8-ref	procedure)
(bytevector-u8-set!	procedure)
(bytevector-uint-ref	procedure)
(bytevector-uint-set!	procedure)
(bytevector=?	procedure)
(bytevector?	procedure)
(endianness	syntax)
(make-bytevector	procedure)
(native-endianness	procedure)
(sint-list->bytevector	procedure)
(string->utf16	procedure)
(string->utf32	procedure)
(string->utf8	procedure)
(u8-list->bytevector	procedure)
(uint-list->bytevector	procedure)
(utf16->string	procedure)
(utf32->string	procedure)
(utf8->string	procedure))))

(define rnrs-control (private-process '(rnrs control) '(
(case-lambda	syntax)
(do	syntax)
(unless	syntax)
(when	syntax))))

(define rnrs-unicode (private-process '(rnrs unicode) '(
(char-alphabetic?	procedure)
(char-downcase	procedure)
(char-foldcase	procedure)
(char-general-category	procedure)
(char-lower-case?	procedure)
(char-numeric?	procedure)
(char-title-case?	procedure)
(char-titlecase	procedure)
(char-upcase	procedure)
(char-upper-case?	procedure)
(char-whitespace?	procedure)
(char-ci<=?	procedure)
(char-ci<?	procedure)
(char-ci=?	procedure)
(char-ci>=?	procedure)
(char-ci>?	procedure)
(string-ci<=?	procedure)
(string-ci<?	procedure)
(string-ci=?	procedure)
(string-ci>=?	procedure)
(string-ci>?	procedure)
(string-downcase	procedure)
(string-foldcase	procedure)
(string-normalize-nfc	procedure)
(string-normalize-nfd	procedure)
(string-normalize-nfkc	procedure)
(string-normalize-nfkd	procedure)
(string-titlecase	procedure)
(string-upcase	procedure))))

(define rnrs-enums (private-process '(rnrs enums) '(
(define-enumeration	syntax)
(enum-set->list	procedure)
(enum-set-complement	procedure)
(enum-set-constructor	procedure)
(enum-set-difference	procedure)
(enum-set-indexer	procedure)
(enum-set-intersection	procedure)
(enum-set-member?	procedure)
(enum-set-projection	procedure)
(enum-set-subset?	procedure)
(enum-set-union	procedure)
(enum-set-universe	procedure)
(enum-set=?	procedure)
(make-enumeration	procedure))))

(define rnrs-r5rs (private-process '(rnrs r5rs) '(
(delay	syntax)
(exact->inexact	procedure)
(force	procedure)
(inexact->exact	procedure)
(modulo	procedure)
(null-environment	procedure)
(quotient	procedure)
(remainder	procedure)
(scheme-report-environment	procedure))))

(define rnrs-eval (private-process '(rnrs eval) '(
(environment	procedure)
(eval	procedure))))

(define rnrs-hashtables (private-process '(rnrs hashtables) '(
(equal-hash	procedure)
(hashtable-clear!	procedure)
(hashtable-contains?	procedure)
(hashtable-copy	procedure)
(hashtable-delete!	procedure)
(hashtable-equivalence-function	procedure)
(hashtable-hash-function	procedure)
(hashtable-mutable?	procedure)
(hashtable-ref	procedure)
(hashtable-set!	procedure)
(hashtable-size	procedure)
(hashtable-update!	procedure)
(hashtable?	procedure)
(make-eq-hashtable	procedure)
(make-eqv-hashtable	procedure)
(make-hashtable	procedure)
(hashtable-entries	procedure)
(hashtable-keys	procedure)
(string-ci-hash	procedure)
(string-hash	procedure)
(symbol-hash	procedure))))

(define rnrs-sorting (private-process '(rnrs sorting) '(
(list-sort	procedure)
(vector-sort	procedure)
(vector-sort!	procedure)
)))

(define rnrs-programs (private-process '(rnrs programs) '(
(command-line	global-param)
(exit	procedure)
)))

(define rnrs-mutable-pairs (private-process '(rnrs mutable pairs) '(
(set-car!	procedure)
(set-cdr!	procedure))))

(define rnrs-mutable-strings (private-process '(rnrs mutable strings) '(
(string-fill!	procedure)
(string-set!	procedure))))

(define rnrs-io-ports (private-process '(rnrs io ports) '(
(&i/o	syntax)
(&i/o-decoding	syntax)
(&i/o-encoding	syntax)
(&i/o-file-already-exists	syntax)
(&i/o-file-does-not-exist	syntax)
(&i/o-file-is-read-only	syntax)
(&i/o-file-protection	syntax)
(&i/o-filename	syntax)
(&i/o-invalid-position	syntax)
(&i/o-port	syntax)
(&i/o-read	syntax)
(&i/o-write	syntax)
(binary-port?	procedure)
(buffer-mode	syntax)
(buffer-mode?	syntax)
(bytevector->string	procedure)
(call-with-bytevector-output-port	procedure)
(call-with-port	procedure)
(call-with-string-output-port	procedure)
(close-port	procedure)
(eof-object	procedure)
(eof-object?	procedure)
(eol-style	syntax)
(error-handling-mode	syntax)
(file-options	syntax)
(get-bytevector-all	procedure)
(get-bytevector-n	procedure)
(get-bytevector-n!	procedure)
(get-bytevector-some	procedure)
(get-char	procedure)
(get-datum	procedure)
(get-line	procedure)
(get-string-all	procedure)
(get-string-n	procedure)
(get-string-n!	procedure)
(get-u8	procedure)
(i/o-decoding-error?	procedure)
(i/o-encoding-error-char	procedure)
(i/o-encoding-error?	procedure)
(i/o-error-filename	procedure)
(i/o-error-port	procedure)
(i/o-error-position	procedure)
(i/o-error?	procedure)
(i/o-file-already-exists-error?	procedure)
(i/o-file-does-not-exist-error?	procedure)
(i/o-file-is-read-only-error?	procedure)
(i/o-file-protection-error?	procedure)
(i/o-filename-error?	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-port-error?	procedure)
(i/o-read-error?	procedure)
(i/o-write-error?	procedure)
(input-port?	procedure)
(latin-1-codec	procedure)
(lookahead-char	procedure)
(lookahead-u8	procedure)
(make-custom-binary-input-port	procedure)
(make-custom-binary-input/output-port	procedure)
(make-custom-binary-output-port	procedure)
(make-custom-textual-input-port	procedure)
(make-custom-textual-input/output-port	procedure)
(make-custom-textual-output-port	procedure)
(make-i/o-decoding-error	procedure)
(make-i/o-encoding-error	procedure)
(make-i/o-error	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(make-i/o-file-is-read-only-error	procedure)
(make-i/o-file-protection-error	procedure)
(make-i/o-filename-error	procedure)
(make-i/o-invalid-position-error	procedure)
(make-i/o-port-error	procedure)
(make-i/o-read-error	procedure)
(make-i/o-write-error	procedure)
(make-transcoder	procedure)
(native-eol-style	procedure)
(native-transcoder	procedure)
(open-bytevector-input-port	procedure)
(open-bytevector-output-port	procedure)
(open-file-input-port	procedure)
(open-file-input/output-port	procedure)
(open-file-output-port	procedure)
(open-string-input-port	procedure)
(open-string-output-port	procedure)
(output-port-buffer-mode	procedure)
(output-port?	procedure)
(port-eof?	procedure)
(port-has-port-position?	procedure)
(port-has-set-port-position!?	procedure)
(port-position	procedure)
(port-transcoder	procedure)
(port?	procedure)
(put-bytevector	procedure)
(put-char	procedure)
(put-datum	procedure)
(put-string	procedure)
(put-u8	procedure)
(current-error-port	thread-param)
(current-input-port	thread-param)
(current-output-port	thread-param)
(flush-output-port	procedure)
(standard-error-port	procedure)
(standard-input-port	procedure)
(standard-output-port	procedure)
(utf-16-codec	procedure)
(set-port-position!	procedure)
(string->bytevector	procedure)
(textual-port?	procedure)
(transcoded-port	procedure)
(transcoder-codec	procedure)
(transcoder-eol-style	procedure)
(transcoder-error-handling-mode	procedure)
(utf-8-codec	procedure))))

(define rnrs-io-simple (private-process '(rnrs io simple) '(
(&i/o	syntax)
(&i/o-file-already-exists	syntax)
(&i/o-file-does-not-exist	syntax)
(&i/o-file-is-read-only	syntax)
(&i/o-file-protection	syntax)
(&i/o-filename	syntax)
(&i/o-invalid-position	syntax)
(&i/o-port	syntax)
(&i/o-read	syntax)
(&i/o-write	syntax)
(close-input-port	procedure)
(close-output-port	procedure)
(display	procedure)
(eof-object	procedure)
(eof-object?	procedure)
(i/o-error-filename	procedure)
(i/o-error-port	procedure)
(i/o-error-position	procedure)
(i/o-error?	procedure)
(i/o-file-already-exists-error?	procedure)
(i/o-file-does-not-exist-error?	procedure)
(i/o-file-is-read-only-error?	procedure)
(i/o-file-protection-error?	procedure)
(i/o-filename-error?	procedure)
(i/o-invalid-position-error?	procedure)
(i/o-port-error?	procedure)
(i/o-read-error?	procedure)
(i/o-write-error?	procedure)
(input-port?	procedure)
(make-i/o-error	procedure)
(make-i/o-file-already-exists-error	procedure)
(make-i/o-file-does-not-exist-error	procedure)
(make-i/o-file-is-read-only-error	procedure)
(make-i/o-file-protection-error	procedure)
(make-i/o-filename-error	procedure)
(make-i/o-invalid-position-error	procedure)
(make-i/o-port-error	procedure)
(make-i/o-read-error	procedure)
(make-i/o-write-error	procedure)
(newline	procedure)
(output-port?	procedure)
(peek-char	procedure)
(call-with-input-file	procedure)
(call-with-output-file	procedure)
(current-error-port	thread-param)
(current-input-port	thread-param)
(current-output-port	thread-param)
(open-input-file	procedure)
(open-output-file	procedure)
(with-input-from-file	procedure)
(with-output-to-file	procedure)
(read	procedure)
(read-char	procedure)
(write	procedure)
(write-char	procedure))))

(define rnrs-arithmetic-flonums (private-process '(rnrs arithmetic flonums) '(
(&no-infinities	syntax)
(&no-nans	syntax)
(fixnum->flonum	procedure)
(fl*	procedure)
(fl+	procedure)
(fl-	procedure)
(fl/	procedure)
(fl<=?	procedure)
(fl<?	procedure)
(fl=?	procedure)
(fl>=?	procedure)
(fl>?	procedure)
(flabs	procedure)
(flacos	procedure)
(flasin	procedure)
(flatan	procedure)
(flceiling	procedure)
(flcos	procedure)
(fldenominator	procedure)
(fldiv	procedure)
(fldiv-and-mod	procedure)
(fldiv0	procedure)
(fldiv0-and-mod0	procedure)
(fleven?	procedure)
(flexp	procedure)
(flexpt	procedure)
(flfinite?	procedure)
(flfloor	procedure)
(flinfinite?	procedure)
(flinteger?	procedure)
(fllog	procedure)
(flmax	procedure)
(flmin	procedure)
(flmod	procedure)
(flmod0	procedure)
(flnan?	procedure)
(flnegative?	procedure)
(flnumerator	procedure)
(flodd?	procedure)
(flonum?	procedure)
(flpositive?	procedure)
(flround	procedure)
(flsin	procedure)
(flsqrt	procedure)
(fltan	procedure)
(fltruncate	procedure)
(flzero?	procedure)
(make-no-infinities-violation	procedure)
(make-no-nans-violation	procedure)
(no-infinities-violation?	procedure)
(no-nans-violation?	procedure)
(real->flonum	procedure))))

(define rnrs-arithmetic-bitwise (private-process '(rnrs arithmetic bitwise) '(
(bitwise-and	procedure)
(bitwise-arithmetic-shift	procedure)
(bitwise-arithmetic-shift-left	procedure)
(bitwise-arithmetic-shift-right	procedure)
(bitwise-bit-count	procedure)
(bitwise-bit-field	procedure)
(bitwise-bit-set?	procedure)
(bitwise-copy-bit	procedure)
(bitwise-copy-bit-field	procedure)
(bitwise-first-bit-set	procedure)
(bitwise-if	procedure)
(bitwise-ior	procedure)
(bitwise-length	procedure)
(bitwise-not	procedure)
(bitwise-reverse-bit-field	procedure)
(bitwise-rotate-bit-field	procedure)
(bitwise-xor	procedure))))

(define rnrs-arithmetic-fixnums (private-process '(rnrs arithmetic fixnums) '(
(fixnum-width	procedure)
(fixnum?	procedure)
(fx*/carry	procedure)
(fx+/carry	procedure)
(fx-/carry	procedure)
(fx<=?	procedure)
(fx<?	procedure)
(fx=?	procedure)
(fx>=?	procedure)
(fx>?	procedure)
(fxand	procedure)
(fxarithmetic-shift	procedure)
(fxarithmetic-shift-left	procedure)
(fxarithmetic-shift-right	procedure)
(fxbit-count	procedure)
(fxbit-field	procedure)
(fxbit-set?	procedure)
(fxcopy-bit	procedure)
(fxcopy-bit-field	procedure)
(fxdiv	procedure)
(fxdiv-and-mod	procedure)
(fxdiv0	procedure)
(fxdiv0-and-mod0	procedure)
(fxeven?	procedure)
(fxfirst-bit-set	procedure)
(fxif	procedure)
(fxior	procedure)
(fxlength	procedure)
(fxmax	procedure)
(fxmin	procedure)
(fxmod	procedure)
(fxmod0	procedure)
(fxnegative?	procedure)
(fxnot	procedure)
(fxodd?	procedure)
(fxpositive?	procedure)
(fxreverse-bit-field	procedure)
(fxrotate-bit-field	procedure)
(fxxor	procedure)
(fxzero?	procedure)
(greatest-fixnum	procedure)
(least-fixnum	procedure)
(fx*	procedure)
(fx+	procedure)
(fx-	procedure))))

(define rnrs-records-syntactic (private-process '(rnrs records syntactic) '(
(define-record-type	syntax)
(fields	syntax)
(immutable	syntax)
(mutable	syntax)
(nongenerative	syntax)
(opaque	syntax)
(parent	syntax)
(parent-rtd	syntax)
(protocol	syntax)
(record-constructor-descriptor	syntax)
(record-type-descriptor	procedure)
(sealed	syntax))))

(define rnrs-records-procedure (private-process '(rnrs records procedure) '(
(make-record-constructor-descriptor	procedure)
(make-record-type-descriptor	procedure)
(record-constructor	procedure)
(record-accessor	procedure)
(record-mutator	procedure)
(record-predicate	procedure)
(record-type-descriptor?	procedure)
)))

(define rnrs-records-inspection (private-process '(rnrs records inspection) '(
(record?	procedure)
(record-field-mutable?	procedure)
(record-rtd	procedure)
(record-type-field-names	procedure)
(record-type-generative?	procedure)
(record-type-name	procedure)
(record-type-opaque?	procedure)
(record-type-parent	procedure)
(record-type-sealed?	procedure)
(record-type-uid	procedure)
)))

(define chezscheme-csv7 (private-process '(chezscheme csv7) '(
(record-field-accessible?	procedure)
(record-field-accessor	procedure)
(record-field-mutable?	procedure)
(record-field-mutator	procedure)
(record-type-descriptor	procedure)
(record-type-field-decls	procedure)
(record-type-field-names	procedure)
(record-type-name	procedure)
(record-type-symbol	procedure)
)))

(define scheme-csv7 (private-process '(scheme csv7) '(
(record-field-accessible?	procedure)
(record-field-accessor	procedure)
(record-field-mutable?	procedure)
(record-field-mutator	procedure)
(record-type-descriptor	procedure)
(record-type-field-decls	procedure)
(record-type-field-names	procedure)
(record-type-name	procedure)
(record-type-symbol	procedure))))
)
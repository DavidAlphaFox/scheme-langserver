library:	()
path:		./run.ss
library:	()
path:		./profile/t.ss
library:	()
path:		./output-type-analysis.ss
library:	()
path:		./.akku/lib/srfi/%3a43/vector-lib.scm
library:	()
path:		./.akku/lib/srfi/%3a25/ix-ctor.scm
library:	()
path:		./.akku/lib/srfi/%3a25/op-ctor.scm
library:	()
path:		./.akku/lib/srfi/%3a25/arlib.scm
library:	()
path:		./.akku/lib/srfi/%3a25/array.scm
library:	()
path:		./.akku/lib/srfi/%3a26/cut-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a117/list-queues-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a19/srfi-19.scm
library:	()
path:		./.akku/lib/srfi/%3a1/srfi-1-reference.scm
library:	()
path:		./.akku/lib/srfi/%3a37/srfi-37-reference.scm
library:	()
path:		./.akku/lib/srfi/%3a129/titlecase-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a129/titlemaps.scm
library:	()
path:		./.akku/lib/srfi/%3a152/extend-comparisons.scm
library:	()
path:		./.akku/lib/srfi/%3a152/r7rs-shim.scm
library:	()
path:		./.akku/lib/srfi/%3a152/macros.scm
library:	()
path:		./.akku/lib/srfi/%3a152/portable.scm
library:	()
path:		./.akku/lib/srfi/%3a127/lseqs-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a126/126.body.scm
library:	()
path:		./.akku/lib/srfi/%3a125/125.body.scm
library:	()
path:		./.akku/lib/srfi/%3a42/ec.scm
library:	()
path:		./.akku/lib/srfi/%3a130/130.body.scm
library:	()
path:		./.akku/lib/srfi/%3a132/vqsort2.scm
library:	()
path:		./.akku/lib/srfi/%3a132/lmsort.scm
library:	()
path:		./.akku/lib/srfi/%3a132/delndups.scm
library:	()
path:		./.akku/lib/srfi/%3a132/vhsort.scm
library:	()
path:		./.akku/lib/srfi/%3a132/visort.scm
library:	()
path:		./.akku/lib/srfi/%3a132/vmsort.scm
library:	()
path:		./.akku/lib/srfi/%3a132/vector-util.scm
library:	()
path:		./.akku/lib/srfi/%3a132/median.scm
library:	()
path:		./.akku/lib/srfi/%3a132/sort.scm
library:	()
path:		./.akku/lib/srfi/%3a132/sortp.scm
library:	()
path:		./.akku/lib/srfi/%3a158/srfi-158-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a51/srfi-51-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a27/mrg32k3a-a.scm
library:	()
path:		./.akku/lib/srfi/%3a27/mrg32k3a.scm
library:	()
path:		./.akku/lib/srfi/%3a64/testing-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a156/srfi-156-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a67/compare.scm
library:	()
path:		./.akku/lib/srfi/%3a78/check.scm
library:	()
path:		./.akku/lib/srfi/%3a128/128.body2.scm
library:	()
path:		./.akku/lib/srfi/%3a128/128.body1.scm
library:	()
path:		./.akku/lib/srfi/%3a13/srfi-13.scm
library:	()
path:		./.akku/lib/srfi/%3a54/srfi-54-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a133/vectors-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a141/srfi-141-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a115/regexp/boundary-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a115/regexp-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a14/srfi-14-base-char-sets.scm
library:	()
path:		./.akku/lib/srfi/%3a14/char-sets/inversion-list-impl.scm
library:	()
path:		./.akku/lib/srfi/%3a14/srfi-14.scm
library:	()
path:		./.akku/lib/srfi/%3a14/srfi-14-char-sets.scm
library:	()
path:		./.akku/lib/arew/json/body.scm
library:	()
path:		./.akku/lib/chibi/test.scm
library:	()
path:		./.akku/lib/chibi/term/ansi.scm
library:	()
path:		./.akku/lib/chibi/pathname.scm
library:	()
path:		./.akku/lib/chibi/optional.scm
library:	()
path:		./.akku/lib/chibi/string.scm
library:	()
path:		./.akku/lib/chibi/diff.scm
library:	()
path:		./tests/test-scheme-langserver.sps
library:	()
path:		./tests/util/test-dedupe.sps
library:	()
path:		./tests/util/test-binary-search.sps
library:	()
path:		./tests/util/test-association.sps
library:	()
path:		./tests/util/test-cartesian-product.sps
library:	()
path:		./tests/util/test-json.sps
library:	()
path:		./tests/util/test-contain.sps
library:	()
path:		./tests/util/test-sub-list.sps
library:	()
path:		./tests/output-identifier-types.sps
library:	()
path:		./tests/analysis/test-workspace.sps
library:	()
path:		./tests/analysis/dependency/test-shrinker.sps
library:	()
path:		./tests/analysis/dependency/rules/test-library-import.sps
library:	()
path:		./tests/analysis/dependency/test-file-linkage.sps
library:	()
path:		./tests/analysis/identifier/rules/test-define.sps
library:	()
path:		./tests/analysis/identifier/rules/test-syntax.sps
library:	()
path:		./tests/analysis/identifier/rules/test-lambda.sps
library:	()
path:		./tests/analysis/identifier/rules/test-let.sps
library:	()
path:		./tests/analysis/identifier/test-reference.sps
library:	()
path:		./tests/analysis/test-tokenizer.sps
library:	()
path:		./tests/analysis/package-manager/test-akku.sps
library:	()
path:		./tests/analysis/type/domain-specific-language/test-inner-type-checker.sps
library:	()
path:		./tests/analysis/type/domain-specific-language/test-interpreter.sps
library:	()
path:		./tests/analysis/type/substitutions/rules/test-let.sps
library:	()
path:		./tests/analysis/type/substitutions/rules/test-define.sps
library:	()
path:		./tests/analysis/type/substitutions/rules/test-trivial.sps
library:	()
path:		./tests/analysis/type/substitutions/rules/test-lambda.sps
library:	()
path:		./tests/analysis/type/substitutions/test-generator.sps
library:	()
path:		./tests/protocol/apis/test-document-symbol.sps
library:	()
path:		./tests/protocol/apis/test-completion.sps
library:	()
path:		./tests/protocol/apis/test-document-highlight.sps
library:	()
path:		./tests/protocol/apis/test-document-diagnostic.sps
library:	()
path:		./tests/protocol/apis/test-definition.sps
library:	()
path:		./tests/protocol/apis/test-hover.sps
library:	()
path:		./tests/protocol/apis/test-references.sps
library:	()
path:		./tests/protocol/apis/test-document-sync.sps
library:	()
path:		./tests/parallel-log-debug.sps
library:	()
path:		./tests/virtual-file-system/test-file-node.sps
library:	()
path:		./tests/virtual-file-system/test-document.sps
library:	()
path:		./tests/virtual-file-system/test-library-node.sps
library:	()
path:		./tests/virtual-file-system/test-index-node.sps
library:	()
path:		./tests/log-debug.sps
library:	()
path:		./bin/scheme-langserver.sps
library:	( industria der)
path:		./.akku/lib/industria/der.sls
identifier:	bit-string->integer
identifier:	bit-string-bit-set?
identifier:	bit-string-unused
identifier:	bit-string->bytevector
identifier:	data-value
identifier:	bit-string-length
identifier:	data-start-index
identifier:	data-length
identifier:	encode
identifier:	data-type
identifier:	decode
identifier:	translate
library:	( industria otr)
path:		./.akku/lib/industria/otr.sls
identifier:	otr-state-our-instance-tag
identifier:	otr-tag
identifier:	otr-state-mss-set!
identifier:	otr-state-symmetric-key
identifier:	otr-format-session-id
identifier:	otr-state-mss
identifier:	otr-state-secure-session-id
identifier:	otr-hash-public-key
identifier:	otr-state-their-dsa-key
identifier:	otr-state-our-dsa-key
identifier:	make-otr-state
type:		([identifier-refrence otr-state?] <- (inner:list? something? ... ) ) 
identifier:	otr-state-version
identifier:	otr-authenticate!
identifier:	otr-empty-queue!
identifier:	otr-send-encrypted!
identifier:	otr-send-symmetric-key-request!
identifier:	otr-message?
identifier:	otr-update!
library:	( industria base64)
path:		./.akku/lib/industria/base64.sls
identifier:	get-delimited-base64
identifier:	put-delimited-base64
identifier:	base64-alphabet
type:		[identifier-refrence string?] 
identifier:	base64url-alphabet
type:		[identifier-refrence string?] 
identifier:	base64-encode
identifier:	base64-decode
library:	( industria strings)
path:		./.akku/lib/industria/strings.sls
identifier:	string-split
library:	( industria bit-strings)
path:		./.akku/lib/industria/bit-strings.sls
identifier:	bit-string=?
identifier:	bit-string->integer
identifier:	bit-string-bit-set?
identifier:	bit-string-unused
identifier:	bit-string->bytevector
identifier:	integer->bit-string
identifier:	bit-string-length
identifier:	make-bit-string
type:		([identifier-refrence bit-string?] <- (inner:list? something? ... ) ) 
identifier:	bytevector->bit-string
type:		([identifier-refrence bit-string?] <- (inner:list? something? something? ) ) 
library:	( industria bytevectors)
path:		./.akku/lib/industria/bytevectors.sls
identifier:	sint->bytevector
identifier:	bytevector=?/constant-time
identifier:	bytevector->sint
identifier:	uint->bytevector
identifier:	bytevector-u8-index-right
identifier:	bytevector->uint
identifier:	subbytevector
identifier:	bytevector-u8-index
identifier:	bytevectors-length
identifier:	bytevector-concatenate
identifier:	bytevector-for-each
identifier:	bytevector-append
library:	( industria buffer)
path:		./.akku/lib/industria/buffer.sls
identifier:	read-u32
identifier:	read-u16
identifier:	read-u24
identifier:	buffer-shorten!
identifier:	read-u8
identifier:	buffer-reset!
identifier:	buffer-seek!
identifier:	buffer-bottom-set!
identifier:	buffer-length
identifier:	buffer-top-set!
identifier:	buffer-bottom
identifier:	buffer-data-set!
identifier:	buffer-top
identifier:	buffer-port-set!
identifier:	buffer-data
identifier:	buffer-copy!
identifier:	buffer-port
identifier:	make-buffer
type:		([identifier-refrence buffer?] <- (inner:list? something? ... ) ) 
identifier:	buffer-read!
library:	( industria tcp)
path:		./.akku/lib/industria/tcp.sls
identifier:	tcp-connect
type:		(void? <- (inner:list? something? something? ) ) 
library:	( industria tcp)
path:		./.akku/lib/industria/tcp.chezscheme.sls
identifier:	tcp-connect
library:	( industria crypto arcfour)
path:		./.akku/lib/industria/crypto/arcfour.sls
identifier:	arcfour-discard!
identifier:	clear-arcfour-keystream!
identifier:	expand-arcfour-key
identifier:	arcfour!
library:	( industria crypto math)
path:		./.akku/lib/industria/crypto/math.sls
identifier:	div-mod
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
identifier:	sqrt-mod
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? ) ) 
identifier:	invmod
identifier:	expt-mod
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? [identifier-refrence number?] ) ) 
library:	( industria crypto chacha20)
path:		./.akku/lib/industria/crypto/chacha20.sls
identifier:	chacha20-encrypt!
identifier:	chacha20-encrypt
identifier:	chacha20-block!
identifier:	chacha20-keystream
library:	( industria crypto dh)
path:		./.akku/lib/industria/crypto/dh.sls
identifier:	modp-group18-p
type:		[identifier-refrence number?] 
identifier:	modp-group18-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group17-p
type:		[identifier-refrence number?] 
identifier:	modp-group17-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group16-p
type:		[identifier-refrence number?] 
identifier:	modp-group16-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group15-p
type:		[identifier-refrence number?] 
identifier:	modp-group15-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group14-p
type:		[identifier-refrence number?] 
identifier:	modp-group14-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group5-p
type:		[identifier-refrence number?] 
identifier:	modp-group5-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group2-p
type:		[identifier-refrence number?] 
identifier:	modp-group2-g
type:		[identifier-refrence fixnum?] 
identifier:	modp-group1-p
type:		[identifier-refrence number?] 
identifier:	modp-group1-g
type:		[identifier-refrence fixnum?] 
identifier:	make-dh-secret
identifier:	expt-mod
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] something? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence real?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? [identifier-refrence number?] ) ) 
library:	( industria crypto des)
path:		./.akku/lib/industria/crypto/des.sls
identifier:	tdea-cbc-decipher!
identifier:	tdea-decipher!
identifier:	tdea-cbc-encipher!
identifier:	tdea-permute-key
type:		([identifier-refrence tdea-key?] <- (inner:list? something? something? something? ) ) 
identifier:	tdea-encipher!
identifier:	permute-key
identifier:	des-crypt
identifier:	des-key-bad-parity?
identifier:	des!
library:	( industria crypto rsa)
path:		./.akku/lib/industria/crypto/rsa.sls
identifier:	rsa-pkcs1-encrypt-digest
identifier:	rsa-pkcs1-encrypt-signature
identifier:	rsa-pkcs1-decrypt-digest
identifier:	rsa-pkcs1-decrypt
identifier:	rsa-pkcs1-decrypt-signature
identifier:	rsa-decrypt/blinding
identifier:	rsa-pkcs1-encrypt
identifier:	rsa-encrypt
identifier:	rsa-decrypt
identifier:	rsa-private-key-from-bytevector
identifier:	rsa-private-key-from-pem-file
identifier:	rsa-private-key-d
identifier:	rsa-private->public
identifier:	rsa-private-key-coefficient
identifier:	rsa-private-key-n
identifier:	rsa-private-key-exponent1
identifier:	rsa-private-key-exponent2
identifier:	rsa-private-key-prime1
identifier:	rsa-private-key-prime2
identifier:	rsa-private-key-public-exponent
identifier:	rsa-private-key-private-exponent
identifier:	rsa-private-key-version
identifier:	rsa-private-key-modulus
identifier:	make-rsa-private-key
type:		([identifier-refrence rsa-private-key?] <- (inner:list? something? ... ) ) 
identifier:	rsa-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	rsa-public-key-length
identifier:	rsa-public-key-byte-length
identifier:	rsa-public-key-e
identifier:	rsa-public-key-from-bytevector
identifier:	rsa-public-key-public-exponent
identifier:	rsa-public-key-n
identifier:	rsa-public-key=?
identifier:	rsa-public-key-modulus
identifier:	make-rsa-public-key
type:		([identifier-refrence rsa-public-key?] <- (inner:list? something? ... ) ) 
identifier:	rsa-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria crypto blowfish)
path:		./.akku/lib/industria/crypto/blowfish.sls
identifier:	blowfish-cbc-decrypt!
identifier:	clear-blowfish-schedule!
identifier:	blowfish-cbc-encrypt!
identifier:	reverse-blowfish-schedule
identifier:	blowfish-decrypt!
identifier:	expand-blowfish-key
identifier:	blowfish-encrypt!
library:	( industria crypto entropy)
path:		./.akku/lib/industria/crypto/entropy.sls
identifier:	random-integer
identifier:	random-positive-byte
type:		([identifier-refrence number?] <- (inner:list? ) ) 
identifier:	string-random-case
identifier:	make-random-bytevector
identifier:	bytevector-randomize!
library:	( industria crypto dsa)
path:		./.akku/lib/industria/crypto/dsa.sls
identifier:	dsa-create-signature
identifier:	dsa-signature-from-bytevector
identifier:	dsa-verify-signature
identifier:	dsa-private-key-from-bytevector
identifier:	dsa-private-key-from-pem-file
identifier:	dsa-private-key-x
identifier:	dsa-private->public
identifier:	dsa-private-key-g
identifier:	dsa-private-key-y
identifier:	dsa-private-key-p
identifier:	dsa-private-key-q
identifier:	make-dsa-private-key
type:		([identifier-refrence dsa-private-key?] <- (inner:list? something? ... ) ) 
identifier:	dsa-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	dsa-public-key-y
identifier:	dsa-public-key-length
identifier:	dsa-public-key-q
identifier:	dsa-public-key-g
identifier:	dsa-public-key=?
identifier:	dsa-public-key-p
identifier:	make-dsa-public-key
type:		([identifier-refrence dsa-public-key?] <- (inner:list? something? ... ) ) 
identifier:	dsa-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria crypto eddsa)
path:		./.akku/lib/industria/crypto/eddsa.sls
identifier:	ed25519-verify
identifier:	eddsa-private-key-from-bytevector
identifier:	ed25519-sign
identifier:	ed25519-private-key-secret
identifier:	ed25519-private->public
identifier:	make-ed25519-private-key
type:		([identifier-refrence ed25519-private-key?] <- (inner:list? something? ... ) ) 
identifier:	ed25519-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-eddsa-private-key
type:		([identifier-refrence eddsa-private-key?] <- (inner:list? something? ... ) ) 
identifier:	eddsa-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ed25519-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ed25519-public-key=?
identifier:	ed25519-public-key-value
identifier:	make-ed25519-public-key
type:		([identifier-refrence ed25519-public-key?] <- (inner:list? something? ... ) ) 
identifier:	eddsa-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eddsa-public-key-length
type:		([identifier-refrence number?] <- (inner:list? something? ) ) 
library:	( industria crypto ec)
path:		./.akku/lib/industria/crypto/ec.sls
identifier:	->elliptic-point
type:		(void? <- (inner:list? something? something? ) ) 
identifier:	elliptic-point->bytevector
identifier:	bytevector->elliptic-point
identifier:	integer->elliptic-point
identifier:	ec-
identifier:	ec*
identifier:	nistp521
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	ec+
identifier:	nistp384
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	secp521r1
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	nistp256
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	secp384r1
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	elliptic-curve=?
identifier:	secp256r1
type:		[identifier-refrence elliptic-prime-curve?] 
identifier:	elliptic-curve-h
identifier:	elliptic-prime-curve-p
identifier:	elliptic-curve-G
identifier:	elliptic-curve-n
identifier:	elliptic-curve-a
identifier:	elliptic-curve-b
identifier:	make-elliptic-prime-curve
type:		([identifier-refrence elliptic-prime-curve?] <- (inner:list? something? ... ) ) 
identifier:	elliptic-prime-curve?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria crypto ecdh)
path:		./.akku/lib/industria/crypto/ecdh.sls
identifier:	X25519
identifier:	X448
identifier:	ecdh-curve25519
identifier:	ecdh-curve448
identifier:	make-ecdh-curve25519-secret
identifier:	make-ecdh-curve448-secret
library:	( industria crypto private chacha20)
path:		./.akku/lib/industria/crypto/private/chacha20.sls
identifier:	rot32
identifier:	add32
identifier:	xor32
library:	( industria crypto private aes)
path:		./.akku/lib/industria/crypto/private/aes.sls
identifier:	GFexpt
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
identifier:	GF*
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? [identifier-refrence number?] ) ) 
identifier:	S-box
identifier:	inv-S-box
library:	( industria crypto aes)
path:		./.akku/lib/industria/crypto/aes.sls
identifier:	aes-gcm-decrypt!?
identifier:	make-aes-gcm-state
type:		([identifier-refrence aes-gcm-state?] <- (inner:list? something? ... ) ) 
identifier:	aes-gcm-encrypt!
identifier:	aes-cbc-encrypt!
identifier:	aes-cbc-decrypt!
identifier:	clear-aes-schedule!
identifier:	aes-ctr!
identifier:	reverse-aes-schedule
identifier:	aes-decrypt!
identifier:	expand-aes-key
identifier:	aes-encrypt!
library:	( industria crypto ecdsa)
path:		./.akku/lib/industria/crypto/ecdsa.sls
identifier:	ecdsa-sha-2-create-signature
identifier:	ecdsa-sha-2-private-key-from-bytevector
identifier:	ecdsa-sha-2-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ecdsa-sha-2-verify-signature
identifier:	ecdsa-sha-2-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-ecdsa-sha-2-private-key
type:		([identifier-refrence ecdsa-sha-2-private-key?] <- (inner:list? something? ... ) ) 
identifier:	ecdsa-signature-to-bytevector
identifier:	make-ecdsa-sha-2-public-key
type:		([identifier-refrence ecdsa-sha-2-public-key?] <- (inner:list? something? ... ) ) 
identifier:	ecdsa-create-signature
identifier:	ecdsa-signature-from-bytevector
identifier:	ecdsa-private-key-from-bytevector
identifier:	ecdsa-verify-signature
identifier:	ecdsa-private-key-Q
identifier:	ecdsa-private->public
type:		([identifier-refrence ecdsa-public-key?] <- (inner:list? something? ) ) 
type:		([identifier-refrence ecdsa-sha-2-public-key?] <- (inner:list? something? ) ) 
identifier:	ecdsa-private-key-curve
identifier:	ecdsa-private-key-d
identifier:	make-ecdsa-private-key
type:		([identifier-refrence ecdsa-private-key?] <- (inner:list? something? ... ) ) 
identifier:	ecdsa-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ecdsa-public-key-Q
identifier:	ecdsa-public-key-length
identifier:	ecdsa-public-key=?
identifier:	ecdsa-public-key-curve
identifier:	make-ecdsa-public-key
type:		([identifier-refrence ecdsa-public-key?] <- (inner:list? something? ... ) ) 
identifier:	ecdsa-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria openpgp)
path:		./.akku/lib/industria/openpgp.sls
identifier:	openpgp-public-key-id
identifier:	openpgp-public-key-fingerprint
identifier:	openpgp-format-fingerprint
identifier:	openpgp-public-key-subkey?
identifier:	openpgp-public-key-value
identifier:	openpgp-user-attribute?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	openpgp-public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	openpgp-user-id?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	openpgp-user-id-value
identifier:	openpgp-signature-creation-time
identifier:	openpgp-signature-expiration-time
identifier:	openpgp-signature-public-key-algorithm
identifier:	openpgp-signature-hash-algorithm
identifier:	openpgp-signature?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	openpgp-signature-issuer
identifier:	verify-openpgp-signature
identifier:	port-ascii-armored?
identifier:	get-openpgp-detached-signature/ascii
identifier:	get-openpgp-packet
identifier:	get-openpgp-keyring
identifier:	get-openpgp-keyring/keyid
library:	( industria ssh)
path:		./.akku/lib/industria/ssh.sls
identifier:	ssh-debugging
identifier:	ssh-debugging-port
identifier:	preferred-languages-client->server
identifier:	preferred-languages-server->client
identifier:	preferred-compression-algorithms-client->server
identifier:	preferred-compression-algorithms-server->client
identifier:	preferred-mac-algorithms-client->server
identifier:	preferred-mac-algorithms-server->client
identifier:	preferred-encryption-algorithms-client->server
identifier:	preferred-encryption-algorithms-server->client
identifier:	preferred-kex-algorithms
identifier:	preferred-server-host-key-algorithms
identifier:	identification-software-version
identifier:	identification-comments
identifier:	flush-ssh-output
type:		([identifier-refrence flonum?] <- (inner:list? [identifier-refrence ssh-conn?] ) ) 
identifier:	identification-protocol-version
identifier:	get-ssh
identifier:	close-ssh
identifier:	ssh-error
identifier:	put-ssh
identifier:	ssh-key-exchange
identifier:	ssh-conn-registrar
identifier:	key-exchange-packet?
identifier:	process-key-exchange-packet
type:		(([identifier-refrence boolean?] <- (inner:list? something? ) ) <- (inner:list? something? something? ) ) 
type:		((([identifier-refrence symbol?] <- (inner:list? something? ) ) <- (inner:list? something? ) ) <- (inner:list? something? something? ) ) 
type:		(([identifier-refrence boolean?] <- (inner:list? something? ) ) <- (inner:list? [identifier-refrence ssh-conn?] something? ) ) 
type:		((([identifier-refrence symbol?] <- (inner:list? something? ) ) <- (inner:list? something? ) ) <- (inner:list? [identifier-refrence ssh-conn?] something? ) ) 
identifier:	ssh-key-re-exchange
identifier:	build-kexinit-packet
identifier:	ssh-conn-host-key
identifier:	ssh-conn-session-id
identifier:	ssh-conn-peer-identification
identifier:	ssh-conn-peer-kexinit
identifier:	make-ssh-client
type:		([identifier-refrence ssh-conn?] <- (inner:list? something? something? ) ) 
identifier:	make-ssh-server
type:		([identifier-refrence ssh-conn?] <- (inner:list? something? something? something? ) ) 
library:	( industria ssh algorithms)
path:		./.akku/lib/industria/ssh/algorithms.sls
identifier:	preferred-compression-algorithms-client->server
identifier:	preferred-compression-algorithms-server->client
identifier:	preferred-mac-algorithms-client->server
identifier:	preferred-mac-algorithms-server->client
identifier:	preferred-encryption-algorithms-client->server
identifier:	preferred-encryption-algorithms-server->client
identifier:	preferred-kex-algorithms
identifier:	preferred-server-host-key-algorithms
identifier:	make-key-exchanger
identifier:	register-key-exchange
identifier:	make-read-mac
identifier:	make-write-mac
identifier:	make-reader
identifier:	make-writer
library:	( industria ssh connection)
path:		./.akku/lib/industria/ssh/connection.sls
identifier:	SSH-EXTENDED-DATA-STDERR
type:		[identifier-refrence fixnum?] 
identifier:	SSH-OPEN-UNKNOWN-CHANNEL-TYPE
type:		[identifier-refrence fixnum?] 
identifier:	SSH-OPEN-RESOURCE-SHORTAGE
type:		[identifier-refrence fixnum?] 
identifier:	SSH-OPEN-ADMINISTRATIVELY-PROHIBITED
type:		[identifier-refrence fixnum?] 
identifier:	SSH-OPEN-CONNECT-FAILED
type:		[identifier-refrence fixnum?] 
identifier:	terminal-modes->bytevector
identifier:	bytevector->terminal-modes
identifier:	make-channel-window-adjust
type:		([identifier-refrence channel-window-adjust?] <- (inner:list? something? ... ) ) 
identifier:	channel-window-adjust-amount
identifier:	channel-request/xon-xoff-client-can-do?
identifier:	channel-window-adjust?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-request/xon-xoff?
identifier:	make-channel-request/xon-xoff
identifier:	channel-request/x11-req-cookie
identifier:	channel-request/x11-req-screen
identifier:	channel-request/x11-req-single-connection?
identifier:	channel-request/x11-req-protocol
identifier:	channel-request/x11-req?
identifier:	make-channel-request/x11-req
identifier:	channel-request/window-change-width
identifier:	channel-request/window-change-height
identifier:	channel-request/window-change-columns
identifier:	channel-request/window-change-rows
identifier:	channel-request/window-change?
identifier:	make-channel-request/window-change
identifier:	make-channel-request/subsystem
identifier:	channel-request/subsystem-name
identifier:	channel-request/signal-name
identifier:	channel-request/subsystem?
identifier:	channel-request/signal?
identifier:	make-channel-request/signal
identifier:	channel-request/shell?
identifier:	make-channel-request/shell
identifier:	channel-request/pty-req-height
identifier:	channel-request/pty-req-modes
identifier:	channel-request/pty-req-rows
identifier:	channel-request/pty-req-width
identifier:	channel-request/pty-req-term
identifier:	channel-request/pty-req-columns
identifier:	channel-request/pty-req?
identifier:	make-channel-request/pty-req
identifier:	make-channel-request/exit-status
identifier:	channel-request/exit-status-value
identifier:	channel-request/exit-signal-language
identifier:	channel-request/exit-status?
identifier:	channel-request/exit-signal-core-dumped?
identifier:	channel-request/exit-signal-message
identifier:	make-channel-request/exit-signal
identifier:	channel-request/exit-signal-name
identifier:	channel-request/exec-command
identifier:	channel-request/exit-signal?
identifier:	channel-request/exec?
identifier:	make-channel-request/exec
identifier:	channel-request/env-name
identifier:	channel-request/env-value
identifier:	channel-request/env?
identifier:	make-channel-request/env
identifier:	make-channel-request/break
identifier:	channel-request/break-length
identifier:	channel-request-want-reply?
identifier:	channel-request/break?
identifier:	make-channel-request
type:		([identifier-refrence channel-request?] <- (inner:list? something? ... ) ) 
identifier:	channel-request-type
identifier:	make-channel-failure
type:		([identifier-refrence channel-failure?] <- (inner:list? something? ... ) ) 
identifier:	channel-request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-success
type:		([identifier-refrence channel-success?] <- (inner:list? something? ... ) ) 
identifier:	channel-failure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-close
type:		([identifier-refrence channel-close?] <- (inner:list? something? ... ) ) 
identifier:	channel-success?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-eof
type:		([identifier-refrence channel-eof?] <- (inner:list? something? ... ) ) 
identifier:	channel-close?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-extended-data-value
identifier:	channel-eof?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-extended-data?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-extended-data
type:		([identifier-refrence channel-extended-data?] <- (inner:list? something? ... ) ) 
identifier:	make-channel-data
type:		([identifier-refrence channel-data?] <- (inner:list? something? ... ) ) 
identifier:	channel-data-value
identifier:	channel-open-confirmation-maximum-packet-size
identifier:	channel-data?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open-confirmation-sender
identifier:	channel-open-confirmation-initial-window-size
identifier:	channel-open-confirmation?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-open-confirmation
type:		([identifier-refrence channel-open-confirmation?] <- (inner:list? something? ... ) ) 
identifier:	channel-packet?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-packet-recipient
identifier:	channel-open-failure-description
identifier:	channel-open-failure-language
identifier:	make-channel-open-failure
type:		([identifier-refrence channel-open-failure?] <- (inner:list? something? ... ) ) 
identifier:	channel-open-failure-reason-code
identifier:	channel-open/x11-originator-port
identifier:	channel-open-failure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-channel-open/x11
type:		([identifier-refrence channel-open/x11?] <- (inner:list? something? ... ) ) 
identifier:	channel-open/x11-originator-address
identifier:	make-channel-open/session
type:		([identifier-refrence channel-open/session?] <- (inner:list? something? ... ) ) 
identifier:	channel-open/x11?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open/forwarded-tcpip-originator-port
identifier:	channel-open/session?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open/forwarded-tcpip-connected-port
identifier:	channel-open/forwarded-tcpip-originator-address
identifier:	make-channel-open/forwarded-tcpip
type:		([identifier-refrence channel-open/forwarded-tcpip?] <- (inner:list? something? ... ) ) 
identifier:	channel-open/forwarded-tcpip-connected-address
identifier:	channel-open/direct-tcpip-originator-port
identifier:	channel-open/forwarded-tcpip?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open/direct-tcpip-connect-port
identifier:	channel-open/direct-tcpip-originator-address
identifier:	make-channel-open/direct-tcpip
type:		([identifier-refrence channel-open/direct-tcpip?] <- (inner:list? something? ... ) ) 
identifier:	channel-open/direct-tcpip-connect-address
identifier:	channel-open-maximum-packet-size
identifier:	channel-open/direct-tcpip?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open-sender
identifier:	channel-open-initial-window-size
identifier:	channel-open?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	channel-open-type
identifier:	request-failure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-request-failure
type:		([identifier-refrence request-failure?] <- (inner:list? something? ... ) ) 
identifier:	make-request-success
type:		([identifier-refrence request-success?] <- (inner:list? something? ... ) ) 
identifier:	request-success-data
identifier:	global-request/cancel-tcpip-forward-port
identifier:	request-success?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	global-request/cancel-tcpip-forward?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	global-request/cancel-tcpip-forward-address
identifier:	global-request/tcpip-forward-port
identifier:	make-global-request/cancel-tcpip-forward
type:		([identifier-refrence global-request/cancel-tcpip-forward?] <- (inner:list? something? ... ) ) 
identifier:	global-request/tcpip-forward?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	global-request/tcpip-forward-address
identifier:	global-request-want-reply?
identifier:	make-global-request/tcpip-forward
type:		([identifier-refrence global-request/tcpip-forward?] <- (inner:list? something? ... ) ) 
identifier:	global-request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	global-request-type
identifier:	register-connection
identifier:	make-global-request
type:		([identifier-refrence global-request?] <- (inner:list? something? ... ) ) 
library:	( industria ssh userauth)
path:		./.akku/lib/industria/ssh/userauth.sls
identifier:	sign-userauth-request/public-key
identifier:	userauth-request/public-key-algorithm
identifier:	userauth-request/public-key-key
identifier:	make-userauth-request/public-key
type:		([identifier-refrence userauth-request/public-key?] <- (inner:list? something? ... ) ) 
identifier:	userauth-request/public-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-public-key-ok-algorithm
identifier:	userauth-public-key-ok-key
identifier:	make-userauth-public-key-ok
type:		([identifier-refrence userauth-public-key-ok?] <- (inner:list? something? ... ) ) 
identifier:	userauth-public-key-ok?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-request/public-key-query-algorithm
identifier:	userauth-request/public-key-query-key
identifier:	make-userauth-request/public-key-query
type:		([identifier-refrence userauth-request/public-key-query?] <- (inner:list? something? ... ) ) 
identifier:	userauth-request/public-key-query?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-request/password-change-old
identifier:	userauth-request/password-change-new
identifier:	make-userauth-request/password-change
type:		([identifier-refrence userauth-request/password-change?] <- (inner:list? something? ... ) ) 
identifier:	userauth-request/password-change?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-password-changereq-prompt
identifier:	userauth-password-changereq-language
identifier:	make-userauth-password-changereq
type:		([identifier-refrence userauth-password-changereq?] <- (inner:list? something? ... ) ) 
identifier:	userauth-password-changereq?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-request/password?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-request/password-value
identifier:	userauth-banner-language
identifier:	make-userauth-request/password
type:		([identifier-refrence userauth-request/password?] <- (inner:list? something? ... ) ) 
identifier:	userauth-banner?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-banner-message
identifier:	userauth-success?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-userauth-banner
type:		([identifier-refrence userauth-banner?] <- (inner:list? something? ... ) ) 
identifier:	userauth-failure-partial?
identifier:	make-userauth-success
type:		([identifier-refrence userauth-success?] <- (inner:list? something? ... ) ) 
identifier:	userauth-failure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	userauth-failure-can-continue
identifier:	userauth-request-method
identifier:	make-userauth-failure
type:		([identifier-refrence userauth-failure?] <- (inner:list? something? ... ) ) 
identifier:	userauth-request-username
identifier:	userauth-request-service
identifier:	make-userauth-request
type:		([identifier-refrence userauth-request?] <- (inner:list? something? ... ) ) 
identifier:	userauth-request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	register-userauth-password
identifier:	deregister-userauth
identifier:	register-userauth
identifier:	register-userauth-public-key
library:	( industria ssh kexdh)
path:		./.akku/lib/industria/ssh/kexdh.sls
identifier:	kexdh-reply-signature
identifier:	make-kex-dh-key-exchanger
identifier:	kexdh-reply-f
identifier:	kexdh-reply-host-key
identifier:	make-kexdh-reply
type:		([identifier-refrence kexdh-reply?] <- (inner:list? something? ... ) ) 
identifier:	kexdh-reply?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kexdh-init?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kexdh-init-e
identifier:	register-kexdh
identifier:	make-kexdh-init
type:		([identifier-refrence kexdh-init?] <- (inner:list? something? ... ) ) 
library:	( industria ssh public-keys)
path:		./.akku/lib/industria/ssh/public-keys.sls
identifier:	ssh-public-key-algorithm
identifier:	ssh-public-key-algorithm*
identifier:	ssh-public-key-fingerprint
identifier:	ssh-public-key-random-art
identifier:	get-ssh-public-key
identifier:	ssh-public-key->bytevector
library:	( industria ssh private)
path:		./.akku/lib/industria/ssh/private.sls
identifier:	prf-sha-1
identifier:	prf-sha-256
identifier:	algorithm-can-verify?
identifier:	private->public
type:		(void? <- (inner:list? something? ) ) 
identifier:	hash-kex-data
identifier:	algorithm-can-sign?
identifier:	make-signature
identifier:	verify-signature
identifier:	ssh-packet
identifier:	parse-signature
identifier:	ssh-packet?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ssh-packet-type
library:	( industria ssh private serialize)
path:		./.akku/lib/industria/ssh/private/serialize.sls
identifier:	put-string
identifier:	get-bytevector
identifier:	get-string
identifier:	get-uint32
identifier:	get-mpint
identifier:	put-mpint
identifier:	integer->mpint
identifier:	put-bvstring
identifier:	put-name-list
identifier:	read-mpint
identifier:	put-record
identifier:	read-string
identifier:	read-name-list
type:		((inner:list? ) <- (inner:list? something? ) ) 
identifier:	read-uint32
identifier:	read-bytevector
identifier:	get-record
identifier:	read-byte
library:	( industria ssh kex-dh-gex)
path:		./.akku/lib/industria/ssh/kex-dh-gex.sls
identifier:	make-kex-dh-gex-key-exchanger
identifier:	kex-dh-gex-reply-f
identifier:	kex-dh-gex-reply-signature
identifier:	kex-dh-gex-reply?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-dh-gex-reply-host-key
identifier:	kex-dh-gex-init-e
identifier:	make-kex-dh-gex-reply
type:		([identifier-refrence kex-dh-gex-reply?] <- (inner:list? something? ... ) ) 
identifier:	make-kex-dh-gex-init
type:		([identifier-refrence kex-dh-gex-init?] <- (inner:list? something? ... ) ) 
identifier:	kex-dh-gex-init?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-dh-gex-group-p
identifier:	kex-dh-gex-group-g
identifier:	make-kex-dh-gex-group
type:		([identifier-refrence kex-dh-gex-group?] <- (inner:list? something? ... ) ) 
identifier:	kex-dh-gex-group?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-dh-gex-request-n
identifier:	kex-dh-gex-request-max
identifier:	kex-dh-gex-request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-dh-gex-request-min
identifier:	kex-dh-gex-request-old-n
identifier:	make-kex-dh-gex-request
type:		([identifier-refrence kex-dh-gex-request?] <- (inner:list? something? ... ) ) 
identifier:	make-kex-dh-gex-request-old
type:		([identifier-refrence kex-dh-gex-request-old?] <- (inner:list? something? ... ) ) 
identifier:	kex-dh-gex-request-old?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	register-kex-dh-gex
identifier:	select-kex-dh-gex-group
library:	( industria ssh private-keys)
path:		./.akku/lib/industria/ssh/private-keys.sls
identifier:	openssh-private-key-comment
identifier:	openssh-private-key-public
identifier:	openssh-private-key-private
identifier:	get-ssh-private-keys
identifier:	openssh-private-key?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria ssh kex-ecdh)
path:		./.akku/lib/industria/ssh/kex-ecdh.sls
identifier:	kex-ecdh-reply-signature
identifier:	make-kex-ecdh-key-exchanger
identifier:	kex-ecdh-reply-K_S
identifier:	kex-ecdh-reply-Q_S
identifier:	make-kex-ecdh-reply
type:		([identifier-refrence kex-ecdh-reply?] <- (inner:list? something? ... ) ) 
identifier:	kex-ecdh-reply?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-ecdh-init?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	kex-ecdh-init-Q_C
identifier:	register-kex-ecdh
identifier:	make-kex-ecdh-init
type:		([identifier-refrence kex-ecdh-init?] <- (inner:list? something? ... ) ) 
library:	( industria ssh random-art)
path:		./.akku/lib/industria/ssh/random-art.sls
identifier:	random-art-style-unicode
type:		(inner:vector? [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] ) 
identifier:	random-art-style-ascii
type:		(inner:vector? [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] ) 
identifier:	random-art-style-ascii-2
type:		(inner:vector? [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence string?] [identifier-refrence char?] [identifier-refrence char?] [identifier-refrence string?] ) 
identifier:	random-art
identifier:	random-art-box-style
library:	( industria ssh transport)
path:		./.akku/lib/industria/ssh/transport.sls
identifier:	SSH-DISCONNECT-ILLEGAL-USER-NAME
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-AUTH-CANCELLED-BY-USER
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-NO-MORE-AUTH-METHODS-AVAILABLE
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-BY-APPLICATION
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-TOO-MANY-CONNECTIONS
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-HOST-KEY-NOT-VERIFIABLE
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-CONNECTION-LOST
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-SERVICE-NOT-AVAILABLE
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-PROTOCOL-VERSION-NOT-SUPPORTED
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-MAC-ERROR
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-COMPRESSION-ERROR
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-KEY-EXCHANGE-FAILED
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-RESERVED
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-HOST-NOT-ALLOWED-TO-CONNECT
type:		[identifier-refrence fixnum?] 
identifier:	SSH-DISCONNECT-PROTOCOL-ERROR
type:		[identifier-refrence fixnum?] 
identifier:	newkeys?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-newkeys
type:		([identifier-refrence newkeys?] <- (inner:list? something? ... ) ) 
identifier:	kexinit-first-kex-packet-follows?
identifier:	kexinit-reserved
identifier:	kexinit-languages-client-to-server
identifier:	kexinit-languages-server-to-client
identifier:	kexinit-compression-algorithms-client-to-server
identifier:	kexinit-compression-algorithms-server-to-client
identifier:	kexinit-mac-algorithms-client-to-server
identifier:	kexinit-mac-algorithms-server-to-client
identifier:	kexinit-encryption-algorithms-client-to-server
identifier:	kexinit-encryption-algorithms-server-to-client
identifier:	kexinit-kex-algorithms
identifier:	kexinit-server-host-key-algorithms
identifier:	make-kexinit
type:		([identifier-refrence kexinit?] <- (inner:list? something? ... ) ) 
identifier:	kexinit-cookie
identifier:	kexinit?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	put-kexinit
identifier:	make-service-accept
type:		([identifier-refrence service-accept?] <- (inner:list? something? ... ) ) 
identifier:	service-accept-name
identifier:	service-request-name
identifier:	service-accept?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	service-request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-service-request
type:		([identifier-refrence service-request?] <- (inner:list? something? ... ) ) 
identifier:	debug-message
identifier:	debug-language
identifier:	make-debug
type:		([identifier-refrence debug?] <- (inner:list? something? ... ) ) 
identifier:	debug-always-display?
identifier:	unimplemented-sequence-number
identifier:	debug?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	unimplemented?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-unimplemented
type:		([identifier-refrence unimplemented?] <- (inner:list? something? ... ) ) 
identifier:	ignore?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-ignore
type:		([identifier-refrence ignore?] <- (inner:list? something? ... ) ) 
identifier:	disconnect-message
identifier:	disconnect-language
identifier:	make-disconnect
type:		([identifier-refrence disconnect?] <- (inner:list? something? ... ) ) 
identifier:	disconnect-code
identifier:	register-transport
identifier:	disconnect?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( industria password)
path:		./.akku/lib/industria/password.sls
identifier:	crypt
library:	( industria dns)
path:		./.akku/lib/industria/dns.sls
identifier:	make-normal-dns-query
identifier:	falsified-dns-reply?
identifier:	dns-question=?
identifier:	make-edns-resource
identifier:	dns-question-type
identifier:	dns-question-class
identifier:	dns-question?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	dns-question-name
identifier:	dns-message-additional
identifier:	make-dns-question
type:		([identifier-refrence dns-question?] <- (inner:list? something? ... ) ) 
identifier:	dns-message-answer
identifier:	dns-message-authority
identifier:	dns-message-flags
identifier:	dns-message-question
identifier:	dns-message-opcode
identifier:	dns-message-rcode
identifier:	dns-message?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	dns-message-id
identifier:	string->dns-labels
identifier:	make-dns-message
type:		([identifier-refrence dns-message?] <- (inner:list? something? ... ) ) 
identifier:	dns-labels->string
identifier:	dns-labels->ustring
identifier:	parse-dns-message
identifier:	get-bytevector-dns
identifier:	put-dns-message
identifier:	put-dns-message/delimited
identifier:	print-dns-message
identifier:	print-dns-resource
library:	( industria dns private)
path:		./.akku/lib/industria/dns/private.sls
identifier:	display-dns-label
identifier:	display-dns-string
identifier:	put-labels
identifier:	parse-labels
library:	( industria dns punycode)
path:		./.akku/lib/industria/dns/punycode.sls
identifier:	punycode->string
identifier:	string->punycode
library:	( industria dns types)
path:		./.akku/lib/industria/dns/types.sls
identifier:	dns-resource/TSIG-other-data
identifier:	dns-resource/TSIG-original-id
identifier:	dns-resource/TSIG-error
identifier:	dns-resource/TSIG-fudge
identifier:	dns-resource/TSIG-mac
identifier:	dns-resource/TSIG-algorithm
identifier:	dns-resource/TSIG-time
identifier:	make-dns-resource/TSIG
identifier:	dns-resource/TSIG?
identifier:	dns-resource/DNSKEY-key
identifier:	dns-resource/DNSKEY-key-tag
identifier:	dns-resource/DNSKEY-protocol
identifier:	dns-resource/DNSKEY-algorithm
identifier:	dns-resource/DNSKEY?
identifier:	dns-resource/DNSKEY-flags
identifier:	dns-resource/NSEC-types
identifier:	make-dns-resource/DNSKEY
identifier:	dns-resource/NSEC?
identifier:	dns-resource/NSEC-name
identifier:	dns-resource/RRSIG-signature
identifier:	make-dns-resource/NSEC
identifier:	dns-resource/RRSIG-key-tag
identifier:	dns-resource/RRSIG-signer
identifier:	dns-resource/RRSIG-expiration
identifier:	dns-resource/RRSIG-inception
identifier:	dns-resource/RRSIG-labels
identifier:	dns-resource/RRSIG-original-ttl
identifier:	dns-resource/RRSIG-type
identifier:	dns-resource/RRSIG-algorithm
identifier:	make-dns-resource/RRSIG
identifier:	dns-resource/RRSIG?
identifier:	dns-resource/SSHFP-type
identifier:	dns-resource/SSHFP-fingerprint
identifier:	dns-resource/SSHFP?
identifier:	dns-resource/SSHFP-algorithm
identifier:	dns-resource/DS-digest
identifier:	make-dns-resource/SSHFP
identifier:	dns-resource/DS-algorithm
identifier:	dns-resource/DS-digest-type
identifier:	dns-resource/DS?
identifier:	dns-resource/DS-key-tag
identifier:	dns-resource/DNAME-name
identifier:	make-dns-resource/DS
identifier:	make-dns-resource/DNAME
identifier:	dns-resource/DNAME?
identifier:	dns-resource/CERT-algorithm
identifier:	dns-resource/CERT-certificate
identifier:	dns-resource/CERT-type
identifier:	dns-resource/CERT-key-tag
identifier:	make-dns-resource/CERT
identifier:	dns-resource/CERT?
identifier:	dns-resource/SRV-port
identifier:	dns-resource/SRV-target
identifier:	dns-resource/SRV-priority
identifier:	dns-resource/SRV-weight
identifier:	make-dns-resource/SRV
identifier:	dns-resource/SRV?
identifier:	dns-resource/AAAA?
identifier:	dns-resource/AAAA-address
identifier:	dns-resource/MX-exchange
identifier:	make-dns-resource/AAAA
identifier:	dns-resource/MX?
identifier:	dns-resource/MX-preference
identifier:	dns-resource/SOA-minimum
identifier:	make-dns-resource/MX
identifier:	dns-resource/SOA-retry
identifier:	dns-resource/SOA-expire
identifier:	dns-resource/SOA-serial
identifier:	dns-resource/SOA-refresh
identifier:	dns-resource/SOA-mname
identifier:	dns-resource/SOA-rname
identifier:	make-dns-resource/SOA
identifier:	dns-resource/SOA?
identifier:	dns-resource/CNAME?
identifier:	dns-resource/CNAME-name
identifier:	dns-resource/NS-name
identifier:	make-dns-resource/CNAME
identifier:	make-dns-resource/NS
identifier:	dns-resource/NS?
identifier:	dns-resource/A?
identifier:	dns-resource/A-address
identifier:	dns-resource/raw-rdata
identifier:	make-dns-resource/A
identifier:	make-dns-resource/raw
type:		([identifier-refrence dns-resource/raw?] <- (inner:list? something? ... ) ) 
identifier:	dns-resource/raw?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	dns-resource-class
identifier:	dns-resource-ttl
identifier:	dns-resource-name
identifier:	dns-resource-type
identifier:	dns-resource-print
identifier:	dns-resource?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	dns-resource-wire-read
identifier:	dns-resource-wire-write
library:	( industria dns numbers)
path:		./.akku/lib/industria/dns/numbers.sls
identifier:	edns-flag-DO
type:		[identifier-refrence fixnum?] 
identifier:	edns-flag-dnssec-answer-ok
type:		[identifier-refrence fixnum?] 
identifier:	dnskey-flag-revoke
identifier:	dnskey-flag-sep
identifier:	flag-checking-disabled
type:		[identifier-refrence fixnum?] 
identifier:	dnskey-flag-zone
identifier:	flag-recursion-available
type:		[identifier-refrence fixnum?] 
identifier:	flag-authentic-data
type:		[identifier-refrence fixnum?] 
identifier:	flag-truncated
type:		[identifier-refrence fixnum?] 
identifier:	flag-recursion-desired
type:		[identifier-refrence fixnum?] 
identifier:	flag-response
type:		[identifier-refrence fixnum?] 
identifier:	flag-authoritative-answer
type:		[identifier-refrence fixnum?] 
identifier:	flag-CD
type:		[identifier-refrence fixnum?] 
identifier:	flag-mask
type:		[identifier-refrence fixnum?] 
identifier:	flag-Z
type:		[identifier-refrence fixnum?] 
identifier:	flag-AD
type:		[identifier-refrence fixnum?] 
identifier:	flag-RD
type:		[identifier-refrence fixnum?] 
identifier:	flag-RA
type:		[identifier-refrence fixnum?] 
identifier:	flag-AA
type:		[identifier-refrence fixnum?] 
identifier:	flag-TC
type:		[identifier-refrence fixnum?] 
identifier:	dns-sshfp-type
identifier:	flag-QR
type:		[identifier-refrence fixnum?] 
identifier:	integer->dns-cert-type
identifier:	dns-sshfp-algorithm
identifier:	dnssec-digest
identifier:	dns-cert-type
identifier:	dnssec-algorithm
identifier:	integer->dnssec-algorithm
identifier:	integer->dns-rcode
identifier:	integer->dns-tsig-error
identifier:	dns-opcode
identifier:	dns-rcode
identifier:	dns-class
identifier:	integer->dns-class
identifier:	dns-rrtype
identifier:	integer->dns-rrtype
library:	( industria hexdump)
path:		./.akku/lib/industria/hexdump.sls
identifier:	hexdump
library:	( scheme base)
path:		./.akku/lib/scheme/base.chezscheme.sls
identifier:	write-u8
identifier:	zero?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	write-char
identifier:	write-string
identifier:	with-exception-handler
identifier:	write-bytevector
identifier:	vector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	when
identifier:	vector-ref
identifier:	vector-set!
type:		(void? <- (inner:list? (inner:vector? something? ... ) [identifier-refrence integer?] something? ) ) 
identifier:	vector-length
type:		([identifier-refrence integer?] <- (inner:list? (inner:vector? something? ... ) ) ) 
identifier:	vector-map
identifier:	vector-fill!
identifier:	vector-for-each
identifier:	vector-copy!
identifier:	vector-fill!
identifier:	vector-append
identifier:	vector-copy
identifier:	vector->list
identifier:	vector->string
identifier:	vector
identifier:	vector->list
identifier:	utf8->string
identifier:	values
identifier:	unquote-splicing
identifier:	utf8->string
identifier:	unless
identifier:	unquote
identifier:	truncate/
identifier:	u8-ready?
identifier:	truncate-quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	truncate-remainder
identifier:	textual-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	truncate
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	syntax-rules
identifier:	textual-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	syntax-error
identifier:	syntax-rules
identifier:	symbol=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence symbol?] [identifier-refrence symbol?] ) ) 
identifier:	symbol?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	substring
identifier:	symbol->string
identifier:	string>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	string=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string-set!
identifier:	string-length
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-map
identifier:	string-fill!
identifier:	string-for-each
identifier:	string-copy
identifier:	string-copy!
identifier:	string-append
identifier:	string-copy
identifier:	string->utf8
identifier:	string->vector
identifier:	string->symbol
type:		([identifier-refrence symbol?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string->utf8
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string->number
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence char?] ... ) ) 
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	set-cdr!
identifier:	square
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	set!
identifier:	set-car!
identifier:	reverse
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	round
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	real?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	remainder
identifier:	read-string
identifier:	read-u8
identifier:	read-error?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	read-line
identifier:	read-bytevector!
identifier:	read-char
type:		([identifier-refrence char?] <- (inner:list? textual-output-port? ) ) 
type:		([identifier-refrence char?] <- (inner:list? ) ) 
identifier:	rationalize
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	read-bytevector
identifier:	raise-continuable
identifier:	rational?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	raise
identifier:	quasiquote
identifier:	quote
identifier:	positive?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	procedure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	peek-char
identifier:	peek-u8
identifier:	pair?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	parameterize
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	or
identifier:	output-port-open?
identifier:	open-output-bytevector
identifier:	open-output-string
identifier:	open-input-bytevector
identifier:	open-input-string
identifier:	numerator
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	odd?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	number->string
identifier:	number?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	not
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	null?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	negative?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	newline
identifier:	min
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	modulo
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	memq
identifier:	memv
identifier:	member
identifier:	member
identifier:	map
identifier:	max
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	make-vector
identifier:	map
identifier:	make-parameter
identifier:	make-string
identifier:	make-bytevector
identifier:	make-list
identifier:	list-tail
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) [identifier-refrence integer?] ) ) 
identifier:	list?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	list-ref
identifier:	list-set!
identifier:	list->vector
type:		((inner:vector? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	list-copy
identifier:	list
type:		((inner:list? something? ... ) <- (inner:list? something? ... ) ) 
identifier:	list->string
type:		([identifier-refrence string?] <- (inner:list? (inner:list? [identifier-refrence char?] ... ) ) ) 
identifier:	letrec*
identifier:	letrec-syntax
identifier:	let-values
identifier:	letrec
identifier:	let-syntax
identifier:	let-syntax
identifier:	let*
identifier:	let*-values
identifier:	length
identifier:	let
identifier:	lambda
identifier:	lcm
identifier:	integer->char
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	integer?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	inexact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	input-port-open?
identifier:	include-ci
identifier:	inexact
identifier:	if
identifier:	include
identifier:	get-output-string
identifier:	guard
identifier:	gcd
identifier:	get-output-bytevector
identifier:	for-each
identifier:	for-each
identifier:	flush-output-port
type:		([identifier-refrence flonum?] <- (inner:list? ) ) 
identifier:	flush-output-port
type:		([identifier-refrence flonum?] <- (inner:list? ) ) 
identifier:	floor-remainder
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	floor/
identifier:	floor
type:		([identifier-refrence flonum?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	floor-quotient
identifier:	features
identifier:	file-error?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	expt
identifier:	expt
identifier:	exact-integer?
identifier:	exact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	exact
identifier:	exact-integer-sqrt
identifier:	error-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	even?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	error-object-irritants
identifier:	error-object-message
identifier:	eqv?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	error
type:		(void? <- (inner:list? something? something? **1 ) ) 
identifier:	eq?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	equal?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eof-object
identifier:	eof-object
identifier:	do
identifier:	dynamic-wind
identifier:	define-values
identifier:	denominator
type:		([identifier-refrence rational?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	define-record-type
identifier:	define-syntax
identifier:	define
identifier:	define-record-type
identifier:	current-output-port
identifier:	current-output-port
identifier:	current-input-port
identifier:	current-input-port
identifier:	current-error-port
identifier:	current-error-port
identifier:	cond-expand
identifier:	cons
identifier:	complex?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	cond
identifier:	close-port
identifier:	close-port
identifier:	close-input-port
identifier:	close-output-port
identifier:	char>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	char=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char->integer
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ready?
identifier:	cdr
identifier:	ceiling
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	cdar
identifier:	cddr
identifier:	case
identifier:	case
identifier:	call/cc
identifier:	car
identifier:	call-with-port
identifier:	call-with-values
identifier:	call-with-current-continuation
identifier:	call-with-port
identifier:	caar
identifier:	cadr
identifier:	bytevector-u8-set!
identifier:	bytevector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	bytevector-length
identifier:	bytevector-u8-ref
identifier:	bytevector-copy!
identifier:	bytevector-copy!
identifier:	bytevector-copy
identifier:	bytevector-copy
identifier:	bytevector
identifier:	bytevector-append
identifier:	boolean=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence boolean?] [identifier-refrence boolean?] ) ) 
identifier:	boolean?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	binary-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	binary-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	assv
identifier:	begin
identifier:	assoc
identifier:	assq
identifier:	apply
identifier:	assoc
identifier:	and
identifier:	append
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) **1 something? ) ) 
identifier:	>=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	abs
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	=
identifier:	>
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	<
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	<=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	-
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	/
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	*
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
identifier:	+
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
identifier:	=>
identifier:	else
identifier:	_
identifier:	...
library:	( scheme file)
path:		./.akku/lib/scheme/file.chezscheme.sls
identifier:	with-input-from-file
identifier:	with-output-to-file
identifier:	open-input-file
identifier:	open-output-file
identifier:	open-binary-input-file
identifier:	open-binary-output-file
identifier:	delete-file
type:		(void? <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	file-exists?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence boolean?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	call-with-input-file
identifier:	call-with-output-file
library:	( scheme case-lambda)
path:		./.akku/lib/scheme/case-lambda.chezscheme.sls
identifier:	case-lambda
library:	( scheme process-context)
path:		./.akku/lib/scheme/process-context.chezscheme.sls
identifier:	get-environment-variables
type:		((inner:list? ) <- (inner:list? ) ) 
identifier:	exit
identifier:	get-environment-variable
identifier:	command-line
type:		((inner:list? [identifier-refrence string?] ... ) <- (inner:list? ) ) 
identifier:	emergency-exit
library:	( scheme lazy)
path:		./.akku/lib/scheme/lazy.chezscheme.sls
identifier:	promise?
identifier:	make-promise
type:		([identifier-refrence promise?] <- (inner:list? something? ) ) 
identifier:	delay-force
identifier:	delay
identifier:	force
library:	( scheme write)
path:		./.akku/lib/scheme/write.chezscheme.sls
identifier:	write-shared
identifier:	write-simple
identifier:	display
type:		(void? <- (inner:list? something? ) ) 
identifier:	write
library:	( scheme r5rs)
path:		./.akku/lib/scheme/r5rs.chezscheme.sls
identifier:	zero?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	write
identifier:	write-char
identifier:	with-input-from-file
identifier:	with-output-to-file
identifier:	vector-set!
type:		(void? <- (inner:list? (inner:vector? something? ... ) [identifier-refrence integer?] something? ) ) 
identifier:	vector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	vector-length
type:		([identifier-refrence integer?] <- (inner:list? (inner:vector? something? ... ) ) ) 
identifier:	vector-ref
identifier:	vector-fill!
identifier:	vector-fill!
identifier:	vector->list
identifier:	vector->list
identifier:	values
identifier:	vector
identifier:	tan
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	truncate
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	syntax-rules
identifier:	syntax-rules
identifier:	symbol->string
identifier:	symbol?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	string?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	substring
identifier:	string>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-set!
identifier:	string<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-length
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string-copy
identifier:	string-fill!
identifier:	string-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-copy
identifier:	string-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string->symbol
type:		([identifier-refrence symbol?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-append
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string->number
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence char?] ... ) ) 
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	sin
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	sqrt
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	set-car!
identifier:	set-cdr!
identifier:	scheme-report-environment
identifier:	set!
identifier:	reverse
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	round
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	remainder
identifier:	remainder
identifier:	real-part
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	real?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	read
identifier:	read-char
type:		([identifier-refrence char?] <- (inner:list? textual-output-port? ) ) 
type:		([identifier-refrence char?] <- (inner:list? ) ) 
identifier:	rational?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	rationalize
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	quasiquote
identifier:	quote
identifier:	positive?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	procedure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	pair?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	peek-char
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	open-output-file
identifier:	or
identifier:	odd?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	open-input-file
identifier:	number?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	numerator
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	null?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	number->string
identifier:	not
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	null-environment
identifier:	negative?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	newline
identifier:	modulo
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	modulo
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	memv
identifier:	min
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	member
identifier:	memq
identifier:	max
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	member
identifier:	map
identifier:	map
identifier:	make-string
identifier:	make-vector
identifier:	make-polar
identifier:	make-rectangular
identifier:	log
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	magnitude
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	list?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	load
identifier:	list-ref
identifier:	list-tail
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) [identifier-refrence integer?] ) ) 
identifier:	list->string
type:		([identifier-refrence string?] <- (inner:list? (inner:list? [identifier-refrence char?] ... ) ) ) 
identifier:	list->vector
type:		((inner:vector? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	letrec-syntax
identifier:	list
type:		((inner:list? something? ... ) <- (inner:list? something? ... ) ) 
identifier:	let-syntax
identifier:	letrec
identifier:	let*
identifier:	let-syntax
identifier:	length
identifier:	let
identifier:	lambda
identifier:	lcm
identifier:	interaction-environment
identifier:	interaction-environment
type:		(void? <- (inner:list? ) ) 
identifier:	integer->char
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	integer?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	inexact->exact
identifier:	inexact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	if
identifier:	imag-part
identifier:	force
identifier:	gcd
identifier:	for-each
identifier:	force
identifier:	floor
type:		([identifier-refrence flonum?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	for-each
identifier:	expt
identifier:	expt
identifier:	exact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	exp
identifier:	even?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	exact->inexact
identifier:	eval
identifier:	eval
identifier:	equal?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	eqv?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eq?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	dynamic-wind
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	display
type:		(void? <- (inner:list? something? ) ) 
identifier:	do
identifier:	delay
identifier:	denominator
type:		([identifier-refrence rational?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	define-syntax
identifier:	delay
identifier:	current-output-port
identifier:	define
identifier:	current-input-port
identifier:	current-output-port
identifier:	cos
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	current-input-port
identifier:	cond
identifier:	cons
identifier:	close-output-port
identifier:	complex?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	char?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	close-input-port
identifier:	char>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-whitespace?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-upcase
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-upper-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-numeric?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ready?
identifier:	char-downcase
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-lower-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-alphabetic?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	ceiling
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	char->integer
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	cddr
identifier:	cdr
identifier:	cddddr
identifier:	cdddr
identifier:	cddar
identifier:	cdddar
identifier:	cddaar
identifier:	cddadr
identifier:	cdadr
identifier:	cdar
identifier:	cdadar
identifier:	cdaddr
identifier:	cdaadr
identifier:	cdaar
identifier:	case
identifier:	cdaaar
identifier:	car
identifier:	case
identifier:	call-with-output-file
identifier:	call-with-values
identifier:	call-with-current-continuation
identifier:	call-with-input-file
identifier:	caddr
identifier:	cadr
identifier:	caddar
identifier:	cadddr
identifier:	cadadr
identifier:	cadar
identifier:	caar
identifier:	cadaar
identifier:	caaddr
identifier:	caadr
identifier:	caaar
identifier:	caadar
identifier:	caaaar
identifier:	caaadr
identifier:	begin
identifier:	boolean?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	assv
identifier:	atan
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	assoc
identifier:	assq
identifier:	asin
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	assoc
identifier:	append
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) **1 something? ) ) 
identifier:	apply
identifier:	and
identifier:	angle
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	abs
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	acos
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	>
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	>=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	<=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	=
identifier:	/
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	<
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	+
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
identifier:	-
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	else
identifier:	*
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
identifier:	...
identifier:	=>
library:	( scheme complex)
path:		./.akku/lib/scheme/complex.chezscheme.sls
identifier:	make-rectangular
identifier:	real-part
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	magnitude
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	make-polar
identifier:	angle
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	imag-part
library:	( scheme read)
path:		./.akku/lib/scheme/read.chezscheme.sls
identifier:	read
library:	( scheme inexact)
path:		./.akku/lib/scheme/inexact.chezscheme.sls
identifier:	tan
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	sin
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	sqrt
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	nan?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	nan?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	infinite?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	log
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	finite?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	infinite?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	exp
identifier:	finite?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	atan
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	cos
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	acos
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	asin
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
library:	( scheme eval)
path:		./.akku/lib/scheme/eval.chezscheme.sls
identifier:	eval
identifier:	environment
identifier:	eval
library:	( scheme load)
path:		./.akku/lib/scheme/load.chezscheme.sls
identifier:	load
library:	( scheme cxr)
path:		./.akku/lib/scheme/cxr.chezscheme.sls
identifier:	cddddr
identifier:	cdddr
identifier:	cddar
identifier:	cdddar
identifier:	cddaar
identifier:	cddadr
identifier:	cdaddr
identifier:	cdadr
identifier:	cdaar
identifier:	cdadar
identifier:	cdaaar
identifier:	cdaadr
identifier:	cadddr
identifier:	caddr
identifier:	cadar
identifier:	caddar
identifier:	cadaar
identifier:	cadadr
identifier:	caaddr
identifier:	caadr
identifier:	caaar
identifier:	caadar
identifier:	caaaar
identifier:	caaadr
library:	( scheme char)
path:		./.akku/lib/scheme/char.chezscheme.sls
identifier:	string-foldcase
identifier:	string-upcase
identifier:	string-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-downcase
identifier:	string-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	char-whitespace?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	digit-value
identifier:	char-upcase
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-upper-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-lower-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-numeric?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-downcase
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-foldcase
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char-alphabetic?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
library:	( scheme repl)
path:		./.akku/lib/scheme/repl.chezscheme.sls
identifier:	interaction-environment
identifier:	interaction-environment
type:		(void? <- (inner:list? ) ) 
library:	( scheme time)
path:		./.akku/lib/scheme/time.chezscheme.sls
identifier:	jiffies-per-second
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	current-jiffy
type:		([identifier-refrence number?] <- (inner:list? ) ) 
identifier:	current-second
type:		([identifier-refrence number?] <- (inner:list? ) ) 
library:	( laesare reader)
path:		./.akku/lib/laesare/reader.sls
identifier:	source-column
identifier:	source-filename
identifier:	source-line
identifier:	annotation-source->condition
identifier:	source-condition?
identifier:	annotation-stripped
identifier:	annotation-source
identifier:	annotation?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	annotation-expression
identifier:	reader-saved-line
identifier:	reader-saved-column
identifier:	reader-line
identifier:	reader-column
identifier:	reader-tolerant?
identifier:	reader-tolerant?-set!
type:		(void? <- (inner:list? [identifier-refrence reader?] something? ) ) 
identifier:	reader-fold-case?
identifier:	reader-fold-case?-set!
type:		(void? <- (inner:list? [identifier-refrence reader?] something? ) ) 
identifier:	reader-mode
identifier:	reader-mode-set!
type:		(void? <- (inner:list? [identifier-refrence reader?] something? ) ) 
identifier:	reader-warning
identifier:	reader-port
identifier:	reader?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-reader
type:		([identifier-refrence reader?] <- (inner:list? something? ... ) ) 
identifier:	read-datum
identifier:	detect-scheme-file-type
identifier:	get-token
identifier:	read-annotated
library:	( laesare writer)
path:		./.akku/lib/laesare/writer.sls
identifier:	writer-mode-set!
type:		(void? <- (inner:list? [identifier-refrence writer?] something? ) ) 
identifier:	writer-filename
identifier:	writer-mode
identifier:	writer?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	writer-port
identifier:	put-token
identifier:	make-writer
type:		([identifier-refrence writer?] <- (inner:list? something? ... ) ) 
library:	( chibi string)
path:		./.akku/lib/chibi/string.sls
identifier:	call-with-input-string
identifier:	call-with-output-string
identifier:	string-downcase-ascii
identifier:	string-upcase-ascii
identifier:	string-contains
identifier:	make-string-searcher
identifier:	string-map
identifier:	string-for-each
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-skip
identifier:	string-skip-right
identifier:	string-find-right
identifier:	string-find?
identifier:	string-suffix?
identifier:	string-find
identifier:	string-mismatch-right
identifier:	string-prefix?
identifier:	string-trim-right
identifier:	string-mismatch
identifier:	string-trim
identifier:	string-trim-left
identifier:	string-split
identifier:	string-count
identifier:	string-any
identifier:	string-join
identifier:	string-null?
identifier:	string-every
identifier:	string-cursor-forward
identifier:	string-cursor-back
identifier:	string-cursor->index
identifier:	string-index->cursor
identifier:	string-cursor-prev
identifier:	substring-cursor
identifier:	string-cursor=?
identifier:	string-cursor-next
identifier:	string-cursor>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	string-cursor>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	string-cursor<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	string-cursor<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	string-cursor-end
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-cursor-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string-cursor?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	string-cursor-start
library:	( chibi string)
path:		./.akku/lib/chibi/string.sld
identifier:	call-with-input-string
identifier:	call-with-output-string
identifier:	string-downcase-ascii
identifier:	string-upcase-ascii
identifier:	string-contains
identifier:	make-string-searcher
identifier:	string-map
identifier:	string-for-each
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-skip
identifier:	string-skip-right
identifier:	string-find-right
identifier:	string-find?
identifier:	string-suffix?
identifier:	string-find
identifier:	string-mismatch-right
identifier:	string-prefix?
identifier:	string-trim-right
identifier:	string-mismatch
identifier:	string-trim
identifier:	string-trim-left
identifier:	string-split
identifier:	string-count
identifier:	string-any
identifier:	string-join
identifier:	string-null?
identifier:	string-every
identifier:	string-cursor-forward
identifier:	string-cursor-back
identifier:	string-cursor->index
identifier:	string-index->cursor
identifier:	string-cursor-prev
identifier:	substring-cursor
identifier:	string-cursor=?
identifier:	string-cursor-next
identifier:	string-cursor>?
identifier:	string-cursor>=?
identifier:	string-cursor<?
identifier:	string-cursor<=?
identifier:	string-cursor-end
identifier:	string-cursor-ref
identifier:	string-cursor?
identifier:	string-cursor-start
library:	( chibi test)
path:		./.akku/lib/chibi/test.sls
identifier:	current-test-group-removers
identifier:	current-column-width
identifier:	current-test-removers
identifier:	current-test-group-filters
identifier:	current-test-comparator
identifier:	current-test-filters
identifier:	test-failure-count
identifier:	current-test-epsilon
identifier:	current-test-reporter
identifier:	current-test-group-reporter
identifier:	current-test-applier
identifier:	current-test-skipper
identifier:	test-group-push!
identifier:	current-test-verbosity
identifier:	test-group-set!
identifier:	test-group-inc!
identifier:	test-group-name
identifier:	test-group-ref
identifier:	test-equal?
identifier:	test-get-name!
identifier:	test-run
identifier:	test-exit
identifier:	test-syntax-error
identifier:	test-propagate-info
identifier:	test-begin
identifier:	test-end
identifier:	test-group
identifier:	current-test-group
identifier:	test-not
identifier:	test-values
identifier:	test-error
identifier:	test-assert
identifier:	test
identifier:	test-equal
library:	( chibi test)
path:		./.akku/lib/chibi/test.sld
identifier:	current-test-group-removers
identifier:	current-column-width
identifier:	current-test-removers
identifier:	current-test-group-filters
identifier:	current-test-comparator
identifier:	current-test-filters
identifier:	test-failure-count
identifier:	current-test-epsilon
identifier:	current-test-reporter
identifier:	current-test-group-reporter
identifier:	current-test-applier
identifier:	current-test-skipper
identifier:	test-group-push!
identifier:	current-test-verbosity
identifier:	test-group-set!
identifier:	test-group-inc!
identifier:	test-group-name
identifier:	test-group-ref
identifier:	test-equal?
identifier:	test-get-name!
identifier:	test-run
identifier:	test-exit
identifier:	test-syntax-error
identifier:	test-propagate-info
identifier:	test-begin
identifier:	test-end
identifier:	test-group
identifier:	current-test-group
identifier:	test-not
identifier:	test-values
identifier:	test-error
identifier:	test-assert
identifier:	test
identifier:	test-equal
library:	( chibi string-test)
path:		./.akku/lib/chibi/string-test.sld
identifier:	run-tests
library:	( chibi string-test)
path:		./.akku/lib/chibi/string-test.sls
identifier:	run-tests
library:	( chibi term ansi)
path:		./.akku/lib/chibi/term/ansi.sls
identifier:	reset-strikethrough-escape
identifier:	ansi-escapes-enabled?
identifier:	reset-italic-escape
identifier:	strikethrough-escape
identifier:	reset-negative-escape
identifier:	italic-escape
identifier:	reset-underline-escape
identifier:	negative-escape
identifier:	reset-bold-escape
identifier:	underline-escape
identifier:	rgb24-background
identifier:	bold-escape
identifier:	gray-background
identifier:	rgb24
identifier:	rgb-background
identifier:	gray
identifier:	strikethrough
identifier:	rgb
identifier:	negative
identifier:	italic
identifier:	bold
identifier:	underline
identifier:	magenta-background
identifier:	white-background
identifier:	blue-background
identifier:	cyan-background
identifier:	yellow-background
identifier:	green-background
identifier:	black-background
identifier:	red-background
identifier:	magenta
identifier:	white
identifier:	blue
identifier:	cyan
identifier:	yellow
identifier:	green
identifier:	black
identifier:	red
identifier:	rgb24-background-escape
identifier:	reset-background-color-escape
identifier:	rgb-background-escape
identifier:	gray-background-escape
identifier:	magenta-background-escape
identifier:	white-background-escape
identifier:	blue-background-escape
identifier:	cyan-background-escape
identifier:	yellow-background-escape
identifier:	green-background-escape
identifier:	black-background-escape
identifier:	red-background-escape
identifier:	rgb24-escape
identifier:	reset-color-escape
identifier:	rgb-escape
identifier:	gray-escape
identifier:	magenta-escape
identifier:	white-escape
identifier:	blue-escape
identifier:	cyan-escape
identifier:	yellow-escape
identifier:	green-escape
identifier:	black-escape
identifier:	red-escape
library:	( chibi term ansi)
path:		./.akku/lib/chibi/term/ansi.sld
identifier:	reset-strikethrough-escape
identifier:	ansi-escapes-enabled?
identifier:	reset-italic-escape
identifier:	strikethrough-escape
identifier:	reset-negative-escape
identifier:	italic-escape
identifier:	reset-underline-escape
identifier:	negative-escape
identifier:	reset-bold-escape
identifier:	underline-escape
identifier:	rgb24-background
identifier:	bold-escape
identifier:	gray-background
identifier:	rgb24
identifier:	rgb-background
identifier:	gray
identifier:	strikethrough
identifier:	rgb
identifier:	negative
identifier:	italic
identifier:	bold
identifier:	underline
identifier:	magenta-background
identifier:	white-background
identifier:	blue-background
identifier:	cyan-background
identifier:	yellow-background
identifier:	green-background
identifier:	black-background
identifier:	red-background
identifier:	magenta
identifier:	white
identifier:	blue
identifier:	cyan
identifier:	yellow
identifier:	green
identifier:	black
identifier:	red
identifier:	rgb24-background-escape
identifier:	reset-background-color-escape
identifier:	rgb-background-escape
identifier:	gray-background-escape
identifier:	magenta-background-escape
identifier:	white-background-escape
identifier:	blue-background-escape
identifier:	cyan-background-escape
identifier:	yellow-background-escape
identifier:	green-background-escape
identifier:	black-background-escape
identifier:	red-background-escape
identifier:	rgb24-escape
identifier:	reset-color-escape
identifier:	rgb-escape
identifier:	gray-escape
identifier:	magenta-escape
identifier:	white-escape
identifier:	blue-escape
identifier:	cyan-escape
identifier:	yellow-escape
identifier:	green-escape
identifier:	black-escape
identifier:	red-escape
library:	( chibi term ansi-test)
path:		./.akku/lib/chibi/term/ansi-test.sls
identifier:	run-tests
library:	( chibi term ansi-test)
path:		./.akku/lib/chibi/term/ansi-test.sld
identifier:	run-tests
library:	( chibi diff)
path:		./.akku/lib/chibi/diff.sld
identifier:	write-char-diffs
identifier:	write-char-diffs/color
identifier:	write-line-diffs
identifier:	write-line-diffs/color
identifier:	edits->string
identifier:	edits->string/color
identifier:	diff->string
identifier:	write-edits
identifier:	diff
identifier:	write-diff
identifier:	lcs
identifier:	lcs-with-positions
library:	( chibi diff)
path:		./.akku/lib/chibi/diff.sls
identifier:	write-char-diffs
identifier:	write-char-diffs/color
identifier:	write-line-diffs
identifier:	write-line-diffs/color
identifier:	edits->string
identifier:	edits->string/color
identifier:	diff->string
identifier:	write-edits
identifier:	diff
identifier:	write-diff
identifier:	lcs
identifier:	lcs-with-positions
library:	( chibi optional-test)
path:		./.akku/lib/chibi/optional-test.sls
identifier:	run-tests
library:	( chibi optional-test)
path:		./.akku/lib/chibi/optional-test.sld
identifier:	run-tests
library:	( chibi diff-test)
path:		./.akku/lib/chibi/diff-test.sls
identifier:	run-tests
library:	( chibi diff-test)
path:		./.akku/lib/chibi/diff-test.sld
identifier:	run-tests
library:	( chibi optional)
path:		./.akku/lib/chibi/optional.sld
identifier:	keyword-ref
identifier:	keyword-ref*
identifier:	let-keywords
identifier:	let-keywords*
identifier:	opt-lambda
identifier:	define-opt
identifier:	let-optionals
identifier:	let-optionals*
library:	( chibi optional)
path:		./.akku/lib/chibi/optional.sls
identifier:	keyword-ref
identifier:	keyword-ref*
identifier:	let-keywords
identifier:	let-keywords*
identifier:	opt-lambda
identifier:	define-opt
identifier:	let-optionals
identifier:	let-optionals*
library:	( chibi pathname)
path:		./.akku/lib/chibi/pathname.sld
identifier:	path-normalize
identifier:	make-path
identifier:	path-relative-to
identifier:	path-resolve
identifier:	path-relative?
identifier:	path-strip-leading-parents
identifier:	path-replace-extension
identifier:	path-absolute?
identifier:	path-extension
identifier:	path-strip-extension
identifier:	path-strip-directory
identifier:	path-directory
library:	( chibi pathname)
path:		./.akku/lib/chibi/pathname.sls
identifier:	path-normalize
identifier:	make-path
identifier:	path-relative-to
identifier:	path-resolve
identifier:	path-relative?
identifier:	path-strip-leading-parents
identifier:	path-replace-extension
identifier:	path-absolute?
identifier:	path-extension
identifier:	path-strip-extension
identifier:	path-strip-directory
identifier:	path-directory
library:	( chibi pathname-test)
path:		./.akku/lib/chibi/pathname-test.sld
identifier:	run-tests
library:	( chibi pathname-test)
path:		./.akku/lib/chibi/pathname-test.sls
identifier:	run-tests
library:	( ufo-threaded-function)
path:		./.akku/lib/ufo-threaded-function.chezscheme.sls
identifier:	threaded-map
identifier:	threaded-vector-map
identifier:	pool-size-ref
identifier:	pool-size-add
library:	( arew json)
path:		./.akku/lib/arew/json.chezscheme.sls
identifier:	json-read
identifier:	json-write
identifier:	json-error?
identifier:	json-error-reason
identifier:	json-nesting-depth-limit
identifier:	json-null?
library:	( arew json shims)
path:		./.akku/lib/arew/json/shims.chezscheme.sls
identifier:	define-record-type
library:	( ip-address)
path:		./.akku/lib/ip-address.sls
identifier:	ipv6->string
identifier:	string->ipv6
identifier:	ipv4->string
identifier:	string->ipv4
library:	( ip-address)
path:		./.akku/lib/ip-address/main.sls
identifier:	ipv6->string
identifier:	string->ipv6
identifier:	ipv4->string
identifier:	string->ipv4
library:	( slib string-search)
path:		./.akku/lib/slib/string-search.sls
identifier:	count-newlines
identifier:	find-string-from-port?
identifier:	string-subst
identifier:	substring?
identifier:	substring-ci?
identifier:	string-reverse-index
identifier:	string-reverse-index-ci
identifier:	string-index
identifier:	string-index-ci
library:	( slib string-search)
path:		./.akku/lib/slib/string-search.sld
identifier:	count-newlines
identifier:	find-string-from-port?
identifier:	string-subst
identifier:	substring?
identifier:	substring-ci?
identifier:	string-reverse-index
identifier:	string-reverse-index-ci
identifier:	string-index
identifier:	string-index-ci
library:	( slib alist)
path:		./.akku/lib/slib/alist.sld
identifier:	alist-map
identifier:	alist-for-each
identifier:	alist-associator
identifier:	alist-remover
identifier:	predicate->asso
identifier:	alist-inquirer
library:	( slib alist)
path:		./.akku/lib/slib/alist.sls
identifier:	alist-map
identifier:	alist-for-each
identifier:	alist-associator
identifier:	alist-remover
type:		(((inner:pair? something? something? ) <- (inner:list? something? something? ) ) <- (inner:list? something? ) ) 
type:		(((inner:pair? something? something? ) <- (inner:list? (inner:pair? something? something? ) something? ) ) <- (inner:list? something? ) ) 
identifier:	predicate->asso
type:		(([identifier-refrence boolean?] <- (inner:list? something? something? ) ) <- (inner:list? something? ) ) 
identifier:	alist-inquirer
library:	( slib queue)
path:		./.akku/lib/slib/queue.sld
identifier:	queue-front
identifier:	queue-rear
identifier:	queue-pop!
identifier:	dequeue-all!
identifier:	enqueue!
identifier:	dequeue!
identifier:	queue-empty?
identifier:	queue-push!
identifier:	make-queue
identifier:	queue?
library:	( slib queue)
path:		./.akku/lib/slib/queue.sls
identifier:	queue-front
identifier:	queue-rear
identifier:	queue-pop!
identifier:	dequeue-all!
identifier:	enqueue!
identifier:	dequeue!
identifier:	queue-empty?
identifier:	queue-push!
identifier:	make-queue
identifier:	queue?
library:	( uuid)
path:		./.akku/lib/uuid/main.sls
identifier:	uuid->string
identifier:	uuid-info
identifier:	sha-1-uuid
identifier:	string->uuid
identifier:	random-uuid
identifier:	md5-uuid
identifier:	uuid-namespace-x.500
identifier:	time-uuid
identifier:	uuid-namespace-url
identifier:	uuid-namespace-oid
identifier:	nil-uuid
identifier:	uuid-namespace-dns
library:	( uuid)
path:		./.akku/lib/uuid.sls
identifier:	uuid->string
identifier:	uuid-info
identifier:	sha-1-uuid
identifier:	string->uuid
identifier:	random-uuid
identifier:	md5-uuid
identifier:	uuid-namespace-x.500
identifier:	time-uuid
identifier:	uuid-namespace-url
identifier:	uuid-namespace-oid
identifier:	nil-uuid
identifier:	uuid-namespace-dns
library:	( struct pack)
path:		./.akku/lib/struct/pack.sls
identifier:	get-unpack
identifier:	put-pack
identifier:	pack!
identifier:	unpack
identifier:	format-size
identifier:	pack
library:	( srfi :158)
path:		./.akku/lib/srfi/:158.chezscheme.sls
identifier:	product-accumulator
identifier:	bytevector-accumulator!
identifier:	sum-accumulator
identifier:	string-accumulator
identifier:	bytevector-accumulator
identifier:	reverse-vector-accumulator
identifier:	vector-accumulator!
identifier:	reverse-list-accumulator
identifier:	vector-accumulator
identifier:	count-accumulator
identifier:	list-accumulator
identifier:	generator-unfold
identifier:	make-accumulator
identifier:	generator-any
identifier:	generator-every
identifier:	generator-find
identifier:	generator-count
identifier:	generator-for-each
identifier:	generator-map->list
identifier:	generator->string
identifier:	generator-fold
identifier:	generator->vector
identifier:	generator->vector!
identifier:	generator->list
identifier:	generator->reverse-list
identifier:	gindex
identifier:	gselect
identifier:	gdelete
identifier:	gdelete-neighbor-dups
identifier:	gtake-while
identifier:	gdrop-while
identifier:	gtake
identifier:	gdrop
identifier:	gremove
identifier:	gstate-filter
identifier:	gcombine
identifier:	gfilter
identifier:	gmerge
identifier:	gmap
identifier:	gflatten
identifier:	ggroup
identifier:	gcons*
identifier:	gappend
identifier:	make-for-each-generator
identifier:	make-unfold-generator
identifier:	string->generator
identifier:	bytevector->generator
identifier:	vector->generator
identifier:	reverse-vector->generator
identifier:	make-coroutine-generator
identifier:	list->generator
identifier:	make-iota-generator
identifier:	make-range-generator
identifier:	generator
identifier:	circular-generator
library:	( srfi :158 generators-and-accumulators)
path:		./.akku/lib/srfi/:158/generators-and-accumulators.chezscheme.sls
identifier:	product-accumulator
identifier:	bytevector-accumulator!
identifier:	sum-accumulator
identifier:	string-accumulator
identifier:	bytevector-accumulator
identifier:	reverse-vector-accumulator
identifier:	vector-accumulator!
identifier:	reverse-list-accumulator
identifier:	vector-accumulator
identifier:	count-accumulator
identifier:	list-accumulator
identifier:	generator-unfold
identifier:	make-accumulator
identifier:	generator-any
identifier:	generator-every
identifier:	generator-find
identifier:	generator-count
identifier:	generator-for-each
identifier:	generator-map->list
identifier:	generator->string
identifier:	generator-fold
identifier:	generator->vector
identifier:	generator->vector!
identifier:	generator->list
identifier:	generator->reverse-list
identifier:	gindex
identifier:	gselect
identifier:	gdelete
identifier:	gdelete-neighbor-dups
identifier:	gtake-while
identifier:	gdrop-while
identifier:	gtake
identifier:	gdrop
identifier:	gremove
identifier:	gstate-filter
identifier:	gcombine
identifier:	gfilter
identifier:	gmerge
identifier:	gmap
identifier:	gflatten
identifier:	ggroup
identifier:	gcons*
identifier:	gappend
identifier:	make-for-each-generator
identifier:	make-unfold-generator
identifier:	string->generator
identifier:	bytevector->generator
identifier:	vector->generator
identifier:	reverse-vector->generator
identifier:	make-coroutine-generator
identifier:	list->generator
identifier:	make-iota-generator
identifier:	make-range-generator
identifier:	generator
identifier:	circular-generator
library:	( srfi :127)
path:		./.akku/lib/srfi/:127.chezscheme.sls
identifier:	lseq-memv
identifier:	lseq-member
identifier:	lseq-memq
identifier:	lseq-every
identifier:	lseq-index
identifier:	lseq-drop-while
identifier:	lseq-any
identifier:	lseq-find-tail
identifier:	lseq-take-while
identifier:	lseq-remove
identifier:	lseq-find
identifier:	lseq-for-each
identifier:	lseq-filter
identifier:	lseq-zip
identifier:	lseq-map
identifier:	lseq-length
identifier:	lseq-append
identifier:	lseq-realize
identifier:	lseq->generator
identifier:	lseq-take
identifier:	lseq-drop
identifier:	lseq-rest
identifier:	lseq-ref
identifier:	lseq-first
identifier:	lseq-cdr
identifier:	lseq=?
identifier:	lseq-car
identifier:	generator->lseq
identifier:	lseq?
library:	( srfi :127 lazy-sequences)
path:		./.akku/lib/srfi/:127/lazy-sequences.chezscheme.sls
identifier:	lseq-memv
identifier:	lseq-member
identifier:	lseq-memq
identifier:	lseq-every
identifier:	lseq-index
identifier:	lseq-drop-while
identifier:	lseq-any
identifier:	lseq-find-tail
identifier:	lseq-take-while
identifier:	lseq-remove
identifier:	lseq-find
identifier:	lseq-for-each
identifier:	lseq-filter
identifier:	lseq-zip
identifier:	lseq-map
identifier:	lseq-length
identifier:	lseq-append
identifier:	lseq-realize
identifier:	lseq->generator
identifier:	lseq-take
identifier:	lseq-drop
identifier:	lseq-rest
identifier:	lseq-ref
identifier:	lseq-first
identifier:	lseq-cdr
identifier:	lseq=?
identifier:	lseq-car
identifier:	generator->lseq
identifier:	lseq?
library:	( srfi :45)
path:		./.akku/lib/srfi/:45.chezscheme.sls
identifier:	force
identifier:	lazy
identifier:	delay
identifier:	eager
type:		([identifier-refrence promise?] <- (inner:list? something? ) ) 
library:	( srfi :45 lazy)
path:		./.akku/lib/srfi/:45/lazy.chezscheme.sls
identifier:	force
identifier:	eager
type:		([identifier-refrence promise?] <- (inner:list? something? ) ) 
identifier:	delay
identifier:	lazy
library:	( srfi :98)
path:		./.akku/lib/srfi/:98.chezscheme.sls
identifier:	get-environment-variable
identifier:	get-environment-variables
type:		((inner:list? ) <- (inner:list? ) ) 
library:	( srfi :98 os-environment-variables)
path:		./.akku/lib/srfi/:98/os-environment-variables.chezscheme.sls
identifier:	get-environment-variables
type:		((inner:list? ) <- (inner:list? ) ) 
identifier:	get-environment-variable
library:	( srfi :9)
path:		./.akku/lib/srfi/:9.chezscheme.sls
identifier:	define-record-type
library:	( srfi :9 records)
path:		./.akku/lib/srfi/:9/records.chezscheme.sls
identifier:	define-record-type
library:	( srfi :99)
path:		./.akku/lib/srfi/:99.chezscheme.sls
identifier:	rtd-predicate
identifier:	rtd?
identifier:	rtd-name
identifier:	rtd-parent
identifier:	rtd-field-names
identifier:	rtd-mutator
identifier:	rtd-constructor
identifier:	rtd-field-mutable?
identifier:	rtd-accessor
identifier:	rtd-all-field-names
identifier:	record-rtd
identifier:	record?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	define-record-type
identifier:	make-rtd
library:	( srfi :99 records)
path:		./.akku/lib/srfi/:99/records.chezscheme.sls
identifier:	rtd-mutator
identifier:	define-record-type
identifier:	rtd-predicate
identifier:	rtd-accessor
identifier:	rtd?
identifier:	rtd-constructor
identifier:	rtd-field-mutable?
identifier:	make-rtd
identifier:	rtd-field-names
identifier:	rtd-all-field-names
identifier:	rtd-name
identifier:	rtd-parent
identifier:	record?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	record-rtd
library:	( srfi :99 records inspection)
path:		./.akku/lib/srfi/:99/records/inspection.chezscheme.sls
identifier:	rtd-field-mutable?
identifier:	rtd-field-names
identifier:	rtd-all-field-names
identifier:	rtd-name
identifier:	rtd-parent
identifier:	record?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	record-rtd
library:	( srfi :99 records syntactic)
path:		./.akku/lib/srfi/:99/records/syntactic.chezscheme.sls
identifier:	define-record-type
library:	( srfi :99 records helper)
path:		./.akku/lib/srfi/:99/records/helper.chezscheme.sls
identifier:	rtd?
library:	( srfi :99 records procedural)
path:		./.akku/lib/srfi/:99/records/procedural.chezscheme.sls
identifier:	rtd-accessor
identifier:	rtd-mutator
identifier:	rtd-constructor
identifier:	rtd-predicate
identifier:	make-rtd
identifier:	rtd?
library:	( srfi :31)
path:		./.akku/lib/srfi/:31.chezscheme.sls
identifier:	rec
library:	( srfi :31 rec)
path:		./.akku/lib/srfi/:31/rec.chezscheme.sls
identifier:	rec
library:	( srfi :43)
path:		./.akku/lib/srfi/:43.chezscheme.sls
identifier:	vector=
identifier:	vector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	vector-unfold
identifier:	vector-unfold-right
identifier:	vector-skip-right
identifier:	vector-swap!
identifier:	vector-set!
type:		(void? <- (inner:list? (inner:vector? something? ... ) [identifier-refrence integer?] something? ) ) 
identifier:	vector-skip
identifier:	vector-reverse-copy
identifier:	vector-reverse-copy!
identifier:	vector-ref
identifier:	vector-reverse!
identifier:	vector-map
identifier:	vector-map!
identifier:	vector-index-right
identifier:	vector-length
type:		([identifier-refrence integer?] <- (inner:list? (inner:vector? something? ... ) ) ) 
identifier:	vector-for-each
identifier:	vector-index
identifier:	vector-fold
identifier:	vector-fold-right
identifier:	vector-every
identifier:	vector-fill!
identifier:	vector-count
identifier:	vector-empty?
identifier:	vector-copy
identifier:	vector-copy!
identifier:	vector-binary-search
identifier:	vector-concatenate
identifier:	vector-any
identifier:	vector-append
identifier:	vector
identifier:	vector->list
identifier:	reverse-list->vector
identifier:	reverse-vector->list
identifier:	list->vector
type:		((inner:vector? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	make-vector
library:	( srfi :43 vectors)
path:		./.akku/lib/srfi/:43/vectors.chezscheme.sls
identifier:	list->vector
type:		((inner:vector? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	reverse-list->vector
identifier:	vector->list
identifier:	reverse-vector->list
identifier:	vector-copy!
identifier:	vector-reverse-copy!
identifier:	vector-fill!
identifier:	vector-reverse!
identifier:	vector-set!
type:		(void? <- (inner:list? (inner:vector? something? ... ) [identifier-refrence integer?] something? ) ) 
identifier:	vector-swap!
identifier:	vector-any
identifier:	vector-every
identifier:	vector-skip-right
identifier:	vector-binary-search
identifier:	vector-skip
identifier:	vector-index-right
identifier:	vector-count
identifier:	vector-index
identifier:	vector-map!
identifier:	vector-for-each
identifier:	vector-fold-right
identifier:	vector-map
identifier:	vector-length
type:		([identifier-refrence integer?] <- (inner:list? (inner:vector? something? ... ) ) ) 
identifier:	vector-fold
identifier:	vector=
identifier:	vector-ref
identifier:	vector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	vector-empty?
identifier:	vector-append
identifier:	vector-concatenate
identifier:	vector-copy
identifier:	vector-reverse-copy
identifier:	vector-unfold
identifier:	vector-unfold-right
identifier:	make-vector
identifier:	vector
library:	( srfi :219)
path:		./.akku/lib/srfi/%3a219.sls
identifier:	define
library:	( srfi :219)
path:		./.akku/lib/srfi/:219.sls
identifier:	define
library:	( srfi :219)
path:		./.akku/lib/srfi/219.sls
identifier:	define
library:	( srfi :13)
path:		./.akku/lib/srfi/:13.chezscheme.sls
identifier:	substring/shared
identifier:	xsubstring
identifier:	string>=
identifier:	string?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	string=
identifier:	string>
identifier:	string<=
identifier:	string<>
identifier:	string-xcopy!
identifier:	string<
identifier:	string-upcase
identifier:	string-upcase!
identifier:	string-unfold
identifier:	string-unfold-right
identifier:	string-trim-both
identifier:	string-trim-right
identifier:	string-tokenize
identifier:	string-trim
identifier:	string-titlecase
identifier:	string-titlecase!
identifier:	string-take
identifier:	string-take-right
identifier:	string-suffix?
identifier:	string-tabulate
identifier:	string-suffix-length
identifier:	string-suffix-length-ci
identifier:	string-skip-right
identifier:	string-suffix-ci?
identifier:	string-set!
identifier:	string-skip
identifier:	string-reverse
identifier:	string-reverse!
identifier:	string-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string-replace
identifier:	string-prefix-length-ci
identifier:	string-prefix?
identifier:	string-prefix-ci?
identifier:	string-prefix-length
identifier:	string-pad
identifier:	string-pad-right
identifier:	string-map!
identifier:	string-null?
identifier:	string-length
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-map
identifier:	string-index-right
identifier:	string-join
identifier:	string-hash-ci
identifier:	string-index
identifier:	string-for-each-index
identifier:	string-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-fold-right
identifier:	string-for-each
identifier:	string-filter
identifier:	string-fold
identifier:	string-every
identifier:	string-fill!
identifier:	string-drop
identifier:	string-drop-right
identifier:	string-downcase
identifier:	string-downcase!
identifier:	string-count
identifier:	string-delete
identifier:	string-copy
identifier:	string-copy!
identifier:	string-contains
identifier:	string-contains-ci
identifier:	string-concatenate-reverse/shared
identifier:	string-concatenate/shared
identifier:	string-concatenate
identifier:	string-concatenate-reverse
identifier:	string-compare
identifier:	string-compare-ci
identifier:	string-ci>
identifier:	string-ci>=
identifier:	string-ci<>
identifier:	string-ci=
identifier:	string-ci<
identifier:	string-ci<=
identifier:	string-append
identifier:	string-append/shared
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-any
identifier:	reverse-list->string
identifier:	string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence char?] ... ) ) 
identifier:	list->string
type:		([identifier-refrence string?] <- (inner:list? (inner:list? [identifier-refrence char?] ... ) ) ) 
identifier:	make-string
library:	( srfi :13 strings)
path:		./.akku/lib/srfi/:13/strings.chezscheme.sls
identifier:	string-append
identifier:	list->string
type:		([identifier-refrence string?] <- (inner:list? (inner:list? [identifier-refrence char?] ... ) ) ) 
identifier:	string-set!
identifier:	string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence char?] ... ) ) 
identifier:	string-length
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-string
identifier:	string-copy
identifier:	string-fill!
identifier:	string-replace
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-join
identifier:	string-tokenize
identifier:	string-xcopy!
identifier:	string-null?
identifier:	string-append/shared
identifier:	xsubstring
identifier:	string-concatenate-reverse
identifier:	string-concatenate-reverse/shared
identifier:	string-concatenate
identifier:	string-concatenate/shared
identifier:	string-reverse!
identifier:	reverse-list->string
identifier:	substring/shared
identifier:	string-reverse
identifier:	string-contains-ci
identifier:	string-copy!
identifier:	string-suffix-ci?
identifier:	string-contains
identifier:	string-prefix-ci?
identifier:	string-suffix?
identifier:	string-suffix-length-ci
identifier:	string-prefix?
identifier:	string-prefix-length-ci
identifier:	string-suffix-length
identifier:	string-count
identifier:	string-prefix-length
identifier:	string-skip
identifier:	string-skip-right
identifier:	string-index
identifier:	string-index-right
identifier:	string-filter
identifier:	string-delete
identifier:	string-trim-right
identifier:	string-trim-both
identifier:	string-pad-right
identifier:	string-trim
identifier:	string-drop-right
identifier:	string-pad
identifier:	string-take-right
identifier:	string-drop
identifier:	string-titlecase!
identifier:	string-take
identifier:	string-downcase!
identifier:	string-upcase!
identifier:	string-upcase
identifier:	string-titlecase
identifier:	string-ci<>
identifier:	string-downcase
identifier:	string-ci<=
identifier:	string-ci>=
identifier:	string-ci<
identifier:	string-ci>
identifier:	string<>
identifier:	string-ci=
identifier:	string<=
identifier:	string>=
identifier:	string<
identifier:	string>
identifier:	string-compare-ci
identifier:	string=
identifier:	string-hash-ci
identifier:	string-compare
identifier:	string-any
identifier:	string-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-for-each-index
identifier:	string-every
identifier:	string-tabulate
identifier:	string-for-each
identifier:	string-fold-right
identifier:	string-unfold-right
identifier:	string-fold
identifier:	string-unfold
identifier:	string-map
identifier:	string-map!
library:	( srfi :156)
path:		./.akku/lib/srfi/:156.chezscheme.sls
identifier:	is
identifier:	isnt
library:	( srfi :156 predicate-combiners)
path:		./.akku/lib/srfi/:156/predicate-combiners.chezscheme.sls
identifier:	is
identifier:	isnt
library:	( srfi :125)
path:		./.akku/lib/srfi/:125.chezscheme.sls
identifier:	deprecated:hash-table-walk
identifier:	deprecated:hash-table-merge!
identifier:	deprecated:hash-table-hash-function
identifier:	deprecated:hash-table-exists?
identifier:	deprecated:hash-by-identity
identifier:	deprecated:hash-table-equivalence-function
identifier:	deprecated:string-hash
identifier:	deprecated:string-ci-hash
identifier:	hash-table-xor!
identifier:	deprecated:hash
identifier:	hash-table-intersection!
identifier:	hash-table-difference!
identifier:	hash-table->alist
identifier:	hash-table-union!
identifier:	hash-table-copy
identifier:	hash-table-empty-copy
identifier:	hash-table-fold
identifier:	hash-table-prune!
identifier:	hash-table-map!
identifier:	hash-table-map->list
identifier:	hash-table-map
identifier:	hash-table-for-each
identifier:	hash-table-find
identifier:	hash-table-count
identifier:	hash-table-values
identifier:	hash-table-entries
identifier:	hash-table-size
identifier:	hash-table-keys
identifier:	hash-table-pop!
identifier:	hash-table-clear!
identifier:	hash-table-update!
identifier:	hash-table-update!/default
identifier:	hash-table-delete!
identifier:	hash-table-intern!
identifier:	hash-table-ref/default
identifier:	hash-table-set!
identifier:	hash-table-mutable?
identifier:	hash-table-ref
identifier:	hash-table-empty?
identifier:	hash-table=?
identifier:	hash-table?
identifier:	hash-table-contains?
identifier:	hash-table-unfold
identifier:	alist->hash-table
identifier:	make-hash-table
identifier:	hash-table
library:	( srfi :125 hashtables)
path:		./.akku/lib/srfi/:125/hashtables.chezscheme.sls
identifier:	deprecated:hash-table-walk
identifier:	deprecated:hash-table-merge!
identifier:	deprecated:hash-table-hash-function
identifier:	deprecated:hash-table-exists?
identifier:	deprecated:hash-by-identity
identifier:	deprecated:hash-table-equivalence-function
identifier:	deprecated:string-hash
identifier:	deprecated:string-ci-hash
identifier:	hash-table-xor!
identifier:	deprecated:hash
identifier:	hash-table-intersection!
identifier:	hash-table-difference!
identifier:	hash-table->alist
identifier:	hash-table-union!
identifier:	hash-table-copy
identifier:	hash-table-empty-copy
identifier:	hash-table-fold
identifier:	hash-table-prune!
identifier:	hash-table-map!
identifier:	hash-table-map->list
identifier:	hash-table-map
identifier:	hash-table-for-each
identifier:	hash-table-find
identifier:	hash-table-count
identifier:	hash-table-values
identifier:	hash-table-entries
identifier:	hash-table-size
identifier:	hash-table-keys
identifier:	hash-table-pop!
identifier:	hash-table-clear!
identifier:	hash-table-update!
identifier:	hash-table-update!/default
identifier:	hash-table-delete!
identifier:	hash-table-intern!
identifier:	hash-table-ref/default
identifier:	hash-table-set!
identifier:	hash-table-mutable?
identifier:	hash-table-ref
identifier:	hash-table-empty?
identifier:	hash-table=?
identifier:	hash-table?
identifier:	hash-table-contains?
identifier:	hash-table-unfold
identifier:	alist->hash-table
identifier:	make-hash-table
identifier:	hash-table
library:	( srfi :61)
path:		./.akku/lib/srfi/:61.chezscheme.sls
identifier:	cond
library:	( srfi :61 cond)
path:		./.akku/lib/srfi/:61/cond.chezscheme.sls
identifier:	cond
library:	( srfi :69)
path:		./.akku/lib/srfi/:69.chezscheme.sls
identifier:	string-ci-hash
identifier:	string-hash
identifier:	hash-table?
identifier:	make-hash-table
identifier:	hash-table-values
identifier:	hash-table-walk
identifier:	hash-table-update!
identifier:	hash-table-update!/default
identifier:	hash-table-set!
identifier:	hash-table-size
identifier:	hash-table-ref
identifier:	hash-table-ref/default
identifier:	hash-table-keys
identifier:	hash-table-merge!
identifier:	hash-table-fold
identifier:	hash-table-hash-function
identifier:	hash-table-equivalence-function
identifier:	hash-table-exists?
identifier:	hash-table-copy
identifier:	hash-table-delete!
identifier:	hash-by-identity
identifier:	hash-table->alist
identifier:	alist->hash-table
identifier:	hash
library:	( srfi :69 basic-hash-tables)
path:		./.akku/lib/srfi/:69/basic-hash-tables.chezscheme.sls
identifier:	string-ci-hash
identifier:	hash-by-identity
identifier:	hash
identifier:	string-hash
identifier:	hash-table-copy
identifier:	hash-table-merge!
identifier:	hash-table-fold
identifier:	hash-table->alist
identifier:	hash-table-values
identifier:	hash-table-walk
identifier:	hash-table-size
identifier:	hash-table-keys
identifier:	hash-table-update!
identifier:	hash-table-update!/default
identifier:	hash-table-delete!
identifier:	hash-table-exists?
identifier:	hash-table-ref/default
identifier:	hash-table-set!
identifier:	hash-table-hash-function
identifier:	hash-table-ref
identifier:	alist->hash-table
identifier:	hash-table-equivalence-function
identifier:	make-hash-table
identifier:	hash-table?
library:	( srfi :0)
path:		./.akku/lib/srfi/:0.chezscheme.sls
identifier:	cond-expand
library:	( srfi :0 cond-expand)
path:		./.akku/lib/srfi/:0/cond-expand.chezscheme.sls
identifier:	cond-expand
library:	( srfi :17)
path:		./.akku/lib/srfi/:17.chezscheme.sls
identifier:	symbol-hashtable-ref
identifier:	list-ref
identifier:	hashtable-ref
identifier:	eq-hashtable-ref
identifier:	foreign-ref
identifier:	fxvector-ref
identifier:	bytevector-u8-ref
identifier:	bytevector-uint-ref
identifier:	bytevector-u64-native-ref
identifier:	bytevector-u64-ref
identifier:	bytevector-u48-ref
identifier:	bytevector-u56-ref
identifier:	bytevector-u32-ref
identifier:	bytevector-u40-ref
identifier:	bytevector-u24-ref
identifier:	bytevector-u32-native-ref
identifier:	bytevector-u16-native-ref
identifier:	bytevector-u16-ref
identifier:	bytevector-s8-ref
identifier:	bytevector-sint-ref
identifier:	bytevector-s64-native-ref
identifier:	bytevector-s64-ref
identifier:	bytevector-s48-ref
identifier:	bytevector-s56-ref
identifier:	bytevector-s32-ref
identifier:	bytevector-s40-ref
identifier:	bytevector-s24-ref
identifier:	bytevector-s32-native-ref
identifier:	bytevector-s16-native-ref
identifier:	bytevector-s16-ref
identifier:	bytevector-ieee-single-native-ref
identifier:	bytevector-ieee-single-ref
identifier:	bytevector-ieee-double-native-ref
identifier:	bytevector-ieee-double-ref
identifier:	string-ref
identifier:	vector-ref
identifier:	cdddar
identifier:	cddddr
identifier:	cddaar
identifier:	cddadr
identifier:	cdadar
identifier:	cdaddr
identifier:	cdaaar
identifier:	cdaadr
identifier:	caddar
identifier:	cadddr
identifier:	cadaar
identifier:	cadadr
identifier:	caadar
identifier:	caaddr
identifier:	caaaar
identifier:	caaadr
identifier:	cddar
identifier:	cdddr
identifier:	cdaar
identifier:	cdadr
identifier:	cadar
identifier:	caddr
identifier:	caaar
identifier:	caadr
identifier:	cdar
identifier:	cddr
identifier:	caar
identifier:	cadr
identifier:	car
identifier:	cdr
identifier:	getter-with-setter
identifier:	set!
library:	( srfi :17 helpers)
path:		./.akku/lib/srfi/:17/helpers.chezscheme.sls
identifier:	$bytevector-sint-set!
identifier:	$bytevector-uint-set!
identifier:	$bytevector-u56-set!
identifier:	$bytevector-u64-set!
identifier:	$bytevector-u40-set!
identifier:	$bytevector-u48-set!
identifier:	$bytevector-u24-set!
identifier:	$bytevector-u32-set!
identifier:	$bytevector-s64-set!
identifier:	$bytevector-u16-set!
identifier:	$bytevector-s48-set!
identifier:	$bytevector-s56-set!
identifier:	$bytevector-s32-set!
identifier:	$bytevector-s40-set!
identifier:	$bytevector-s16-set!
identifier:	$bytevector-s24-set!
identifier:	$bytevector-ieee-double-set!
identifier:	$bytevector-ieee-single-set!
identifier:	$set-cdddar!
identifier:	$set-cddddr!
identifier:	$set-cddaar!
identifier:	$set-cddadr!
identifier:	$set-cdadar!
identifier:	$set-cdaddr!
identifier:	$set-cdaaar!
identifier:	$set-cdaadr!
identifier:	$set-caddar!
identifier:	$set-cadddr!
identifier:	$set-cadaar!
identifier:	$set-cadadr!
identifier:	$set-caadar!
identifier:	$set-caaddr!
identifier:	$set-caaaar!
identifier:	$set-caaadr!
identifier:	$set-cddar!
identifier:	$set-cdddr!
identifier:	$set-cdaar!
identifier:	$set-cdadr!
identifier:	$set-cadar!
identifier:	$set-caddr!
identifier:	$set-caaar!
identifier:	$set-caadr!
identifier:	$set-cdar!
identifier:	$set-cddr!
identifier:	$set-caar!
identifier:	$set-cadr!
identifier:	$eq-hashtable-set!
identifier:	$symbol-hashtable-set!
identifier:	$list-set!
identifier:	$hashtable-set!
library:	( srfi :17 generalized-set!)
path:		./.akku/lib/srfi/:17/generalized-set!.chezscheme.sls
identifier:	symbol-hashtable-ref
identifier:	list-ref
identifier:	hashtable-ref
identifier:	eq-hashtable-ref
identifier:	foreign-ref
identifier:	fxvector-ref
identifier:	bytevector-u8-ref
identifier:	bytevector-uint-ref
identifier:	bytevector-u64-native-ref
identifier:	bytevector-u64-ref
identifier:	bytevector-u48-ref
identifier:	bytevector-u56-ref
identifier:	bytevector-u32-ref
identifier:	bytevector-u40-ref
identifier:	bytevector-u24-ref
identifier:	bytevector-u32-native-ref
identifier:	bytevector-u16-native-ref
identifier:	bytevector-u16-ref
identifier:	bytevector-s8-ref
identifier:	bytevector-sint-ref
identifier:	bytevector-s64-native-ref
identifier:	bytevector-s64-ref
identifier:	bytevector-s48-ref
identifier:	bytevector-s56-ref
identifier:	bytevector-s32-ref
identifier:	bytevector-s40-ref
identifier:	bytevector-s24-ref
identifier:	bytevector-s32-native-ref
identifier:	bytevector-s16-native-ref
identifier:	bytevector-s16-ref
identifier:	bytevector-ieee-single-native-ref
identifier:	bytevector-ieee-single-ref
identifier:	bytevector-ieee-double-native-ref
identifier:	bytevector-ieee-double-ref
identifier:	string-ref
identifier:	vector-ref
identifier:	cdddar
identifier:	cddddr
identifier:	cddaar
identifier:	cddadr
identifier:	cdadar
identifier:	cdaddr
identifier:	cdaaar
identifier:	cdaadr
identifier:	caddar
identifier:	cadddr
identifier:	cadaar
identifier:	cadadr
identifier:	caadar
identifier:	caaddr
identifier:	caaaar
identifier:	caaadr
identifier:	cddar
identifier:	cdddr
identifier:	cdaar
identifier:	cdadr
identifier:	cadar
identifier:	caddr
identifier:	caaar
identifier:	caadr
identifier:	cdar
identifier:	cddr
identifier:	caar
identifier:	cadr
identifier:	car
identifier:	cdr
identifier:	getter-with-setter
identifier:	set!
library:	( srfi :126)
path:		./.akku/lib/srfi/:126.chezscheme.sls
identifier:	symbol-hash
identifier:	string-hash
identifier:	string-ci-hash
identifier:	hash-salt
identifier:	equal-hash
identifier:	hashtable-weakness
identifier:	hashtable-mutable?
identifier:	hashtable-equivalence-function
identifier:	hashtable-hash-function
identifier:	hashtable-inc!
identifier:	hashtable-dec!
identifier:	hashtable-empty?
identifier:	hashtable-pop!
identifier:	hashtable-map->lset
identifier:	hashtable-find
identifier:	hashtable-merge!
identifier:	hashtable-sum
identifier:	hashtable-update-all!
identifier:	hashtable-prune!
identifier:	hashtable-entry-lists
identifier:	hashtable-walk
identifier:	hashtable-key-list
identifier:	hashtable-value-list
identifier:	hashtable-values
identifier:	hashtable-entries
identifier:	hashtable-empty-copy
identifier:	hashtable-keys
identifier:	hashtable-copy
identifier:	hashtable-clear!
identifier:	hashtable-update!
identifier:	hashtable-intern!
identifier:	hashtable-contains?
identifier:	hashtable-lookup
identifier:	hashtable-set!
identifier:	hashtable-delete!
identifier:	hashtable-size
identifier:	hashtable-ref
identifier:	weakness
identifier:	hashtable?
identifier:	alist->eqv-hashtable
identifier:	alist->hashtable
identifier:	make-hashtable
identifier:	alist->eq-hashtable
identifier:	make-eq-hashtable
identifier:	make-eqv-hashtable
library:	( srfi :126 helpers helpers)
path:		./.akku/lib/srfi/:126/helpers/helpers.chezscheme.sls
identifier:	random-integer
identifier:	set-hashtable-cell-value!
identifier:	get-environment-variable
identifier:	hashtable-cell-key
identifier:	hashtable-cell-value
identifier:	hashtable-cell-support
identifier:	hashtable-cell
identifier:	hashtable-values
identifier:	hashtable-weakness
identifier:	make-ephemeral-hashtable-procedure
identifier:	ephemeral-hashtables-supported
identifier:	make-ephemeral-eqv-hashtable-procedure
identifier:	ephemeral-eqv-hashtables-supported
identifier:	make-ephemeral-eq-hashtable-procedure
identifier:	ephemeral-eq-hashtables-supported
identifier:	make-weak-hashtable-procedure
identifier:	weak-hashtables-supported
identifier:	make-weak-eqv-hashtable-procedure
identifier:	weak-eqv-hashtables-supported
identifier:	make-weak-eq-hashtable-procedure
identifier:	weak-eq-hashtables-supported
library:	( srfi :126 r6rs-hashtables)
path:		./.akku/lib/srfi/:126/r6rs-hashtables.chezscheme.sls
identifier:	symbol-hash
identifier:	string-hash
identifier:	string-ci-hash
identifier:	hash-salt
identifier:	equal-hash
identifier:	hashtable-weakness
identifier:	hashtable-mutable?
identifier:	hashtable-equivalence-function
identifier:	hashtable-hash-function
identifier:	hashtable-inc!
identifier:	hashtable-dec!
identifier:	hashtable-empty?
identifier:	hashtable-pop!
identifier:	hashtable-map->lset
identifier:	hashtable-find
identifier:	hashtable-merge!
identifier:	hashtable-sum
identifier:	hashtable-update-all!
identifier:	hashtable-prune!
identifier:	hashtable-entry-lists
identifier:	hashtable-walk
identifier:	hashtable-key-list
identifier:	hashtable-value-list
identifier:	hashtable-values
identifier:	hashtable-entries
identifier:	hashtable-empty-copy
identifier:	hashtable-keys
identifier:	hashtable-copy
identifier:	hashtable-clear!
identifier:	hashtable-update!
identifier:	hashtable-intern!
identifier:	hashtable-contains?
identifier:	hashtable-lookup
identifier:	hashtable-set!
identifier:	hashtable-delete!
identifier:	hashtable-size
identifier:	hashtable-ref
identifier:	weakness
identifier:	hashtable?
identifier:	alist->eqv-hashtable
identifier:	alist->hashtable
identifier:	make-hashtable
identifier:	alist->eq-hashtable
identifier:	make-eq-hashtable
identifier:	make-eqv-hashtable
library:	( srfi :152)
path:		./.akku/lib/srfi/:152.chezscheme.sls
identifier:	string-copy!
identifier:	string-set!
identifier:	string-fill!
identifier:	read-string
identifier:	write-string
identifier:	string-segment
identifier:	string-split
identifier:	string-remove
identifier:	string-replicate
identifier:	string-count
identifier:	string-filter
identifier:	string-map
identifier:	string-for-each
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-concatenate-reverse
identifier:	string-join
identifier:	string-append
identifier:	string-concatenate
identifier:	string-break
identifier:	string-span
identifier:	string-drop-while
identifier:	string-drop-while-right
identifier:	string-take-while
identifier:	string-take-while-right
identifier:	string-contains
identifier:	string-contains-right
identifier:	string-skip
identifier:	string-skip-right
identifier:	string-index
identifier:	string-index-right
identifier:	string-prefix?
identifier:	string-suffix?
identifier:	string-prefix-length
identifier:	string-suffix-length
identifier:	string>=?
identifier:	string-ci>=?
identifier:	string<=?
identifier:	string-ci<=?
identifier:	string>?
identifier:	string-ci>?
identifier:	string<?
identifier:	string-ci<?
identifier:	string=?
identifier:	string-ci=?
identifier:	string-trim-both
identifier:	string-replace
identifier:	string-trim
identifier:	string-trim-right
identifier:	string-pad
identifier:	string-pad-right
identifier:	string-drop
identifier:	string-drop-right
identifier:	string-take
identifier:	string-take-right
identifier:	substring
identifier:	string-copy
identifier:	string-length
identifier:	string-ref
identifier:	list->string
identifier:	reverse-list->string
identifier:	string->list
identifier:	vector->string
identifier:	string-unfold-right
identifier:	string->vector
identifier:	string-tabulate
identifier:	string-unfold
identifier:	make-string
identifier:	string
identifier:	string-every
identifier:	string-any
identifier:	string?
identifier:	string-null?
library:	( srfi :152 strings)
path:		./.akku/lib/srfi/:152/strings.chezscheme.sls
identifier:	string-copy!
identifier:	string-set!
identifier:	string-fill!
identifier:	read-string
identifier:	write-string
identifier:	string-segment
identifier:	string-split
identifier:	string-remove
identifier:	string-replicate
identifier:	string-count
identifier:	string-filter
identifier:	string-map
identifier:	string-for-each
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-concatenate-reverse
identifier:	string-join
identifier:	string-append
identifier:	string-concatenate
identifier:	string-break
identifier:	string-span
identifier:	string-drop-while
identifier:	string-drop-while-right
identifier:	string-take-while
identifier:	string-take-while-right
identifier:	string-contains
identifier:	string-contains-right
identifier:	string-skip
identifier:	string-skip-right
identifier:	string-index
identifier:	string-index-right
identifier:	string-prefix?
identifier:	string-suffix?
identifier:	string-prefix-length
identifier:	string-suffix-length
identifier:	string>=?
identifier:	string-ci>=?
identifier:	string<=?
identifier:	string-ci<=?
identifier:	string>?
identifier:	string-ci>?
identifier:	string<?
identifier:	string-ci<?
identifier:	string=?
identifier:	string-ci=?
identifier:	string-trim-both
identifier:	string-replace
identifier:	string-trim
identifier:	string-trim-right
identifier:	string-pad
identifier:	string-pad-right
identifier:	string-drop
identifier:	string-drop-right
identifier:	string-take
identifier:	string-take-right
identifier:	substring
identifier:	string-copy
identifier:	string-length
identifier:	string-ref
identifier:	list->string
identifier:	reverse-list->string
identifier:	string->list
identifier:	vector->string
identifier:	string-unfold-right
identifier:	string->vector
identifier:	string-tabulate
identifier:	string-unfold
identifier:	make-string
identifier:	string
identifier:	string-every
identifier:	string-any
identifier:	string?
identifier:	string-null?
library:	( srfi :42)
path:		./.akku/lib/srfi/:42.chezscheme.sls
identifier:	vector-of-length-ec
identifier:	sum-ec
identifier:	vector-ec
identifier:	string-append-ec
identifier:	string-ec
identifier:	min-ec
identifier:	product-ec
identifier:	make-initial-:-dispatch
identifier:	max-ec
identifier:	last-ec
identifier:	list-ec
identifier:	fold-ec
identifier:	fold3-ec
identifier:	every?-ec
identifier:	first-ec
identifier:	dispatch-union
identifier:	do-ec
identifier:	any?-ec
identifier:	append-ec
identifier:	:vector
identifier:	:while
identifier:	:string
identifier:	:until
identifier:	:range
identifier:	:real-range
identifier:	:parallel
identifier:	:port
identifier:	:let
identifier:	:list
identifier:	:generator-proc
identifier:	:integers
identifier:	:dispatched
identifier:	:do
identifier:	:-dispatch-set!
identifier:	:char-range
identifier:	:
identifier:	:-dispatch-ref
library:	( srfi :42 eager-comprehensions)
path:		./.akku/lib/srfi/:42/eager-comprehensions.chezscheme.sls
identifier:	:generator-proc
identifier:	make-initial-:-dispatch
identifier:	dispatch-union
identifier:	:-dispatch-ref
identifier:	:-dispatch-set!
identifier:	:while
identifier:	:until
identifier:	:let
identifier:	:parallel
identifier:	:dispatched
identifier:	:do
identifier:	:char-range
identifier:	:port
identifier:	:range
identifier:	:real-range
identifier:	:vector
identifier:	:integers
identifier:	:list
identifier:	:string
identifier:	fold3-ec
identifier:	:
identifier:	last-ec
identifier:	fold-ec
identifier:	every?-ec
identifier:	first-ec
identifier:	max-ec
identifier:	any?-ec
identifier:	product-ec
identifier:	min-ec
identifier:	vector-of-length-ec
identifier:	sum-ec
identifier:	string-append-ec
identifier:	vector-ec
identifier:	append-ec
identifier:	string-ec
identifier:	do-ec
identifier:	list-ec
library:	( srfi :27)
path:		./.akku/lib/srfi/:27.chezscheme.sls
identifier:	random-source?
identifier:	random-source-state-ref
identifier:	random-source-state-set!
identifier:	random-source-pseudo-randomize!
identifier:	random-source-randomize!
identifier:	random-source-make-integers
identifier:	random-source-make-reals
identifier:	random-integer
identifier:	random-real
identifier:	default-random-source
identifier:	make-random-source
library:	( srfi :27 random-bits)
path:		./.akku/lib/srfi/:27/random-bits.chezscheme.sls
identifier:	random-source-make-reals
identifier:	random-source-pseudo-randomize!
identifier:	random-source-make-integers
identifier:	random-source-state-set!
identifier:	random-source-randomize!
identifier:	random-source?
identifier:	random-source-state-ref
identifier:	default-random-source
identifier:	make-random-source
identifier:	random-integer
identifier:	random-real
library:	( srfi :26)
path:		./.akku/lib/srfi/:26.chezscheme.sls
identifier:	<>
identifier:	<...>
identifier:	cut
identifier:	cute
library:	( srfi :26 cut)
path:		./.akku/lib/srfi/:26/cut.chezscheme.sls
identifier:	<>
identifier:	<...>
identifier:	cut
identifier:	cute
library:	( srfi :111)
path:		./.akku/lib/srfi/:111.chezscheme.sls
identifier:	unbox
identifier:	set-box!
identifier:	box
identifier:	box?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( srfi :111 boxes)
path:		./.akku/lib/srfi/:111/boxes.chezscheme.sls
identifier:	unbox
identifier:	set-box!
identifier:	box
identifier:	box?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( srfi :11)
path:		./.akku/lib/srfi/:11.chezscheme.sls
identifier:	let*-values
identifier:	let-values
library:	( srfi :11 let-values)
path:		./.akku/lib/srfi/:11/let-values.chezscheme.sls
identifier:	let-values
identifier:	let*-values
library:	( srfi :29)
path:		./.akku/lib/srfi/:29.chezscheme.sls
identifier:	load-bundle!
identifier:	localized-template
identifier:	store-bundle
identifier:	store-bundle!
identifier:	current-locale-details
identifier:	declare-bundle!
identifier:	current-language
identifier:	current-country
library:	( srfi :29 localization)
path:		./.akku/lib/srfi/:29/localization.chezscheme.sls
identifier:	load-bundle!
identifier:	localized-template
identifier:	store-bundle
identifier:	store-bundle!
identifier:	current-locale-details
identifier:	declare-bundle!
identifier:	current-language
identifier:	current-country
library:	( srfi :151)
path:		./.akku/lib/srfi/:151.chezscheme.sls
identifier:	make-bitwise-generator
type:		(([identifier-refrence boolean?] <- (inner:list? ) ) <- (inner:list? something? ) ) 
identifier:	bitwise-for-each
identifier:	bitwise-unfold
identifier:	bits
identifier:	bitwise-fold
identifier:	bits->vector
identifier:	vector->bits
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	bits->list
type:		((inner:list? ) <- (inner:list? [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? ) <- (inner:list? something? ) ) 
identifier:	list->bits
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	bit-field-rotate
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] something? ) ) 
identifier:	bit-field-reverse
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	bit-field-replace
identifier:	bit-field-replace-same
identifier:	bit-field-clear
identifier:	bit-field-set
identifier:	bit-field-any?
identifier:	bit-field-every?
identifier:	first-set-bit
identifier:	bit-field
identifier:	any-bit-set?
identifier:	every-bit-set?
identifier:	copy-bit
identifier:	bit-swap
identifier:	bitwise-if
identifier:	bit-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	bit-count
identifier:	integer-length
identifier:	bitwise-orc2
identifier:	arithmetic-shift
identifier:	bitwise-andc2
identifier:	bitwise-orc1
identifier:	bitwise-nor
identifier:	bitwise-andc1
identifier:	bitwise-eqv
identifier:	bitwise-nand
identifier:	bitwise-ior
identifier:	bitwise-xor
identifier:	bitwise-not
identifier:	bitwise-and
library:	( srfi :151 bitwise-operations)
path:		./.akku/lib/srfi/:151/bitwise-operations.chezscheme.sls
identifier:	make-bitwise-generator
type:		(([identifier-refrence boolean?] <- (inner:list? ) ) <- (inner:list? something? ) ) 
identifier:	bitwise-for-each
identifier:	bitwise-unfold
identifier:	bits
identifier:	bitwise-fold
identifier:	bits->vector
identifier:	vector->bits
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	bits->list
type:		((inner:list? ) <- (inner:list? [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? ) <- (inner:list? something? ) ) 
identifier:	list->bits
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	bit-field-rotate
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence real?] [identifier-refrence fixnum?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence fixnum?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? [identifier-refrence integer?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] something? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] something? ) ) 
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence fixnum?] something? ) ) 
identifier:	bit-field-reverse
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	bit-field-replace
identifier:	bit-field-replace-same
identifier:	bit-field-clear
identifier:	bit-field-set
identifier:	bit-field-any?
identifier:	bit-field-every?
identifier:	first-set-bit
identifier:	bit-field
identifier:	any-bit-set?
identifier:	every-bit-set?
identifier:	copy-bit
identifier:	bit-swap
identifier:	bitwise-if
identifier:	bit-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	bit-count
identifier:	integer-length
identifier:	bitwise-orc2
identifier:	arithmetic-shift
identifier:	bitwise-andc2
identifier:	bitwise-orc1
identifier:	bitwise-nor
identifier:	bitwise-andc1
identifier:	bitwise-eqv
identifier:	bitwise-nand
identifier:	bitwise-ior
identifier:	bitwise-xor
identifier:	bitwise-not
identifier:	bitwise-and
library:	( srfi :37)
path:		./.akku/lib/srfi/:37.chezscheme.sls
identifier:	option?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	option-processor
identifier:	option-required-arg?
identifier:	option-names
identifier:	option-optional-arg?
identifier:	args-fold
identifier:	option
type:		([identifier-refrence option?] <- (inner:list? something? ... ) ) 
library:	( srfi :37 args-fold)
path:		./.akku/lib/srfi/:37/args-fold.chezscheme.sls
identifier:	option-processor
identifier:	option-required-arg?
identifier:	option-optional-arg?
identifier:	option?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	option-names
identifier:	args-fold
identifier:	option
type:		([identifier-refrence option?] <- (inner:list? something? ... ) ) 
library:	( srfi :51)
path:		./.akku/lib/srfi/:51.chezscheme.sls
identifier:	err-ors
identifier:	arg-ors
identifier:	err-or
identifier:	err-ands
identifier:	arg-or
identifier:	arg-ands
identifier:	err-and
identifier:	rest-values
identifier:	arg-and
library:	( srfi :51 rest-values)
path:		./.akku/lib/srfi/:51/rest-values.chezscheme.sls
identifier:	err-ors
identifier:	arg-ors
identifier:	err-or
identifier:	err-ands
identifier:	arg-or
identifier:	arg-ands
identifier:	err-and
identifier:	rest-values
identifier:	arg-and
library:	( srfi :143)
path:		./.akku/lib/srfi/:143.chezscheme.sls
identifier:	fxbit-field-rotate
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] ) ) 
identifier:	fxbit-field-reverse
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxfirst-set-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-field
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxcopy-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxcopy-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-set?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-set?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxlength
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxif
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift-right
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-count
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift-left
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxior
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fxxor
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fxnot
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxand
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx-/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fx*/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxsqrt
identifier:	fx+/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxabs
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxsquare
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxquotient
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxremainder
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxneg
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	fx*
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx+
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx-
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxmax
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxmin
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxodd?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxeven?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxpositive?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxnegative?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fx>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxzero?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fx>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx-least
type:		[identifier-refrence fixnum?] 
identifier:	fixnum?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	fx-width
identifier:	fx-greatest
type:		[identifier-refrence fixnum?] 
library:	( srfi :143 fixnums)
path:		./.akku/lib/srfi/:143/fixnums.chezscheme.sls
identifier:	fxbit-field-rotate
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence number?] ) ) 
identifier:	fxbit-field-reverse
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxfirst-set-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-field
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxcopy-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxcopy-bit
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-set?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-set?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxlength
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxif
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift-right
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxbit-count
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxarithmetic-shift-left
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxior
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fxxor
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fxnot
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxand
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx-/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fx*/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxsqrt
identifier:	fx+/carry
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxabs
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxsquare
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxquotient
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxremainder
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
identifier:	fxneg
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	fx*
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx+
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ... ) ) 
identifier:	fx-
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxmax
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxmin
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxodd?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxeven?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxpositive?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxnegative?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fx>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxzero?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fx>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] **1 ) ) 
identifier:	fx-least
type:		[identifier-refrence fixnum?] 
identifier:	fixnum?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	fx-width
identifier:	fx-greatest
type:		[identifier-refrence fixnum?] 
library:	( srfi :143 helpers)
path:		./.akku/lib/srfi/:143/helpers.chezscheme.sls
identifier:	fxquotient
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] **1 ) ) 
identifier:	fxabs
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	fxremainder
type:		([identifier-refrence fixnum?] <- (inner:list? [identifier-refrence fixnum?] [identifier-refrence fixnum?] ) ) 
library:	( srfi :39)
path:		./.akku/lib/srfi/:39.chezscheme.sls
identifier:	make-parameter
identifier:	parameterize
library:	( srfi :39 parameters)
path:		./.akku/lib/srfi/:39/parameters.chezscheme.sls
identifier:	make-parameter
identifier:	parameterize
library:	( srfi :145)
path:		./.akku/lib/srfi/:145.chezscheme.sls
identifier:	assume
library:	( srfi :145 assumptions)
path:		./.akku/lib/srfi/:145/assumptions.chezscheme.sls
identifier:	assume
library:	( srfi :23)
path:		./.akku/lib/srfi/:23.chezscheme.sls
identifier:	error
library:	( srfi :23 error)
path:		./.akku/lib/srfi/:23/error.chezscheme.sls
identifier:	error
library:	( srfi :23 error tricks)
path:		./.akku/lib/srfi/:23/error/tricks.chezscheme.sls
identifier:	SRFI-23-error->R6RS
library:	( srfi :129)
path:		./.akku/lib/srfi/:129.chezscheme.sls
identifier:	string-titlecase
identifier:	char-title-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-titlecase
library:	( srfi :129 titlecase)
path:		./.akku/lib/srfi/:129/titlecase.chezscheme.sls
identifier:	string-titlecase
identifier:	char-title-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-titlecase
library:	( srfi :41)
path:		./.akku/lib/srfi/:41.chezscheme.sls
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream-zip
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream-unfold
identifier:	stream-unfolds
identifier:	stream-take
identifier:	stream-take-while
identifier:	stream-reverse
identifier:	stream-scan
identifier:	stream-range
identifier:	stream-ref
type:		(void? <- (inner:list? something? something? ) ) 
type:		(void? <- (inner:list? something? [identifier-refrence real?] ) ) 
identifier:	stream-pair?
identifier:	stream-pair?
identifier:	stream-null?
identifier:	stream-of
identifier:	stream-null
identifier:	stream-null?
identifier:	stream-match
identifier:	stream-null
identifier:	stream-let
identifier:	stream-map
identifier:	stream-lambda
identifier:	stream-length
type:		([identifier-refrence number?] <- (inner:list? something? ) ) 
type:		(void? <- (inner:list? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	stream-iterate
identifier:	stream-lambda
identifier:	stream-for-each
identifier:	stream-from
identifier:	stream-filter
identifier:	stream-fold
type:		(void? <- (inner:list? something? something? something? ) ) 
identifier:	stream-drop
identifier:	stream-drop-while
identifier:	stream-cons
identifier:	stream-constant
identifier:	stream-concat
identifier:	stream-cons
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream->list
identifier:	stream-append
identifier:	port->stream
identifier:	stream
identifier:	define-stream
identifier:	list->stream
library:	( srfi :41 streams)
path:		./.akku/lib/srfi/:41/streams.chezscheme.sls
identifier:	stream-zip
identifier:	stream-unfold
identifier:	stream-unfolds
identifier:	stream-take
identifier:	stream-take-while
identifier:	stream-reverse
identifier:	stream-scan
identifier:	stream-range
identifier:	stream-ref
type:		(void? <- (inner:list? something? something? ) ) 
type:		(void? <- (inner:list? something? [identifier-refrence real?] ) ) 
identifier:	stream-match
identifier:	stream-of
identifier:	stream-let
identifier:	stream-map
identifier:	stream-iterate
identifier:	stream-length
type:		([identifier-refrence number?] <- (inner:list? something? ) ) 
type:		(void? <- (inner:list? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	stream-for-each
identifier:	stream-from
identifier:	stream-filter
identifier:	stream-fold
type:		(void? <- (inner:list? something? something? something? ) ) 
identifier:	stream-drop
identifier:	stream-drop-while
identifier:	stream-concat
identifier:	stream-constant
identifier:	stream->list
identifier:	stream-append
identifier:	port->stream
identifier:	stream
identifier:	define-stream
identifier:	list->stream
identifier:	stream-lambda
identifier:	stream-lambda
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-pair?
identifier:	stream-pair?
identifier:	stream-null?
identifier:	stream-null?
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream-cons
identifier:	stream-cons
identifier:	stream-null
identifier:	stream-null
library:	( srfi :41 streams derived)
path:		./.akku/lib/srfi/:41/streams/derived.chezscheme.sls
identifier:	stream-zip
identifier:	stream-unfold
identifier:	stream-unfolds
identifier:	stream-take
identifier:	stream-take-while
identifier:	stream-reverse
identifier:	stream-scan
identifier:	stream-range
identifier:	stream-ref
type:		(void? <- (inner:list? something? something? ) ) 
type:		(void? <- (inner:list? something? [identifier-refrence real?] ) ) 
identifier:	stream-match
identifier:	stream-of
identifier:	stream-let
identifier:	stream-map
identifier:	stream-iterate
identifier:	stream-length
type:		([identifier-refrence number?] <- (inner:list? something? ) ) 
type:		(void? <- (inner:list? something? ) ) 
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	stream-for-each
identifier:	stream-from
identifier:	stream-filter
identifier:	stream-fold
type:		(void? <- (inner:list? something? something? something? ) ) 
identifier:	stream-drop
identifier:	stream-drop-while
identifier:	stream-concat
identifier:	stream-constant
identifier:	stream->list
identifier:	stream-append
identifier:	port->stream
identifier:	stream
identifier:	define-stream
identifier:	list->stream
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-lambda
identifier:	stream-pair?
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream-null?
identifier:	stream-null
identifier:	stream-cons
library:	( srfi :41 streams primitive)
path:		./.akku/lib/srfi/:41/streams/primitive.chezscheme.sls
identifier:	stream-cdr
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream-lambda
identifier:	stream-pair?
identifier:	stream-car
type:		(void? <- (inner:list? something? ) ) 
identifier:	stream?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	stream-null?
identifier:	stream-null
identifier:	stream-cons
library:	( srfi :130)
path:		./.akku/lib/srfi/:130.chezscheme.sls
identifier:	string-remove
identifier:	string-split
identifier:	string-filter
identifier:	string-count
identifier:	string-replace
identifier:	string-for-each-cursor
identifier:	string-replicate
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-concatenate
identifier:	string-concatenate-reverse
identifier:	string-contains-right
identifier:	string-reverse
identifier:	string-skip-right
identifier:	string-contains
identifier:	string-index-right
identifier:	string-skip
identifier:	string-suffix?
identifier:	string-index
identifier:	string-suffix-length
identifier:	string-prefix?
identifier:	string-trim-both
identifier:	string-prefix-length
identifier:	string-trim
identifier:	string-trim-right
identifier:	string-pad
identifier:	string-pad-right
identifier:	string-drop
identifier:	string-drop-right
identifier:	string-take
identifier:	string-take-right
identifier:	substring/cursors
identifier:	string-copy/cursors
identifier:	string-join
identifier:	string-ref/cursor
identifier:	string->vector/cursors
identifier:	reverse-list->string
identifier:	string-unfold-right
identifier:	string->list/cursors
identifier:	string-tabulate
identifier:	string-unfold
identifier:	string-every
identifier:	string-any
identifier:	string-index->cursor
identifier:	string-null?
identifier:	string-cursor-diff
identifier:	string-cursor->index
identifier:	string-cursor<=?
identifier:	string-cursor>=?
identifier:	string-cursor<?
identifier:	string-cursor>?
identifier:	string-cursor-back
identifier:	string-cursor=?
identifier:	string-cursor-prev
identifier:	string-cursor-forward
identifier:	string-cursor-end
identifier:	string-cursor-next
identifier:	string-cursor?
identifier:	string-cursor-start
library:	( srfi :130 string-cursors)
path:		./.akku/lib/srfi/:130/string-cursors.chezscheme.sls
identifier:	string-remove
identifier:	string-split
identifier:	string-filter
identifier:	string-count
identifier:	string-replace
identifier:	string-for-each-cursor
identifier:	string-replicate
identifier:	string-fold
identifier:	string-fold-right
identifier:	string-concatenate
identifier:	string-concatenate-reverse
identifier:	string-contains-right
identifier:	string-reverse
identifier:	string-skip-right
identifier:	string-contains
identifier:	string-index-right
identifier:	string-skip
identifier:	string-suffix?
identifier:	string-index
identifier:	string-suffix-length
identifier:	string-prefix?
identifier:	string-trim-both
identifier:	string-prefix-length
identifier:	string-trim
identifier:	string-trim-right
identifier:	string-pad
identifier:	string-pad-right
identifier:	string-drop
identifier:	string-drop-right
identifier:	string-take
identifier:	string-take-right
identifier:	substring/cursors
identifier:	string-copy/cursors
identifier:	string-join
identifier:	string-ref/cursor
identifier:	string->vector/cursors
identifier:	reverse-list->string
identifier:	string-unfold-right
identifier:	string->list/cursors
identifier:	string-tabulate
identifier:	string-unfold
identifier:	string-every
identifier:	string-any
identifier:	string-index->cursor
identifier:	string-null?
identifier:	string-cursor-diff
identifier:	string-cursor->index
identifier:	string-cursor<=?
identifier:	string-cursor>=?
identifier:	string-cursor<?
identifier:	string-cursor>?
identifier:	string-cursor-back
identifier:	string-cursor=?
identifier:	string-cursor-prev
identifier:	string-cursor-forward
identifier:	string-cursor-end
identifier:	string-cursor-next
identifier:	string-cursor?
identifier:	string-cursor-start
library:	( srfi :48)
path:		./.akku/lib/srfi/:48.chezscheme.sls
identifier:	format
library:	( srfi :48 intermediate-format-strings)
path:		./.akku/lib/srfi/:48/intermediate-format-strings.chezscheme.sls
identifier:	format
library:	( srfi :48 intermediate-format-strings compat)
path:		./.akku/lib/srfi/:48/intermediate-format-strings/compat.chezscheme.sls
identifier:	pretty-print
type:		(void? <- (inner:list? something? [identifier-refrence textual-port?] ) ) 
type:		(void? <- (inner:list? something? ) ) 
library:	( srfi :64)
path:		./.akku/lib/srfi/:64.chezscheme.sls
identifier:	test-skip
identifier:	test-with-runner
identifier:	test-runner-xpass-count!
identifier:	test-runner?
identifier:	test-runner-xfail-count!
identifier:	test-runner-xpass-count
identifier:	test-runner-test-name
identifier:	test-runner-xfail-count
identifier:	test-runner-skip-count
identifier:	test-runner-skip-count!
identifier:	test-runner-reset
identifier:	test-runner-simple
identifier:	test-runner-pass-count
identifier:	test-runner-pass-count!
identifier:	test-runner-on-test-end
identifier:	test-runner-on-test-end!
identifier:	test-runner-on-test-begin
identifier:	test-runner-on-test-begin!
identifier:	test-runner-on-group-end
identifier:	test-runner-on-group-end!
identifier:	test-runner-on-group-begin
identifier:	test-runner-on-group-begin!
identifier:	test-runner-on-final
identifier:	test-runner-on-final!
identifier:	test-runner-on-bad-end-name
identifier:	test-runner-on-bad-end-name!
identifier:	test-runner-on-bad-count
identifier:	test-runner-on-bad-count!
identifier:	test-runner-group-stack!
identifier:	test-runner-null
identifier:	test-runner-group-path
identifier:	test-runner-group-stack
identifier:	test-runner-fail-count!
identifier:	test-runner-get
identifier:	test-runner-factory
identifier:	test-runner-fail-count
identifier:	test-runner-create
identifier:	test-runner-current
identifier:	test-runner-aux-value
identifier:	test-runner-aux-value!
identifier:	test-result-remove
identifier:	test-result-set!
identifier:	test-result-kind
identifier:	test-result-ref
identifier:	test-result-alist!
identifier:	test-result-clear
identifier:	test-read-eval-string
identifier:	test-result-alist
identifier:	test-on-test-end-simple
identifier:	test-passed?
identifier:	test-on-group-begin-simple
identifier:	test-on-group-end-simple
identifier:	test-on-bad-end-name-simple
identifier:	test-on-final-simple
identifier:	test-match-nth
identifier:	test-on-bad-count-simple
identifier:	test-match-any
identifier:	test-match-name
identifier:	test-log-to-file
identifier:	test-match-all
identifier:	test-group
identifier:	test-group-with-cleanup
identifier:	test-error
identifier:	test-expect-fail
identifier:	test-equal
identifier:	test-eqv
identifier:	test-end
identifier:	test-eq
identifier:	test-assert
identifier:	test-begin
identifier:	test-apply
identifier:	test-approximate
library:	( srfi :64 testing)
path:		./.akku/lib/srfi/:64/testing.chezscheme.sls
identifier:	test-on-final-simple
identifier:	test-on-test-end-simple
identifier:	test-on-bad-count-simple
identifier:	test-on-bad-end-name-simple
identifier:	test-on-group-begin-simple
identifier:	test-on-group-end-simple
identifier:	test-runner-aux-value
identifier:	test-runner-aux-value!
identifier:	test-result-alist
identifier:	test-result-alist!
identifier:	test-runner-on-bad-end-name
identifier:	test-runner-on-bad-end-name!
identifier:	test-runner-on-bad-count
identifier:	test-runner-on-bad-count!
identifier:	test-runner-on-final
identifier:	test-runner-on-final!
identifier:	test-runner-on-group-end
identifier:	test-runner-on-group-end!
identifier:	test-runner-on-group-begin
identifier:	test-runner-on-group-begin!
identifier:	test-runner-on-test-end
identifier:	test-runner-on-test-end!
identifier:	test-runner-on-test-begin
identifier:	test-runner-on-test-begin!
identifier:	test-runner-group-stack
identifier:	test-runner-group-stack!
identifier:	test-runner-skip-count
identifier:	test-runner-skip-count!
identifier:	test-runner-xfail-count
identifier:	test-runner-xfail-count!
identifier:	test-runner-xpass-count
identifier:	test-runner-xpass-count!
identifier:	test-runner-fail-count
identifier:	test-runner-fail-count!
identifier:	test-runner-pass-count
identifier:	test-runner-pass-count!
identifier:	test-runner-create
identifier:	test-runner-test-name
identifier:	test-runner-factory
identifier:	test-runner-get
identifier:	test-runner-simple
identifier:	test-runner-current
identifier:	test-runner-reset
identifier:	test-runner-null
identifier:	test-log-to-file
identifier:	test-runner?
identifier:	test-result-kind
identifier:	test-passed?
identifier:	test-result-clear
identifier:	test-result-remove
identifier:	test-result-ref
identifier:	test-result-set!
identifier:	test-runner-group-path
identifier:	test-group-with-cleanup
identifier:	test-read-eval-string
identifier:	test-group
identifier:	test-skip
identifier:	test-expect-fail
identifier:	test-match-any
identifier:	test-match-name
identifier:	test-match-nth
identifier:	test-match-all
identifier:	test-apply
identifier:	test-with-runner
identifier:	test-approximate
identifier:	test-error
identifier:	test-eq
identifier:	test-equal
identifier:	test-assert
identifier:	test-eqv
identifier:	test-begin
identifier:	test-end
library:	( srfi :35)
path:		./.akku/lib/srfi/:35.chezscheme.sls
identifier:	&serious
identifier:	&error
identifier:	&condition
identifier:	&condition
identifier:	condition
identifier:	condition
identifier:	define-condition-type
identifier:	define-condition-type
identifier:	make-compound-condition
identifier:	extract-condition
identifier:	condition-has-type?
identifier:	condition-ref
identifier:	make-condition
identifier:	condition?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	make-condition-type
identifier:	condition-type?
library:	( srfi :35 conditions)
path:		./.akku/lib/srfi/:35/conditions.chezscheme.sls
identifier:	condition-message
identifier:	&message
identifier:	message-condition?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	&error
identifier:	error?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	&serious
identifier:	serious-condition?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	condition
identifier:	condition
identifier:	make-condition
identifier:	condition?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	&condition
identifier:	&condition
identifier:	define-condition-type
identifier:	define-condition-type
identifier:	make-compound-condition
identifier:	extract-condition
identifier:	condition-has-type?
identifier:	condition-ref
identifier:	make-condition-type
identifier:	condition-type?
library:	( srfi :28)
path:		./.akku/lib/srfi/:28.chezscheme.sls
identifier:	format
library:	( srfi :28 basic-format-strings)
path:		./.akku/lib/srfi/:28/basic-format-strings.chezscheme.sls
identifier:	format
library:	( srfi :1)
path:		./.akku/lib/srfi/:1.chezscheme.sls
identifier:	zip
identifier:	unzip5
identifier:	xcons
identifier:	unzip3
identifier:	unzip4
identifier:	unzip1
identifier:	unzip2
identifier:	unfold
identifier:	unfold-right
identifier:	tenth
identifier:	third
identifier:	take-while
identifier:	take-while!
identifier:	take!
identifier:	take-right
identifier:	split-at!
identifier:	take
identifier:	span!
identifier:	split-at
identifier:	sixth
identifier:	span
identifier:	set-cdr!
identifier:	seventh
identifier:	second
identifier:	set-car!
identifier:	reverse
identifier:	reverse!
identifier:	remove
identifier:	remove!
identifier:	reduce
identifier:	reduce-right
identifier:	partition!
identifier:	proper-list?
identifier:	pair?
identifier:	partition
identifier:	pair-fold-right
identifier:	pair-for-each
identifier:	null?
identifier:	pair-fold
identifier:	not-pair?
identifier:	null-list?
identifier:	memv
identifier:	ninth
identifier:	member
identifier:	memq
identifier:	map!
identifier:	map-in-order
identifier:	make-list
identifier:	map
identifier:	lset<=
identifier:	lset=
identifier:	lset-xor
identifier:	lset-xor!
identifier:	lset-union
identifier:	lset-union!
identifier:	lset-intersection
identifier:	lset-intersection!
identifier:	lset-difference
identifier:	lset-difference!
identifier:	lset-diff+intersection
identifier:	lset-diff+intersection!
identifier:	list=
identifier:	lset-adjoin
identifier:	list-ref
identifier:	list-tabulate
identifier:	list-copy
identifier:	list-index
identifier:	length+
identifier:	list
identifier:	last-pair
identifier:	length
identifier:	iota
identifier:	last
identifier:	for-each
identifier:	fourth
identifier:	fold
identifier:	fold-right
identifier:	find-tail
identifier:	first
identifier:	filter-map
identifier:	find
identifier:	filter
identifier:	filter!
identifier:	every
identifier:	fifth
identifier:	drop-while
identifier:	eighth
identifier:	drop-right
identifier:	drop-right!
identifier:	dotted-list?
identifier:	drop
identifier:	delete-duplicates
identifier:	delete-duplicates!
identifier:	delete
identifier:	delete!
identifier:	cons*
identifier:	count
identifier:	concatenate!
identifier:	cons
identifier:	circular-list?
identifier:	concatenate
identifier:	cdr
identifier:	circular-list
identifier:	cdddr
identifier:	cddr
identifier:	cdddar
identifier:	cddddr
identifier:	cddadr
identifier:	cddar
identifier:	cdar
identifier:	cddaar
identifier:	cdaddr
identifier:	cdadr
identifier:	cdaar
identifier:	cdadar
identifier:	cdaaar
identifier:	cdaadr
identifier:	car
identifier:	car+cdr
identifier:	caddr
identifier:	cadr
identifier:	caddar
identifier:	cadddr
identifier:	cadadr
identifier:	cadar
identifier:	caar
identifier:	cadaar
identifier:	caaddr
identifier:	caadr
identifier:	caaar
identifier:	caadar
identifier:	caaaar
identifier:	caaadr
identifier:	break
identifier:	break!
identifier:	assq
identifier:	assv
identifier:	append-reverse!
identifier:	assoc
identifier:	append-map!
identifier:	append-reverse
identifier:	append!
identifier:	append-map
identifier:	any
identifier:	append
identifier:	alist-delete
identifier:	alist-delete!
identifier:	alist-cons
identifier:	alist-copy
library:	( srfi :1 lists)
path:		./.akku/lib/srfi/:1/lists.chezscheme.sls
identifier:	remove
identifier:	member
identifier:	partition
identifier:	for-each
identifier:	map
identifier:	find
identifier:	fold-right
identifier:	assoc
identifier:	filter
identifier:	set-car!
identifier:	set-cdr!
identifier:	pair?
identifier:	reverse
identifier:	memv
identifier:	null?
identifier:	list-ref
identifier:	memq
identifier:	length
identifier:	list
identifier:	cons
identifier:	cons*
identifier:	cddr
identifier:	cdr
identifier:	cddddr
identifier:	cdddr
identifier:	cddar
identifier:	cdddar
identifier:	cddaar
identifier:	cddadr
identifier:	cdadr
identifier:	cdar
identifier:	cdadar
identifier:	cdaddr
identifier:	cdaadr
identifier:	cdaar
identifier:	car
identifier:	cdaaar
identifier:	caddr
identifier:	cadr
identifier:	caddar
identifier:	cadddr
identifier:	cadadr
identifier:	cadar
identifier:	caar
identifier:	cadaar
identifier:	caaddr
identifier:	caadr
identifier:	caaar
identifier:	caadar
identifier:	caaaar
identifier:	caaadr
identifier:	assq
identifier:	assv
identifier:	lset-diff+intersection!
identifier:	append
identifier:	lset-difference!
identifier:	lset-xor!
identifier:	lset-union!
identifier:	lset-intersection!
identifier:	lset-xor
identifier:	lset-diff+intersection
identifier:	lset-intersection
identifier:	lset-difference
identifier:	lset-adjoin
identifier:	lset-union
identifier:	lset<=
identifier:	lset=
identifier:	alist-delete!
identifier:	reverse!
identifier:	delete-duplicates!
identifier:	alist-delete
identifier:	alist-copy
identifier:	delete-duplicates
identifier:	delete!
identifier:	alist-cons
identifier:	break!
identifier:	delete
identifier:	break
identifier:	span!
identifier:	take-while!
identifier:	span
identifier:	take-while
identifier:	drop-while
identifier:	every
identifier:	list-index
identifier:	find-tail
identifier:	any
identifier:	partition!
identifier:	remove!
identifier:	map-in-order
identifier:	filter!
identifier:	pair-for-each
identifier:	filter-map
identifier:	append-map!
identifier:	map!
identifier:	reduce-right
identifier:	append-map
identifier:	unfold-right
identifier:	pair-fold-right
identifier:	pair-fold
identifier:	reduce
identifier:	unfold
identifier:	fold
identifier:	concatenate
identifier:	concatenate!
identifier:	append-reverse
identifier:	append-reverse!
identifier:	count
identifier:	append!
identifier:	unzip4
identifier:	unzip5
identifier:	unzip2
identifier:	unzip3
identifier:	zip
identifier:	unzip1
identifier:	last
identifier:	last-pair
identifier:	split-at
identifier:	split-at!
identifier:	take!
identifier:	drop-right!
identifier:	take-right
identifier:	drop-right
identifier:	take
identifier:	drop
identifier:	tenth
identifier:	car+cdr
identifier:	eighth
identifier:	ninth
identifier:	sixth
identifier:	seventh
identifier:	fourth
identifier:	fifth
identifier:	second
identifier:	third
identifier:	iota
identifier:	first
identifier:	circular-list
identifier:	length+
identifier:	null-list?
identifier:	list=
identifier:	dotted-list?
identifier:	not-pair?
identifier:	proper-list?
identifier:	circular-list?
identifier:	list-tabulate
identifier:	list-copy
identifier:	xcons
identifier:	make-list
library:	( srfi :16)
path:		./.akku/lib/srfi/:16.chezscheme.sls
identifier:	case-lambda
library:	( srfi :16 case-lambda)
path:		./.akku/lib/srfi/:16/case-lambda.chezscheme.sls
identifier:	case-lambda
library:	( srfi :8)
path:		./.akku/lib/srfi/:8.chezscheme.sls
identifier:	receive
library:	( srfi :8 receive)
path:		./.akku/lib/srfi/:8/receive.chezscheme.sls
identifier:	receive
library:	( srfi :116)
path:		./.akku/lib/srfi/:116.chezscheme.sls
identifier:	iapply
identifier:	gtree->itree
identifier:	gtree->tree
identifier:	tree->itree
identifier:	itree->tree
identifier:	list->ilist
identifier:	ilist->list
identifier:	pair->ipair
identifier:	ipair->pair
identifier:	replace-icar
identifier:	replace-icdr
identifier:	ialist-cons
identifier:	ialist-delete
identifier:	iassq
identifier:	iassv
identifier:	idelete-duplicates
identifier:	iassoc
identifier:	ibreak
identifier:	idelete
identifier:	idrop-while
identifier:	ispan
identifier:	ilist-index
identifier:	itake-while
identifier:	iany
identifier:	ievery
identifier:	ifind
identifier:	ifind-tail
identifier:	imemq
identifier:	imemv
identifier:	iremove
identifier:	imember
identifier:	ifilter
identifier:	ipartition
identifier:	ifilter-map
identifier:	imap-in-order
identifier:	iappend-map
identifier:	ipair-for-each
identifier:	ipair-fold-right
identifier:	ireduce-right
identifier:	ifold-right
identifier:	iunfold-right
identifier:	ipair-fold
identifier:	ireduce
identifier:	ifold
identifier:	iunfold
identifier:	imap
identifier:	ifor-each
identifier:	iunzip5
identifier:	icount
identifier:	iunzip3
identifier:	iunzip4
identifier:	iunzip1
identifier:	iunzip2
identifier:	iappend-reverse
identifier:	izip
identifier:	iconcatenate
identifier:	ireverse
identifier:	ilength
identifier:	iappend
identifier:	ilast
identifier:	last-ipair
identifier:	idrop-right
identifier:	isplit-at
identifier:	ilist-tail
identifier:	itake-right
identifier:	itake
identifier:	idrop
identifier:	icddddr
identifier:	icar+icdr
identifier:	icddadr
identifier:	icdddar
identifier:	icdaddr
identifier:	icddaar
identifier:	icdaadr
identifier:	icdadar
identifier:	icadddr
identifier:	icdaaar
identifier:	icadadr
identifier:	icaddar
identifier:	icaaddr
identifier:	icadaar
identifier:	icaaadr
identifier:	icaadar
identifier:	icdddr
identifier:	icaaaar
identifier:	icdadr
identifier:	icddar
identifier:	icaddr
identifier:	icdaar
identifier:	icaadr
identifier:	icadar
identifier:	icddr
identifier:	icaaar
identifier:	icadr
identifier:	icdar
identifier:	itenth
identifier:	icaar
identifier:	ieighth
identifier:	ininth
identifier:	isixth
identifier:	iseventh
identifier:	ifourth
identifier:	ififth
identifier:	isecond
identifier:	ithird
identifier:	ilist-ref
identifier:	ifirst
identifier:	icar
identifier:	icdr
identifier:	null-ilist?
identifier:	ilist=
identifier:	dotted-ilist?
identifier:	not-ipair?
identifier:	proper-ilist?
identifier:	ilist?
identifier:	iiota
identifier:	ipair?
identifier:	ilist-copy
identifier:	ilist-tabulate
identifier:	ipair*
identifier:	make-ilist
identifier:	ilist
identifier:	xipair
identifier:	iq
identifier:	ipair
library:	( srfi :116 ilists)
path:		./.akku/lib/srfi/:116/ilists.chezscheme.sls
identifier:	iapply
identifier:	gtree->itree
identifier:	gtree->tree
identifier:	tree->itree
identifier:	itree->tree
identifier:	list->ilist
identifier:	ilist->list
identifier:	pair->ipair
identifier:	ipair->pair
identifier:	replace-icar
identifier:	replace-icdr
identifier:	ialist-cons
identifier:	ialist-delete
identifier:	iassq
identifier:	iassv
identifier:	idelete-duplicates
identifier:	iassoc
identifier:	ibreak
identifier:	idelete
identifier:	idrop-while
identifier:	ispan
identifier:	ilist-index
identifier:	itake-while
identifier:	iany
identifier:	ievery
identifier:	ifind
identifier:	ifind-tail
identifier:	imemq
identifier:	imemv
identifier:	iremove
identifier:	imember
identifier:	ifilter
identifier:	ipartition
identifier:	ifilter-map
identifier:	imap-in-order
identifier:	iappend-map
identifier:	ipair-for-each
identifier:	ipair-fold-right
identifier:	ireduce-right
identifier:	ifold-right
identifier:	iunfold-right
identifier:	ipair-fold
identifier:	ireduce
identifier:	ifold
identifier:	iunfold
identifier:	imap
identifier:	ifor-each
identifier:	iunzip5
identifier:	icount
identifier:	iunzip3
identifier:	iunzip4
identifier:	iunzip1
identifier:	iunzip2
identifier:	iappend-reverse
identifier:	izip
identifier:	iconcatenate
identifier:	ireverse
identifier:	ilength
identifier:	iappend
identifier:	ilast
identifier:	last-ipair
identifier:	idrop-right
identifier:	isplit-at
identifier:	ilist-tail
identifier:	itake-right
identifier:	itake
identifier:	idrop
identifier:	icddddr
identifier:	icar+icdr
identifier:	icddadr
identifier:	icdddar
identifier:	icdaddr
identifier:	icddaar
identifier:	icdaadr
identifier:	icdadar
identifier:	icadddr
identifier:	icdaaar
identifier:	icadadr
identifier:	icaddar
identifier:	icaaddr
identifier:	icadaar
identifier:	icaaadr
identifier:	icaadar
identifier:	icdddr
identifier:	icaaaar
identifier:	icdadr
identifier:	icddar
identifier:	icaddr
identifier:	icdaar
identifier:	icaadr
identifier:	icadar
identifier:	icddr
identifier:	icaaar
identifier:	icadr
identifier:	icdar
identifier:	itenth
identifier:	icaar
identifier:	ieighth
identifier:	ininth
identifier:	isixth
identifier:	iseventh
identifier:	ifourth
identifier:	ififth
identifier:	isecond
identifier:	ithird
identifier:	ilist-ref
identifier:	ifirst
identifier:	icar
identifier:	icdr
identifier:	null-ilist?
identifier:	ilist=
identifier:	dotted-ilist?
identifier:	not-ipair?
identifier:	proper-ilist?
identifier:	ilist?
identifier:	iiota
identifier:	ipair?
identifier:	ilist-copy
identifier:	ilist-tabulate
identifier:	ipair*
identifier:	make-ilist
identifier:	ilist
identifier:	xipair
identifier:	iq
identifier:	ipair
library:	( srfi private feature-cond)
path:		./.akku/lib/srfi/private/feature-cond.sls
identifier:	feature-cond
library:	( srfi private registry-names)
path:		./.akku/lib/srfi/private/registry-names.sls
identifier:	SRFIs
type:		(inner:list? (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) (inner:list? [identifier-refrence fixnum?] [identifier-refrence symbol?] ) ) 
library:	( srfi private registry)
path:		./.akku/lib/srfi/private/registry.chezscheme.sls
identifier:	available-features
type:		(inner:list? something? ... ) 
identifier:	expand-time-features
identifier:	run-time-features
library:	( srfi private OS-id-features)
path:		./.akku/lib/srfi/private/OS-id-features.sls
identifier:	OS-id-features
library:	( srfi private let-opt)
path:		./.akku/lib/srfi/private/let-opt.sls
identifier:	let-optionals*
identifier:	:optional
library:	( srfi private vanish)
path:		./.akku/lib/srfi/private/vanish.sls
identifier:	vanish-define
library:	( srfi private check-arg)
path:		./.akku/lib/srfi/private/check-arg.sls
identifier:	check-arg
library:	( srfi private platform-features)
path:		./.akku/lib/srfi/private/platform-features.chezscheme.sls
identifier:	expand-time-features
type:		((inner:list? [identifier-refrence symbol?] [identifier-refrence symbol?] ) <- (inner:list? ) ) 
identifier:	run-time-features
library:	( srfi private include)
path:		./.akku/lib/srfi/private/include.sls
identifier:	include/resolve
library:	( srfi private include compat)
path:		./.akku/lib/srfi/private/include/compat.chezscheme.sls
identifier:	search-paths
library:	( srfi private include read)
path:		./.akku/lib/srfi/private/include/read.sls
identifier:	read
library:	( srfi private helpers)
path:		./.akku/lib/srfi/private/helpers.chezscheme.sls
identifier:	enumerate
library:	( srfi private helpers)
path:		./.akku/lib/srfi/private/helpers.sls
identifier:	enumerate
type:		((inner:list? ) <- (inner:list? something? ) ) 
library:	( srfi private define-values)
path:		./.akku/lib/srfi/private/define-values.chezscheme.sls
identifier:	define-values
library:	( srfi private define-values)
path:		./.akku/lib/srfi/private/define-values.sls
identifier:	define-values
library:	( srfi :141)
path:		./.akku/lib/srfi/:141.chezscheme.sls
identifier:	balanced-quotient
identifier:	balanced-remainder
identifier:	euclidean-remainder
identifier:	balanced/
identifier:	euclidean/
identifier:	euclidean-quotient
identifier:	round-quotient
identifier:	round-remainder
identifier:	truncate-remainder
identifier:	round/
identifier:	truncate/
identifier:	truncate-quotient
identifier:	floor-quotient
identifier:	floor-remainder
identifier:	ceiling-remainder
identifier:	floor/
identifier:	ceiling/
identifier:	ceiling-quotient
library:	( srfi :141 integer-division)
path:		./.akku/lib/srfi/:141/integer-division.chezscheme.sls
identifier:	balanced-quotient
identifier:	balanced-remainder
identifier:	euclidean-remainder
identifier:	balanced/
identifier:	euclidean/
identifier:	euclidean-quotient
identifier:	round-quotient
identifier:	round-remainder
identifier:	truncate-remainder
identifier:	round/
identifier:	truncate/
identifier:	truncate-quotient
identifier:	floor-quotient
identifier:	floor-remainder
identifier:	ceiling-remainder
identifier:	floor/
identifier:	ceiling/
identifier:	ceiling-quotient
library:	( srfi :38)
path:		./.akku/lib/srfi/:38.chezscheme.sls
identifier:	write-with-shared-structure
identifier:	write/ss
identifier:	read-with-shared-structure
identifier:	read/ss
library:	( srfi :38 with-shared-structure)
path:		./.akku/lib/srfi/:38/with-shared-structure.chezscheme.sls
identifier:	read-with-shared-structure
identifier:	read/ss
identifier:	write-with-shared-structure
identifier:	write/ss
library:	( srfi :25)
path:		./.akku/lib/srfi/:25.chezscheme.sls
identifier:	shape
identifier:	share-array
identifier:	array?
identifier:	make-array
identifier:	array-set!
identifier:	array-start
identifier:	array-rank
identifier:	array-ref
identifier:	array
identifier:	array-end
library:	( srfi :25 multi-dimensional-arrays)
path:		./.akku/lib/srfi/:25/multi-dimensional-arrays.chezscheme.sls
identifier:	array-set!
identifier:	share-array
identifier:	array-end
identifier:	array-ref
identifier:	array-rank
identifier:	array-start
identifier:	shape
identifier:	array
identifier:	array?
identifier:	make-array
library:	( srfi :25 multi-dimensional-arrays arlib)
path:		./.akku/lib/srfi/:25/multi-dimensional-arrays/arlib.chezscheme.sls
identifier:	share-nths
identifier:	array-append
identifier:	transpose
identifier:	share-array/origin
identifier:	share-array/index!
identifier:	share-row
identifier:	share-column
identifier:	array->list
identifier:	share-array/prefix
identifier:	array-map!
identifier:	array->vector
identifier:	array-retabulate!
identifier:	array-map
identifier:	tabulate-array
identifier:	tabulate-array!
identifier:	shape-for-each
identifier:	array-for-each-index
identifier:	array-size
identifier:	array-equal?
identifier:	array-shape
identifier:	array-length
library:	( srfi :25 multi-dimensional-arrays all)
path:		./.akku/lib/srfi/:25/multi-dimensional-arrays/all.chezscheme.sls
identifier:	array:grok/index!
identifier:	array:map-column->string
identifier:	array:grok/arguments
identifier:	array:index-length
identifier:	array:map->string
identifier:	array:index-ref
identifier:	array:index-set!
identifier:	array:shape-vector->string
identifier:	array:thing->string
identifier:	array:not-in
identifier:	array:list->string
identifier:	array:good-index-actor?
identifier:	array:good-index?
identifier:	array:good-indices.o?
identifier:	array:good-index-vector?
identifier:	array:check-index-actor
identifier:	array:good-indices?
identifier:	array:check-indices.o
identifier:	array:check-index-vector
identifier:	array:unchecked-share-depth?
identifier:	array:check-indices
identifier:	array:good-shape?
identifier:	array:good-share?
identifier:	array:size
identifier:	array:make-index
identifier:	array:optimize/actor
identifier:	array:shape->vector
identifier:	array:share/index!
identifier:	array:optimize/vector
identifier:	array-end
identifier:	share-array
identifier:	array-rank
identifier:	array-start
identifier:	shape
identifier:	array
identifier:	make-array
identifier:	array:make-array
identifier:	array:apply-to-actor
identifier:	array?
identifier:	array:index/array
identifier:	array:apply-to-vector
identifier:	array:applier-to-backing-vector
identifier:	array:index/vector
identifier:	array:applier-to-vector
identifier:	array:applier-to-actor
identifier:	array:indexer/vector
identifier:	array:indexer/array
identifier:	array:n
identifier:	array:maker
identifier:	array:2
identifier:	array:3
identifier:	array:0
identifier:	array:1
identifier:	array:shape-vector-index
identifier:	array:actor-index
identifier:	array:shape-index
identifier:	array:empty-shape-index
identifier:	array:coefficients
identifier:	array:vector-index
identifier:	array:optimize
identifier:	array:optimize-empty
identifier:	array-set!
identifier:	array:opt-args
identifier:	array:shape
identifier:	array-ref
identifier:	array:vector
identifier:	array:index
identifier:	array:make
type:		([identifier-refrence array:array?] <- (inner:list? something? ... ) ) 
identifier:	array:array?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( srfi :131)
path:		./.akku/lib/srfi/:131.chezscheme.sls
identifier:	define-record-type
library:	( srfi :131 records)
path:		./.akku/lib/srfi/:131/records.chezscheme.sls
identifier:	define-record-type
library:	( srfi :5)
path:		./.akku/lib/srfi/:5.chezscheme.sls
identifier:	let
library:	( srfi :5 let)
path:		./.akku/lib/srfi/:5/let.chezscheme.sls
identifier:	let
library:	( srfi :117)
path:		./.akku/lib/srfi/:117.chezscheme.sls
identifier:	list-queue-for-each
identifier:	list-queue-map
identifier:	list-queue-map!
identifier:	list-queue-append!
identifier:	list-queue-concatenate
identifier:	list-queue-set-list!
identifier:	list-queue-append
identifier:	list-queue-remove-back!
identifier:	list-queue-remove-all!
identifier:	list-queue-add-back!
identifier:	list-queue-remove-front!
identifier:	list-queue-first-last
identifier:	list-queue-add-front!
identifier:	list-queue-back
identifier:	list-queue-list
identifier:	list-queue-empty?
identifier:	list-queue-front
identifier:	list-queue-unfold-right
identifier:	list-queue?
identifier:	list-queue-copy
identifier:	list-queue-unfold
identifier:	make-list-queue
identifier:	list-queue
library:	( srfi :117 list-queues)
path:		./.akku/lib/srfi/:117/list-queues.chezscheme.sls
identifier:	list-queue-for-each
identifier:	list-queue-map
identifier:	list-queue-map!
identifier:	list-queue-append!
identifier:	list-queue-concatenate
identifier:	list-queue-set-list!
identifier:	list-queue-append
identifier:	list-queue-remove-back!
identifier:	list-queue-remove-all!
identifier:	list-queue-add-back!
identifier:	list-queue-remove-front!
identifier:	list-queue-first-last
identifier:	list-queue-add-front!
identifier:	list-queue-back
identifier:	list-queue-list
identifier:	list-queue-empty?
identifier:	list-queue-front
identifier:	list-queue-unfold-right
identifier:	list-queue?
identifier:	list-queue-copy
identifier:	list-queue-unfold
identifier:	make-list-queue
identifier:	list-queue
library:	( srfi :2)
path:		./.akku/lib/srfi/:2.chezscheme.sls
identifier:	and-let*
library:	( srfi :2 and-let*)
path:		./.akku/lib/srfi/:2/and-let*.chezscheme.sls
identifier:	and-let*
library:	( srfi :34)
path:		./.akku/lib/srfi/:34.chezscheme.sls
identifier:	raise
identifier:	raise
identifier:	guard
identifier:	guard
identifier:	with-exception-handler
identifier:	with-exception-handler
library:	( srfi :34 exception-handling)
path:		./.akku/lib/srfi/:34/exception-handling.chezscheme.sls
identifier:	raise
identifier:	raise
identifier:	guard
identifier:	guard
identifier:	with-exception-handler
identifier:	with-exception-handler
library:	( srfi :113)
path:		./.akku/lib/srfi/:113.chezscheme.sls
identifier:	bag->alist
identifier:	alist->bag
identifier:	set->bag
identifier:	set->bag!
identifier:	bag-decrement!
identifier:	bag->set
identifier:	bag-fold-unique
identifier:	bag-increment!
identifier:	bag-element-count
identifier:	bag-for-each-unique
identifier:	bag-product!
identifier:	bag-unique-size
identifier:	bag-sum!
identifier:	bag-product
identifier:	bag-comparator
identifier:	bag-sum
identifier:	bag-difference!
identifier:	bag-xor!
identifier:	bag-union!
identifier:	bag-intersection!
identifier:	bag-difference
identifier:	bag-xor
identifier:	bag-union
identifier:	bag-intersection
identifier:	bag<=?
identifier:	bag>=?
identifier:	bag<?
identifier:	bag>?
identifier:	list->bag!
identifier:	bag=?
identifier:	bag->list
identifier:	list->bag
identifier:	bag-partition!
identifier:	bag-copy
identifier:	bag-filter!
identifier:	bag-remove!
identifier:	bag-remove
identifier:	bag-partition
identifier:	bag-fold
identifier:	bag-filter
identifier:	bag-map
identifier:	bag-for-each
identifier:	bag-any?
identifier:	bag-every?
identifier:	bag-find
identifier:	bag-count
identifier:	bag-search!
identifier:	bag-size
identifier:	bag-delete-all
identifier:	bag-delete-all!
identifier:	bag-delete
identifier:	bag-delete!
identifier:	bag-replace
identifier:	bag-replace!
identifier:	bag-adjoin
identifier:	bag-adjoin!
identifier:	bag-member
identifier:	bag-element-comparator
identifier:	bag-empty?
identifier:	bag-disjoint?
identifier:	bag?
identifier:	bag-contains?
identifier:	bag
identifier:	bag-unfold
identifier:	set-xor!
identifier:	set-comparator
identifier:	set-intersection!
identifier:	set-difference!
identifier:	set-xor
identifier:	set-union!
identifier:	set-intersection
identifier:	set-difference
identifier:	set>=?
identifier:	set-union
identifier:	set>?
identifier:	set<=?
identifier:	set=?
identifier:	set<?
identifier:	list->set
identifier:	list->set!
identifier:	set-copy
identifier:	set->list
identifier:	set-remove!
identifier:	set-partition!
identifier:	set-partition
identifier:	set-filter!
identifier:	set-remove
identifier:	set-remove
identifier:	set-fold
identifier:	set-filter
identifier:	set-map
identifier:	set-for-each
identifier:	set-any?
identifier:	set-every?
identifier:	set-find
identifier:	set-count
identifier:	set-search!
identifier:	set-size
identifier:	set-delete-all
identifier:	set-delete-all!
identifier:	set-delete
identifier:	set-delete!
identifier:	set-replace
identifier:	set-replace!
identifier:	set-adjoin
identifier:	set-adjoin!
identifier:	set-member
identifier:	set-element-comparator
identifier:	set-empty?
identifier:	set-disjoint?
identifier:	set?
identifier:	set-contains?
identifier:	set
identifier:	set-unfold
library:	( srfi :113 sets-and-bags)
path:		./.akku/lib/srfi/:113/sets-and-bags.chezscheme.sls
identifier:	alist->bag
identifier:	set->bag!
identifier:	bag->alist
identifier:	bag->set
identifier:	set->bag
identifier:	bag-increment!
identifier:	bag-decrement!
identifier:	bag-for-each-unique
identifier:	bag-fold-unique
identifier:	bag-unique-size
identifier:	bag-element-count
identifier:	bag-product
identifier:	bag-product!
identifier:	bag-sum
identifier:	bag-sum!
identifier:	bag-xor!
identifier:	bag-comparator
identifier:	bag-intersection!
identifier:	bag-difference!
identifier:	bag-xor
identifier:	bag-union!
identifier:	bag-intersection
identifier:	bag-difference
identifier:	bag>=?
identifier:	bag-union
identifier:	bag>?
identifier:	bag<=?
identifier:	bag=?
identifier:	bag<?
identifier:	list->bag
identifier:	list->bag!
identifier:	bag-copy
identifier:	bag->list
identifier:	bag-remove!
identifier:	bag-partition!
identifier:	bag-partition
identifier:	bag-filter!
identifier:	bag-filter
identifier:	bag-remove
identifier:	bag-for-each
identifier:	bag-fold
identifier:	bag-every?
identifier:	bag-map
identifier:	bag-count
identifier:	bag-any?
identifier:	bag-size
identifier:	bag-find
identifier:	bag-delete-all!
identifier:	bag-search!
identifier:	bag-delete!
identifier:	bag-delete-all
identifier:	bag-replace!
identifier:	bag-delete
identifier:	bag-adjoin!
identifier:	bag-replace
identifier:	bag-element-comparator
identifier:	bag-adjoin
identifier:	bag-disjoint?
identifier:	bag-member
identifier:	bag-contains?
identifier:	bag-empty?
identifier:	bag-unfold
identifier:	bag?
identifier:	set-comparator
identifier:	bag
identifier:	set-difference!
identifier:	set-xor!
identifier:	set-union!
identifier:	set-intersection!
identifier:	set-difference
identifier:	set-xor
identifier:	set-union
identifier:	set-intersection
identifier:	set<=?
identifier:	set>=?
identifier:	set<?
identifier:	set>?
identifier:	list->set!
identifier:	set=?
identifier:	set->list
identifier:	list->set
identifier:	set-partition!
identifier:	set-copy
identifier:	set-filter!
identifier:	set-remove!
identifier:	set-remove
identifier:	set-partition
identifier:	set-fold
identifier:	set-filter
identifier:	set-map
identifier:	set-for-each
identifier:	set-any?
identifier:	set-every?
identifier:	set-find
identifier:	set-count
identifier:	set-search!
identifier:	set-size
identifier:	set-delete-all
identifier:	set-delete-all!
identifier:	set-delete
identifier:	set-delete!
identifier:	set-replace
identifier:	set-replace!
identifier:	set-adjoin
identifier:	set-adjoin!
identifier:	set-member
identifier:	set-element-comparator
identifier:	set-empty?
identifier:	set-disjoint?
identifier:	set?
identifier:	set-contains?
identifier:	set
identifier:	set-unfold
library:	( srfi :128)
path:		./.akku/lib/srfi/:128.chezscheme.sls
identifier:	comparator-if<=>
identifier:	<=?
identifier:	>=?
identifier:	<?
identifier:	>?
identifier:	hash-salt
identifier:	=?
identifier:	comparator-hash
identifier:	hash-bound
identifier:	comparator-test-type
identifier:	comparator-check-type
identifier:	comparator-ordering-predicate
identifier:	comparator-hash-function
identifier:	comparator-type-test-predicate
identifier:	comparator-equality-predicate
identifier:	default-hash
identifier:	comparator-register-default!
identifier:	number-hash
identifier:	make-default-comparator
identifier:	string-ci-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	symbol-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence symbol?] ) ) 
identifier:	char-ci-hash
identifier:	string-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	boolean-hash
identifier:	char-hash
identifier:	make-eqv-comparator
identifier:	make-equal-comparator
identifier:	make-vector-comparator
identifier:	make-eq-comparator
identifier:	make-pair-comparator
identifier:	make-list-comparator
identifier:	comparator-hashable?
identifier:	make-comparator
identifier:	comparator?
identifier:	comparator-ordered?
library:	( srfi :128 comparators)
path:		./.akku/lib/srfi/:128/comparators.chezscheme.sls
identifier:	comparator-if<=>
identifier:	<=?
identifier:	>=?
identifier:	<?
identifier:	>?
identifier:	hash-salt
identifier:	=?
identifier:	comparator-hash
identifier:	hash-bound
identifier:	comparator-test-type
identifier:	comparator-check-type
identifier:	comparator-ordering-predicate
identifier:	comparator-hash-function
identifier:	comparator-type-test-predicate
identifier:	comparator-equality-predicate
identifier:	default-hash
identifier:	comparator-register-default!
identifier:	number-hash
identifier:	make-default-comparator
identifier:	string-ci-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	symbol-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence symbol?] ) ) 
identifier:	char-ci-hash
identifier:	string-hash
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	boolean-hash
identifier:	char-hash
identifier:	make-eqv-comparator
identifier:	make-equal-comparator
identifier:	make-vector-comparator
identifier:	make-eq-comparator
identifier:	make-pair-comparator
identifier:	make-list-comparator
identifier:	comparator-hashable?
identifier:	make-comparator
identifier:	comparator?
identifier:	comparator-ordered?
library:	( srfi :67)
path:		./.akku/lib/srfi/:67.chezscheme.sls
identifier:	vector-compare-as-list
identifier:	symbol-compare
identifier:	vector-compare
identifier:	string-compare
identifier:	string-compare-ci
identifier:	refine-compare
identifier:	select-compare
identifier:	rational-compare
identifier:	real-compare
identifier:	pair-compare-cdr
identifier:	pairwise-not=?
identifier:	pair-compare
identifier:	pair-compare-car
identifier:	not=?
identifier:	number-compare
identifier:	max-compare
identifier:	min-compare
identifier:	list-compare
identifier:	list-compare-as-vector
identifier:	integer-compare
identifier:	kth-largest
identifier:	if>=?
identifier:	if>?
identifier:	if<?
identifier:	if=?
identifier:	if3
identifier:	if<=?
identifier:	default-compare
identifier:	if-not=?
identifier:	cond-compare
identifier:	debug-compare
identifier:	compare-by>=
identifier:	complex-compare
identifier:	compare-by=/>
identifier:	compare-by>
identifier:	compare-by<=
identifier:	compare-by=/<
identifier:	char-compare-ci
identifier:	compare-by<
identifier:	chain>?
identifier:	char-compare
identifier:	chain=?
identifier:	chain>=?
identifier:	chain<=?
identifier:	chain<?
identifier:	>?
identifier:	boolean-compare
identifier:	>=/>?
identifier:	>=?
identifier:	>/>?
identifier:	>=/>=?
identifier:	=?
identifier:	>/>=?
identifier:	<=?
identifier:	<?
identifier:	<=/<=?
identifier:	<=/<?
identifier:	</<=?
identifier:	</<?
library:	( srfi :67 compare-procedures)
path:		./.akku/lib/srfi/:67/compare-procedures.chezscheme.sls
identifier:	vector-compare-as-list
identifier:	symbol-compare
identifier:	vector-compare
identifier:	string-compare
identifier:	string-compare-ci
identifier:	refine-compare
identifier:	select-compare
identifier:	rational-compare
identifier:	real-compare
identifier:	pair-compare-cdr
identifier:	pairwise-not=?
identifier:	pair-compare
identifier:	pair-compare-car
identifier:	not=?
identifier:	number-compare
identifier:	max-compare
identifier:	min-compare
identifier:	list-compare
identifier:	list-compare-as-vector
identifier:	integer-compare
identifier:	kth-largest
identifier:	if>=?
identifier:	if>?
identifier:	if<?
identifier:	if=?
identifier:	if3
identifier:	if<=?
identifier:	default-compare
identifier:	if-not=?
identifier:	cond-compare
identifier:	debug-compare
identifier:	compare-by>=
identifier:	complex-compare
identifier:	compare-by=/>
identifier:	compare-by>
identifier:	compare-by<=
identifier:	compare-by=/<
identifier:	char-compare-ci
identifier:	compare-by<
identifier:	chain>?
identifier:	char-compare
identifier:	chain=?
identifier:	chain>=?
identifier:	chain<=?
identifier:	chain<?
identifier:	>?
identifier:	boolean-compare
identifier:	>=/>?
identifier:	>=?
identifier:	>/>?
identifier:	>=/>=?
identifier:	=?
identifier:	>/>=?
identifier:	<=?
identifier:	<?
identifier:	<=/<=?
identifier:	<=/<?
identifier:	</<=?
identifier:	</<?
library:	( srfi :134)
path:		./.akku/lib/srfi/:134.chezscheme.sls
identifier:	generator->ideque
identifier:	ideque->generator
identifier:	list->ideque
identifier:	ideque->list
identifier:	ideque-span
identifier:	ideque-break
identifier:	ideque-drop-while
identifier:	ideque-drop-while-right
identifier:	ideque-take-while
identifier:	ideque-take-while-right
identifier:	ideque-find
identifier:	ideque-find-right
identifier:	ideque-remove
identifier:	ideque-partition
identifier:	ideque-append-map
identifier:	ideque-filter
identifier:	ideque-fold
identifier:	ideque-fold-right
identifier:	ideque-for-each
identifier:	ideque-for-each-right
identifier:	ideque-map
identifier:	ideque-filter-map
identifier:	ideque-count
identifier:	ideque-zip
identifier:	ideque-append
identifier:	ideque-reverse
identifier:	ideque-split-at
identifier:	ideque-length
identifier:	ideque-drop
identifier:	ideque-drop-right
identifier:	ideque-take
identifier:	ideque-take-right
identifier:	ideque-remove-back
identifier:	ideque-ref
identifier:	ideque-back
identifier:	ideque-add-back
identifier:	ideque-add-front
identifier:	ideque-remove-front
identifier:	ideque-every
identifier:	ideque-front
identifier:	ideque=
identifier:	ideque-any
identifier:	ideque?
identifier:	ideque-empty?
identifier:	ideque-unfold
identifier:	ideque-unfold-right
identifier:	ideque
identifier:	ideque-tabulate
library:	( srfi :134 ideques)
path:		./.akku/lib/srfi/:134/ideques.chezscheme.sls
identifier:	generator->ideque
identifier:	ideque->generator
identifier:	list->ideque
identifier:	ideque->list
identifier:	ideque-span
identifier:	ideque-break
identifier:	ideque-drop-while
identifier:	ideque-drop-while-right
identifier:	ideque-take-while
identifier:	ideque-take-while-right
identifier:	ideque-find
identifier:	ideque-find-right
identifier:	ideque-remove
identifier:	ideque-partition
identifier:	ideque-append-map
identifier:	ideque-filter
identifier:	ideque-fold
identifier:	ideque-fold-right
identifier:	ideque-for-each
identifier:	ideque-for-each-right
identifier:	ideque-map
identifier:	ideque-filter-map
identifier:	ideque-count
identifier:	ideque-zip
identifier:	ideque-append
identifier:	ideque-reverse
identifier:	ideque-split-at
identifier:	ideque-length
identifier:	ideque-drop
identifier:	ideque-drop-right
identifier:	ideque-take
identifier:	ideque-take-right
identifier:	ideque-remove-back
identifier:	ideque-ref
identifier:	ideque-back
identifier:	ideque-add-back
identifier:	ideque-add-front
identifier:	ideque-remove-front
identifier:	ideque-every
identifier:	ideque-front
identifier:	ideque=
identifier:	ideque-any
identifier:	ideque?
identifier:	ideque-empty?
identifier:	ideque-unfold
identifier:	ideque-unfold-right
identifier:	ideque
identifier:	ideque-tabulate
library:	( srfi :6)
path:		./.akku/lib/srfi/:6.chezscheme.sls
identifier:	open-output-string
identifier:	get-output-string
identifier:	open-input-string
library:	( srfi :6 basic-string-ports)
path:		./.akku/lib/srfi/:6/basic-string-ports.chezscheme.sls
identifier:	get-output-string
identifier:	open-input-string
identifier:	open-output-string
library:	( srfi :6 basic-string-ports compat)
path:		./.akku/lib/srfi/:6/basic-string-ports/compat.chezscheme.sls
identifier:	open-output-string
identifier:	get-output-string
library:	( srfi :54)
path:		./.akku/lib/srfi/:54.chezscheme.sls
identifier:	cat
library:	( srfi :54 cat)
path:		./.akku/lib/srfi/:54/cat.chezscheme.sls
identifier:	cat
library:	( srfi :60)
path:		./.akku/lib/srfi/:60.chezscheme.sls
identifier:	booleans->integer
identifier:	integer->list
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
identifier:	list->integer
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	rotate-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	reverse-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	ash
identifier:	arithmetic-shift
identifier:	bit-field
identifier:	copy-bit-field
identifier:	bit-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	copy-bit
identifier:	first-set-bit
identifier:	logbit?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	integer-length
identifier:	log2-binary-factors
identifier:	logcount
identifier:	bit-count
identifier:	logtest
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	any-bits-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	bitwise-if
identifier:	bitwise-merge
identifier:	lognot
identifier:	bitwise-not
identifier:	logxor
identifier:	bitwise-xor
identifier:	logior
identifier:	bitwise-ior
identifier:	logand
identifier:	bitwise-and
library:	( srfi :60 integer-bits)
path:		./.akku/lib/srfi/:60/integer-bits.chezscheme.sls
identifier:	booleans->integer
identifier:	integer->list
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
identifier:	list->integer
type:		([identifier-refrence fixnum?] <- (inner:list? something? ) ) 
identifier:	rotate-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	reverse-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	ash
identifier:	arithmetic-shift
identifier:	bit-field
identifier:	copy-bit-field
identifier:	bit-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	copy-bit
identifier:	first-set-bit
identifier:	logbit?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	integer-length
identifier:	log2-binary-factors
identifier:	logcount
identifier:	bit-count
identifier:	logtest
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	any-bits-set?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	bitwise-if
identifier:	bitwise-merge
identifier:	lognot
identifier:	bitwise-not
identifier:	logxor
identifier:	bitwise-xor
identifier:	logior
identifier:	bitwise-ior
identifier:	logand
identifier:	bitwise-and
library:	( srfi :175)
path:		./.akku/lib/srfi/%3a175.sls
identifier:	ascii-string-ci>=?
identifier:	ascii-string-ci>?
identifier:	ascii-string-ci<=?
identifier:	ascii-string-ci=?
identifier:	ascii-string-ci<?
identifier:	ascii-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-mirror-bracket
identifier:	ascii-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-control->graphic
identifier:	ascii-graphic->control
identifier:	ascii-upcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-downcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-nth-upper-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-nth-lower-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-lower-case-value
identifier:	ascii-nth-digit
identifier:	ascii-digit-value
identifier:	ascii-upper-case-value
identifier:	ascii-alphanumeric?
identifier:	ascii-numeric?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-lower-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-alphabetic?
identifier:	ascii-other-graphic?
identifier:	ascii-upper-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-whitespace?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-space-or-tab?
identifier:	ascii-control?
identifier:	ascii-non-control?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-char?
identifier:	ascii-string?
identifier:	ascii-codepoint?
identifier:	ascii-bytevector?
library:	( srfi :175)
path:		./.akku/lib/srfi/:175.sls
identifier:	ascii-string-ci>=?
identifier:	ascii-string-ci>?
identifier:	ascii-string-ci<=?
identifier:	ascii-string-ci=?
identifier:	ascii-string-ci<?
identifier:	ascii-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-mirror-bracket
identifier:	ascii-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-control->graphic
identifier:	ascii-graphic->control
identifier:	ascii-upcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-downcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-nth-upper-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-nth-lower-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-lower-case-value
identifier:	ascii-nth-digit
identifier:	ascii-digit-value
identifier:	ascii-upper-case-value
identifier:	ascii-alphanumeric?
identifier:	ascii-numeric?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-lower-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-alphabetic?
identifier:	ascii-other-graphic?
identifier:	ascii-upper-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-whitespace?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-space-or-tab?
identifier:	ascii-control?
identifier:	ascii-non-control?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-char?
identifier:	ascii-string?
identifier:	ascii-codepoint?
identifier:	ascii-bytevector?
library:	( srfi :175)
path:		./.akku/lib/srfi/175.sls
identifier:	ascii-string-ci>=?
identifier:	ascii-string-ci>?
identifier:	ascii-string-ci<=?
identifier:	ascii-string-ci=?
identifier:	ascii-string-ci<?
identifier:	ascii-ci<=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci<?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-ci>?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-mirror-bracket
identifier:	ascii-ci=?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] something? ) ) 
identifier:	ascii-control->graphic
identifier:	ascii-graphic->control
identifier:	ascii-upcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-downcase
type:		([identifier-refrence char?] <- (inner:list? something? ) ) 
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	ascii-nth-upper-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-nth-lower-case
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence fixnum?] ) ) 
identifier:	ascii-lower-case-value
identifier:	ascii-nth-digit
identifier:	ascii-digit-value
identifier:	ascii-upper-case-value
identifier:	ascii-alphanumeric?
identifier:	ascii-numeric?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-lower-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-alphabetic?
identifier:	ascii-other-graphic?
identifier:	ascii-upper-case?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-whitespace?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-space-or-tab?
identifier:	ascii-control?
identifier:	ascii-non-control?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	ascii-char?
identifier:	ascii-string?
identifier:	ascii-codepoint?
identifier:	ascii-bytevector?
library:	( srfi :115)
path:		./.akku/lib/srfi/:115.chezscheme.sls
identifier:	regexp-match->sexp
identifier:	regexp-match-submatch-end
identifier:	regexp-match->list
identifier:	regexp-match-submatch/list
identifier:	regexp-match-submatch-start
identifier:	regexp-match-count
identifier:	regexp-match-submatch
identifier:	regexp-partition
identifier:	regexp-match?
identifier:	regexp-extract
identifier:	regexp-split
identifier:	regexp-replace-all
identifier:	regexp-fold
identifier:	regexp-search
identifier:	regexp-replace
identifier:	regexp-matches
identifier:	regexp-matches?
identifier:	regexp->sre
identifier:	char-set->sre
identifier:	valid-sre?
identifier:	rx
identifier:	regexp
identifier:	regexp?
library:	( srfi :115 regexp)
path:		./.akku/lib/srfi/:115/regexp.chezscheme.sls
identifier:	regexp-match->sexp
identifier:	regexp-match-submatch-end
identifier:	regexp-match->list
identifier:	regexp-match-submatch/list
identifier:	regexp-match-submatch-start
identifier:	regexp-match-count
identifier:	regexp-match-submatch
identifier:	regexp-partition
identifier:	regexp-match?
identifier:	regexp-extract
identifier:	regexp-split
identifier:	regexp-replace-all
identifier:	regexp-fold
identifier:	regexp-search
identifier:	regexp-replace
identifier:	regexp-matches
identifier:	regexp-matches?
identifier:	regexp->sre
identifier:	char-set->sre
identifier:	valid-sre?
identifier:	rx
identifier:	regexp
identifier:	regexp?
library:	( srfi :115 regexp boundary)
path:		./.akku/lib/srfi/:115/regexp/boundary.chezscheme.sls
identifier:	char-set:hangul-lvt
identifier:	char-set:hangul-t
identifier:	char-set:hangul-lv
identifier:	char-set:hangul-l
identifier:	char-set:hangul-v
identifier:	char-set:regional-indicator
identifier:	char-set:extend-or-spacing-mark
library:	( srfi :19)
path:		./.akku/lib/srfi/:19.chezscheme.sls
identifier:	time>?
identifier:	time?
identifier:	time=?
identifier:	time>=?
identifier:	time<=?
identifier:	time<?
identifier:	time-utc->time-tai
identifier:	time-utc->time-tai!
identifier:	time-utc->time-monotonic
identifier:	time-utc->time-monotonic!
identifier:	time-utc->julian-day
identifier:	time-utc->modified-julian-day
identifier:	time-utc
identifier:	time-utc->date
identifier:	time-thread
identifier:	time-type
identifier:	time-tai->time-utc
identifier:	time-tai->time-utc!
identifier:	time-tai->time-monotonic
identifier:	time-tai->time-monotonic!
identifier:	time-tai->julian-day
identifier:	time-tai->modified-julian-day
identifier:	time-tai
identifier:	time-tai->date
identifier:	time-resolution
identifier:	time-second
identifier:	time-nanosecond
identifier:	time-process
identifier:	time-monotonic->time-utc
identifier:	time-monotonic->time-utc!
identifier:	time-monotonic->time-tai
identifier:	time-monotonic->time-tai!
identifier:	time-monotonic->julian-day
identifier:	time-monotonic->modified-julian-day
identifier:	time-monotonic
identifier:	time-monotonic->date
identifier:	time-difference!
identifier:	time-duration
identifier:	subtract-duration!
identifier:	time-difference
identifier:	string->date
identifier:	subtract-duration
identifier:	set-time-second!
identifier:	set-time-type!
identifier:	modified-julian-day->time-utc
identifier:	set-time-nanosecond!
identifier:	modified-julian-day->time-monotonic
identifier:	modified-julian-day->time-tai
identifier:	make-time
identifier:	modified-julian-day->date
identifier:	julian-day->time-utc
identifier:	make-date
identifier:	julian-day->time-monotonic
identifier:	julian-day->time-tai
identifier:	date?
identifier:	julian-day->date
identifier:	date-year-day
identifier:	date-zone-offset
identifier:	date-week-number
identifier:	date-year
identifier:	date-second
identifier:	date-week-day
identifier:	date-month
identifier:	date-nanosecond
identifier:	date-hour
identifier:	date-minute
identifier:	date->time-utc
identifier:	date-day
identifier:	date->time-monotonic
identifier:	date->time-tai
identifier:	date->modified-julian-day
identifier:	date->string
identifier:	current-time
identifier:	date->julian-day
identifier:	current-julian-day
identifier:	current-modified-julian-day
identifier:	copy-time
identifier:	current-date
identifier:	add-duration
identifier:	add-duration!
library:	( srfi :19 time)
path:		./.akku/lib/srfi/:19/time.chezscheme.sls
identifier:	date->string
identifier:	string->date
identifier:	time-utc->time-tai
identifier:	time-utc->time-tai!
identifier:	time-utc->time-monotonic
identifier:	time-utc->time-monotonic!
identifier:	time-utc->julian-day
identifier:	time-utc->modified-julian-day
identifier:	time-tai->time-utc!
identifier:	time-utc->date
identifier:	time-tai->time-monotonic!
identifier:	time-tai->time-utc
identifier:	time-tai->modified-julian-day
identifier:	time-tai->time-monotonic
identifier:	time-tai->date
identifier:	time-tai->julian-day
identifier:	time-monotonic->time-utc
identifier:	time-monotonic->time-utc!
identifier:	time-monotonic->time-tai
identifier:	time-monotonic->time-tai!
identifier:	time-monotonic->julian-day
identifier:	time-monotonic->modified-julian-day
identifier:	modified-julian-day->time-utc
identifier:	time-monotonic->date
identifier:	modified-julian-day->time-monotonic
identifier:	modified-julian-day->time-tai
identifier:	julian-day->time-utc
identifier:	modified-julian-day->date
identifier:	julian-day->time-monotonic
identifier:	julian-day->time-tai
identifier:	date->time-utc
identifier:	julian-day->date
identifier:	date->time-monotonic
identifier:	date->time-tai
identifier:	date->julian-day
identifier:	date->modified-julian-day
identifier:	date-week-day
identifier:	date-week-number
identifier:	date-zone-offset
identifier:	date-year-day
identifier:	date-month
identifier:	date-year
identifier:	date-hour
identifier:	date-day
identifier:	date-second
identifier:	date-minute
identifier:	date?
identifier:	date-nanosecond
identifier:	subtract-duration!
identifier:	make-date
identifier:	add-duration!
identifier:	subtract-duration
identifier:	time-difference!
identifier:	add-duration
identifier:	time>?
identifier:	time-difference
identifier:	time=?
identifier:	time>=?
identifier:	time<=?
identifier:	time<?
identifier:	set-time-second!
identifier:	copy-time
identifier:	set-time-type!
identifier:	set-time-nanosecond!
identifier:	time-nanosecond
identifier:	time-second
identifier:	time?
identifier:	time-type
identifier:	time-resolution
identifier:	make-time
identifier:	current-modified-julian-day
identifier:	current-time
identifier:	current-date
identifier:	current-julian-day
identifier:	time-thread
identifier:	time-utc
identifier:	time-process
identifier:	time-tai
identifier:	time-duration
identifier:	time-monotonic
library:	( srfi :19 time compat)
path:		./.akku/lib/srfi/:19/time/compat.chezscheme.sls
identifier:	time-nanosecond
identifier:	time-second
identifier:	cumulative-process-time
identifier:	cumulative-gc-time
identifier:	current-time
type:		([identifier-refrence time?] <- (inner:list? [identifier-refrence symbol?] ) ) 
type:		([identifier-refrence time?] <- (inner:list? ) ) 
identifier:	cumulative-thread-time
identifier:	time-resolution
type:		[identifier-refrence fixnum?] 
identifier:	timezone-offset
type:		[identifier-refrence integer?] 
library:	( srfi :19 time not-implemented)
path:		./.akku/lib/srfi/:19/time/not-implemented.chezscheme.sls
identifier:	cumulative-gc-time
identifier:	cumulative-thread-time
identifier:	cumulative-process-time
library:	( srfi :78)
path:		./.akku/lib/srfi/:78.chezscheme.sls
identifier:	check-reset!
identifier:	check-set-mode!
identifier:	check-passed?
identifier:	check-report
identifier:	check
identifier:	check-ec
library:	( srfi :78 lightweight-testing)
path:		./.akku/lib/srfi/:78/lightweight-testing.chezscheme.sls
identifier:	check-reset!
identifier:	check-passed?
identifier:	check-report
identifier:	check-set-mode!
identifier:	check
identifier:	check-ec
library:	( srfi :78 lightweight-testing compat)
path:		./.akku/lib/srfi/:78/lightweight-testing/compat.chezscheme.sls
identifier:	check:write
type:		(void? <- (inner:list? something? [identifier-refrence textual-port?] ) ) 
type:		(void? <- (inner:list? something? ) ) 
library:	( srfi :133)
path:		./.akku/lib/srfi/:133.chezscheme.sls
identifier:	reverse-list->vector
identifier:	vector-unfold-right!
identifier:	reverse-vector->list
identifier:	vector-reverse-copy!
identifier:	vector-unfold!
identifier:	vector-swap!
identifier:	vector-reverse!
identifier:	vector-every
identifier:	vector-partition
identifier:	vector-binary-search
identifier:	vector-any
identifier:	vector-skip
identifier:	vector-skip-right
identifier:	vector-index
identifier:	vector-index-right
identifier:	vector-count
identifier:	vector-cumulate
identifier:	vector-fold-right
identifier:	vector-map!
identifier:	vector=
identifier:	vector-fold
identifier:	vector-append-subvectors
identifier:	vector-empty?
identifier:	vector-reverse-copy
identifier:	vector-concatenate
identifier:	vector-unfold
identifier:	vector-unfold-right
library:	( srfi :133 vectors)
path:		./.akku/lib/srfi/:133/vectors.chezscheme.sls
identifier:	string->vector
identifier:	reverse-list->vector
identifier:	vector->string
identifier:	reverse-vector->list
identifier:	list->vector
identifier:	vector-unfold-right!
identifier:	vector->list
identifier:	vector-reverse-copy!
identifier:	vector-unfold!
identifier:	vector-reverse!
identifier:	vector-copy!
identifier:	vector-swap!
identifier:	vector-fill!
identifier:	vector-every
identifier:	vector-partition
identifier:	vector-binary-search
identifier:	vector-any
identifier:	vector-index-right
identifier:	vector-skip-right
identifier:	vector-index
identifier:	vector-skip
identifier:	vector-count
identifier:	vector-cumulate
identifier:	vector-map!
identifier:	vector-for-each
identifier:	vector-fold-right
identifier:	vector-map
identifier:	vector=
identifier:	vector-fold
identifier:	vector-append-subvectors
identifier:	vector-empty?
identifier:	vector-append
identifier:	vector-concatenate
identifier:	vector-copy
identifier:	vector-reverse-copy
identifier:	vector-unfold
identifier:	vector-unfold-right
library:	( srfi :14)
path:		./.akku/lib/srfi/:14.chezscheme.sls
identifier:	ucs-range->char-set
identifier:	ucs-range->char-set!
identifier:	string->char-set
identifier:	string->char-set!
identifier:	list->char-set
identifier:	list->char-set!
identifier:	char-set?
identifier:	end-of-char-set?
identifier:	char-set<=
identifier:	char-set=
identifier:	char-set:upper-case
identifier:	char-set:whitespace
identifier:	char-set:symbol
identifier:	char-set:title-case
identifier:	char-set:printing
identifier:	char-set:punctuation
identifier:	char-set:letter+digit
identifier:	char-set:lower-case
identifier:	char-set:iso-control
identifier:	char-set:letter
identifier:	char-set:graphic
identifier:	char-set:hex-digit
identifier:	char-set:empty
identifier:	char-set:full
identifier:	char-set:blank
identifier:	char-set:digit
identifier:	char-set-xor!
identifier:	char-set:ascii
identifier:	char-set-union!
identifier:	char-set-xor
identifier:	char-set-unfold!
identifier:	char-set-union
identifier:	char-set-size
identifier:	char-set-unfold
identifier:	char-set-map
identifier:	char-set-ref
identifier:	char-set-intersection
identifier:	char-set-intersection!
identifier:	char-set-for-each
identifier:	char-set-hash
identifier:	char-set-filter!
identifier:	char-set-fold
identifier:	char-set-every
identifier:	char-set-filter
identifier:	char-set-difference
identifier:	char-set-difference!
identifier:	char-set-diff+intersection
identifier:	char-set-diff+intersection!
identifier:	char-set-delete
identifier:	char-set-delete!
identifier:	char-set-cursor
identifier:	char-set-cursor-next
identifier:	char-set-copy
identifier:	char-set-count
identifier:	char-set-complement!
identifier:	char-set-contains?
identifier:	char-set-any
identifier:	char-set-complement
identifier:	char-set-adjoin
identifier:	char-set-adjoin!
identifier:	char-set->list
identifier:	char-set->string
identifier:	->char-set
identifier:	char-set
library:	( srfi :14 char-sets)
path:		./.akku/lib/srfi/:14/char-sets.chezscheme.sls
identifier:	char-set:empty
identifier:	char-set:full
identifier:	char-set:blank
identifier:	char-set:ascii
identifier:	char-set:symbol
identifier:	char-set:hex-digit
identifier:	char-set:iso-control
identifier:	char-set:punctuation
identifier:	char-set:printing
identifier:	char-set:whitespace
identifier:	char-set:letter+digit
identifier:	char-set:graphic
identifier:	char-set:letter
identifier:	char-set:digit
identifier:	char-set:upper-case
identifier:	char-set:title-case
identifier:	char-set-diff+intersection!
identifier:	char-set:lower-case
identifier:	char-set-difference!
identifier:	char-set-xor!
identifier:	char-set-xor
identifier:	char-set-diff+intersection
identifier:	char-set-intersection!
identifier:	char-set-difference
identifier:	char-set-complement!
identifier:	char-set-union!
identifier:	char-set-union
identifier:	char-set-intersection
identifier:	char-set-delete!
identifier:	char-set-complement
identifier:	char-set-delete
identifier:	char-set-adjoin!
identifier:	char-set-any
identifier:	char-set-adjoin
identifier:	char-set-contains?
identifier:	char-set-every
identifier:	char-set-size
identifier:	char-set-count
identifier:	char-set->list
identifier:	char-set->string
identifier:	ucs-range->char-set!
identifier:	->char-set
identifier:	ucs-range->char-set
identifier:	char-set-filter!
identifier:	string->char-set!
identifier:	char-set-filter
identifier:	string->char-set
identifier:	list->char-set!
identifier:	char-set
identifier:	list->char-set
identifier:	char-set-map
identifier:	char-set-copy
identifier:	char-set-unfold!
identifier:	char-set-for-each
identifier:	char-set-fold
identifier:	char-set-unfold
identifier:	char-set-cursor-next
identifier:	end-of-char-set?
identifier:	char-set-cursor
identifier:	char-set-ref
identifier:	char-set<=
identifier:	char-set-hash
identifier:	char-set?
identifier:	char-set=
library:	( srfi :14 char-sets inversion-list)
path:		./.akku/lib/srfi/:14/char-sets/inversion-list.chezscheme.sls
identifier:	inversion-list-cursor-at-end?
identifier:	inversion-list-cursor-ref
identifier:	inversion-list-cursor-next
identifier:	inversion-list-cursor
identifier:	inversion-list-cursor?
identifier:	inversion-list-size
identifier:	inversion-list-union
identifier:	inversion-list-member?
identifier:	inversion-list-remove
identifier:	inversion-list-hash
identifier:	inversion-list-intersection
identifier:	inversion-list-difference
identifier:	inversion-list-fold/done?
identifier:	inversion-list-complement
identifier:	inversion-list-copy
identifier:	inversion-list=?
identifier:	inversion-list-adjoin
identifier:	range->inversion-list
identifier:	ranges->inversion-list
identifier:	number->inversion-list
identifier:	numbers->inversion-list
identifier:	inversion-list?
identifier:	make-empty-inversion-list
library:	( srfi :15 fluid-let)
path:		./.akku/lib/srfi/%3a15/fluid-let.sls
identifier:	fluid-let
library:	( srfi :15 fluid-let)
path:		./.akku/lib/srfi/:15/fluid-let.chezscheme.sls
identifier:	fluid-let
library:	( srfi :15 fluid-let)
path:		./.akku/lib/srfi/:15/fluid-let.sls
identifier:	fluid-let
library:	( srfi :15 fluid-let)
path:		./.akku/lib/srfi/15/fluid-let.sls
identifier:	fluid-let
library:	( srfi :132)
path:		./.akku/lib/srfi/:132.chezscheme.sls
identifier:	vector-find-median
identifier:	vector-find-median!
identifier:	list-delete-neighbor-dups!
identifier:	vector-delete-neighbor-dups!
identifier:	list-delete-neighbor-dups
identifier:	vector-delete-neighbor-dups
identifier:	list-stable-sort!
identifier:	vector-stable-sort!
identifier:	list-sort!
identifier:	vector-sort!
identifier:	list-merge!
identifier:	vector-merge!
identifier:	list-stable-sort
identifier:	vector-stable-sort
identifier:	list-sort
type:		((inner:list? something? ... ) <- (inner:list? ([identifier-refrence boolean?] <- (inner:list? something? something? ) ) (inner:list? something? ... ) ) ) 
identifier:	vector-sort
identifier:	list-merge
identifier:	vector-merge
identifier:	list-sorted?
identifier:	vector-sorted?
library:	( srfi :132 sorting)
path:		./.akku/lib/srfi/:132/sorting.chezscheme.sls
identifier:	vector-find-median
identifier:	vector-find-median!
identifier:	list-delete-neighbor-dups!
identifier:	vector-delete-neighbor-dups!
identifier:	list-delete-neighbor-dups
identifier:	vector-delete-neighbor-dups
identifier:	list-stable-sort!
identifier:	vector-stable-sort!
identifier:	list-sort!
identifier:	vector-sort!
identifier:	list-merge!
identifier:	vector-merge!
identifier:	list-stable-sort
identifier:	vector-stable-sort
identifier:	list-sort
type:		((inner:list? something? ... ) <- (inner:list? ([identifier-refrence boolean?] <- (inner:list? something? something? ) ) (inner:list? something? ... ) ) ) 
identifier:	vector-sort
identifier:	list-merge
identifier:	vector-merge
identifier:	list-sorted?
identifier:	vector-sorted?
library:	( srfi :4)
path:		./.akku/lib/srfi/:4.chezscheme.sls
identifier:	f64vector->list
identifier:	list->f64vector
identifier:	f64vector-ref
identifier:	f64vector-set!
identifier:	f64vector
identifier:	f64vector-length
identifier:	f64vector?
identifier:	make-f64vector
identifier:	f32vector->list
identifier:	list->f32vector
identifier:	f32vector-ref
identifier:	f32vector-set!
identifier:	f32vector
identifier:	f32vector-length
identifier:	f32vector?
identifier:	make-f32vector
identifier:	u64vector->list
identifier:	list->u64vector
identifier:	u64vector-ref
identifier:	u64vector-set!
identifier:	u64vector
identifier:	u64vector-length
identifier:	u64vector?
identifier:	make-u64vector
identifier:	u32vector->list
identifier:	list->u32vector
identifier:	u32vector-ref
identifier:	u32vector-set!
identifier:	u32vector
identifier:	u32vector-length
identifier:	u32vector?
identifier:	make-u32vector
identifier:	u16vector->list
identifier:	list->u16vector
identifier:	u16vector-ref
identifier:	u16vector-set!
identifier:	u16vector
identifier:	u16vector-length
identifier:	u16vector?
identifier:	make-u16vector
identifier:	u8vector->list
identifier:	list->u8vector
identifier:	u8vector-ref
identifier:	u8vector-set!
identifier:	u8vector
identifier:	u8vector-length
identifier:	u8vector?
identifier:	make-u8vector
identifier:	s64vector->list
identifier:	list->s64vector
identifier:	s64vector-ref
identifier:	s64vector-set!
identifier:	s64vector
identifier:	s64vector-length
identifier:	s64vector?
identifier:	make-s64vector
identifier:	s32vector->list
identifier:	list->s32vector
identifier:	s32vector-ref
identifier:	s32vector-set!
identifier:	s32vector
identifier:	s32vector-length
identifier:	s32vector?
identifier:	make-s32vector
identifier:	s16vector->list
identifier:	list->s16vector
identifier:	s16vector-ref
identifier:	s16vector-set!
identifier:	s16vector
identifier:	s16vector-length
identifier:	s16vector?
identifier:	make-s16vector
identifier:	s8vector->list
identifier:	list->s8vector
identifier:	s8vector-ref
identifier:	s8vector-set!
identifier:	s8vector
identifier:	s8vector-length
identifier:	s8vector?
identifier:	make-s8vector
library:	( srfi :4 numeric-vectors)
path:		./.akku/lib/srfi/:4/numeric-vectors.chezscheme.sls
identifier:	f64vector->list
identifier:	list->f64vector
identifier:	f64vector-ref
identifier:	f64vector-set!
identifier:	f64vector
identifier:	f64vector-length
identifier:	f64vector?
identifier:	make-f64vector
identifier:	f32vector->list
identifier:	list->f32vector
identifier:	f32vector-ref
identifier:	f32vector-set!
identifier:	f32vector
identifier:	f32vector-length
identifier:	f32vector?
identifier:	make-f32vector
identifier:	u64vector->list
identifier:	list->u64vector
identifier:	u64vector-ref
identifier:	u64vector-set!
identifier:	u64vector
identifier:	u64vector-length
identifier:	u64vector?
identifier:	make-u64vector
identifier:	u32vector->list
identifier:	list->u32vector
identifier:	u32vector-ref
identifier:	u32vector-set!
identifier:	u32vector
identifier:	u32vector-length
identifier:	u32vector?
identifier:	make-u32vector
identifier:	u16vector->list
identifier:	list->u16vector
identifier:	u16vector-ref
identifier:	u16vector-set!
identifier:	u16vector
identifier:	u16vector-length
identifier:	u16vector?
identifier:	make-u16vector
identifier:	u8vector->list
identifier:	list->u8vector
identifier:	u8vector-ref
identifier:	u8vector-set!
identifier:	u8vector
identifier:	u8vector-length
identifier:	u8vector?
identifier:	make-u8vector
identifier:	s64vector->list
identifier:	list->s64vector
identifier:	s64vector-ref
identifier:	s64vector-set!
identifier:	s64vector
identifier:	s64vector-length
identifier:	s64vector?
identifier:	make-s64vector
identifier:	s32vector->list
identifier:	list->s32vector
identifier:	s32vector-ref
identifier:	s32vector-set!
identifier:	s32vector
identifier:	s32vector-length
identifier:	s32vector?
identifier:	make-s32vector
identifier:	s16vector->list
identifier:	list->s16vector
identifier:	s16vector-ref
identifier:	s16vector-set!
identifier:	s16vector
identifier:	s16vector-length
identifier:	s16vector?
identifier:	make-s16vector
identifier:	s8vector->list
identifier:	list->s8vector
identifier:	s8vector-ref
identifier:	s8vector-set!
identifier:	s8vector
identifier:	s8vector-length
identifier:	s8vector?
identifier:	make-s8vector
library:	( srfi :146)
path:		./.akku/lib/srfi/:146.sls
identifier:	comparator?
identifier:	comparator?
identifier:	comparator?
identifier:	mapping-fold/reverse
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-catenate!
identifier:	mapping-catenate
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-split
identifier:	mapping-range>=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range<=!
identifier:	mapping-range>!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range<!
identifier:	mapping-range=!
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range>=
identifier:	mapping-range<=
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range>
identifier:	mapping-range<
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range=
identifier:	mapping-key-successor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-predecessor
identifier:	mapping-max-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-min-value
identifier:	mapping-max-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-min-key
identifier:	mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-xor!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-difference!
identifier:	mapping-intersection!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-union!
identifier:	mapping-xor
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-difference
identifier:	mapping-intersection
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-union
identifier:	mapping>=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping<=?
identifier:	mapping>?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping<?
identifier:	mapping=?
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping!
identifier:	alist->mapping
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	mapping->alist
identifier:	mapping-copy
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-partition!
identifier:	mapping-partition
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-remove!
identifier:	mapping-remove
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-filter!
identifier:	mapping-filter
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-fold
identifier:	mapping-for-each
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-map->list
identifier:	mapping-map
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-entries
identifier:	mapping-values
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-keys
identifier:	mapping-every?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-any?
identifier:	mapping-count
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-find
identifier:	mapping-size
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-search!
identifier:	mapping-search
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-pop!
identifier:	mapping-pop
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-update!/default
identifier:	mapping-update/default
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update!
identifier:	mapping-update
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-intern!
identifier:	mapping-intern
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-delete-all!
identifier:	mapping-delete-all
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete!
identifier:	mapping-delete
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-replace!
identifier:	mapping-replace
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-set!
identifier:	mapping-set
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-adjoin!
identifier:	mapping-adjoin
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-key-comparator
identifier:	mapping-ref/default
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref
identifier:	mapping-disjoint?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-empty?
identifier:	mapping-contains?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping?
identifier:	mapping-unfold/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping
library:	( srfi :146)
path:		./.akku/lib/srfi/146.sls
identifier:	comparator?
identifier:	comparator?
identifier:	comparator?
identifier:	mapping-fold/reverse
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-catenate!
identifier:	mapping-catenate
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-split
identifier:	mapping-range>=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range<=!
identifier:	mapping-range>!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range<!
identifier:	mapping-range=!
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range>=
identifier:	mapping-range<=
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range>
identifier:	mapping-range<
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range=
identifier:	mapping-key-successor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-predecessor
identifier:	mapping-max-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-min-value
identifier:	mapping-max-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-min-key
identifier:	mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-xor!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-difference!
identifier:	mapping-intersection!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-union!
identifier:	mapping-xor
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-difference
identifier:	mapping-intersection
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-union
identifier:	mapping>=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping<=?
identifier:	mapping>?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping<?
identifier:	mapping=?
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping!
identifier:	alist->mapping
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	mapping->alist
identifier:	mapping-copy
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-partition!
identifier:	mapping-partition
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-remove!
identifier:	mapping-remove
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-filter!
identifier:	mapping-filter
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-fold
identifier:	mapping-for-each
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-map->list
identifier:	mapping-map
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-entries
identifier:	mapping-values
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-keys
identifier:	mapping-every?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-any?
identifier:	mapping-count
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-find
identifier:	mapping-size
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-search!
identifier:	mapping-search
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-pop!
identifier:	mapping-pop
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-update!/default
identifier:	mapping-update/default
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update!
identifier:	mapping-update
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-intern!
identifier:	mapping-intern
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-delete-all!
identifier:	mapping-delete-all
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete!
identifier:	mapping-delete
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-replace!
identifier:	mapping-replace
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-set!
identifier:	mapping-set
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-adjoin!
identifier:	mapping-adjoin
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-key-comparator
identifier:	mapping-ref/default
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref
identifier:	mapping-disjoint?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-empty?
identifier:	mapping-contains?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping?
identifier:	mapping-unfold/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping
library:	( srfi :146)
path:		./.akku/lib/srfi/%3a146.sls
identifier:	comparator?
identifier:	comparator?
identifier:	comparator?
identifier:	mapping-fold/reverse
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone!
identifier:	mapping-map/monotone
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-catenate!
identifier:	mapping-catenate!
identifier:	mapping-catenate
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-split
identifier:	mapping-split
identifier:	mapping-range>=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<=!
identifier:	mapping-range<=!
identifier:	mapping-range>!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range<!
identifier:	mapping-range<!
identifier:	mapping-range=!
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>=
identifier:	mapping-range>=
identifier:	mapping-range<=
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range>
identifier:	mapping-range>
identifier:	mapping-range<
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-range=
identifier:	mapping-range=
identifier:	mapping-key-successor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-key-predecessor
identifier:	mapping-key-predecessor
identifier:	mapping-max-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-value
identifier:	mapping-min-value
identifier:	mapping-max-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	mapping-min-key
identifier:	mapping-min-key
identifier:	mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	make-mapping-comparator
identifier:	make-mapping-comparator
identifier:	mapping-xor!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-difference!
identifier:	mapping-difference!
identifier:	mapping-intersection!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-union!
identifier:	mapping-union!
identifier:	mapping-xor
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-difference
identifier:	mapping-difference
identifier:	mapping-intersection
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping-union
identifier:	mapping-union
identifier:	mapping>=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<=?
identifier:	mapping<=?
identifier:	mapping>?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping>?
identifier:	mapping<?
identifier:	mapping<?
identifier:	mapping=?
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered!
identifier:	alist->mapping/ordered
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	alist->mapping!
identifier:	alist->mapping!
identifier:	alist->mapping
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping->alist
identifier:	mapping->alist
identifier:	mapping-copy
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-partition!
identifier:	mapping-partition!
identifier:	mapping-partition
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-remove!
identifier:	mapping-remove!
identifier:	mapping-remove
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-filter!
identifier:	mapping-filter!
identifier:	mapping-filter
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-fold
identifier:	mapping-fold
identifier:	mapping-for-each
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-map->list
identifier:	mapping-map->list
identifier:	mapping-map
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-entries
identifier:	mapping-entries
identifier:	mapping-values
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-keys
identifier:	mapping-keys
identifier:	mapping-every?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-any?
identifier:	mapping-any?
identifier:	mapping-count
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-find
identifier:	mapping-find
identifier:	mapping-size
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-search!
identifier:	mapping-search!
identifier:	mapping-search
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-pop!
identifier:	mapping-pop!
identifier:	mapping-pop
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!/default
identifier:	mapping-update!/default
identifier:	mapping-update/default
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-update!
identifier:	mapping-update!
identifier:	mapping-update
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-intern!
identifier:	mapping-intern!
identifier:	mapping-intern
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete-all!
identifier:	mapping-delete-all!
identifier:	mapping-delete-all
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-delete!
identifier:	mapping-delete!
identifier:	mapping-delete
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-replace!
identifier:	mapping-replace!
identifier:	mapping-replace
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-set!
identifier:	mapping-set!
identifier:	mapping-set
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-adjoin!
identifier:	mapping-adjoin!
identifier:	mapping-adjoin
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-key-comparator
identifier:	mapping-key-comparator
identifier:	mapping-ref/default
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-ref
identifier:	mapping-ref
identifier:	mapping-disjoint?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping-empty?
identifier:	mapping-empty?
identifier:	mapping-contains?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping?
identifier:	mapping?
identifier:	mapping-unfold/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping/ordered
identifier:	mapping/ordered
identifier:	mapping-unfold
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping-unfold
identifier:	mapping
identifier:	mapping
library:	( srfi :146 hash)
path:		./.akku/lib/srfi/146/hash.sls
identifier:	comparator?
identifier:	make-hashmap-comparator
identifier:	hashmap-comparator
identifier:	hashmap-difference!
identifier:	hashmap-xor!
identifier:	hashmap-union!
identifier:	hashmap-intersection!
identifier:	hashmap-difference
identifier:	hashmap-xor
identifier:	hashmap-union
identifier:	hashmap-intersection
identifier:	hashmap<=?
identifier:	hashmap>=?
identifier:	hashmap<?
identifier:	hashmap>?
identifier:	alist->hashmap!
identifier:	hashmap=?
identifier:	hashmap->alist
identifier:	alist->hashmap
identifier:	hashmap-partition!
identifier:	hashmap-copy
identifier:	hashmap-remove!
identifier:	hashmap-partition
identifier:	hashmap-filter!
identifier:	hashmap-remove
identifier:	hashmap-fold
identifier:	hashmap-filter
identifier:	hashmap-map->list
identifier:	hashmap-for-each
identifier:	hashmap-entries
identifier:	hashmap-map
identifier:	hashmap-keys
identifier:	hashmap-values
identifier:	hashmap-any?
identifier:	hashmap-every?
identifier:	hashmap-find
identifier:	hashmap-count
identifier:	hashmap-search!
identifier:	hashmap-size
identifier:	hashmap-pop!
identifier:	hashmap-search
identifier:	hashmap-update!/default
identifier:	hashmap-pop
identifier:	hashmap-update!
identifier:	hashmap-update/default
identifier:	hashmap-intern!
identifier:	hashmap-update
identifier:	hashmap-delete-all!
identifier:	hashmap-intern
identifier:	hashmap-delete!
identifier:	hashmap-delete-all
identifier:	hashmap-replace!
identifier:	hashmap-delete
identifier:	hashmap-set!
identifier:	hashmap-replace
identifier:	hashmap-adjoin!
identifier:	hashmap-set
identifier:	hashmap-key-comparator
identifier:	hashmap-adjoin
identifier:	hashmap-ref
identifier:	hashmap-ref/default
identifier:	hashmap-empty?
identifier:	hashmap-disjoint?
identifier:	hashmap?
identifier:	hashmap-contains?
identifier:	hashmap
identifier:	hashmap-unfold
library:	( srfi :146 hash)
path:		./.akku/lib/srfi/%3a146/hash.sls
identifier:	comparator?
identifier:	make-hashmap-comparator
identifier:	hashmap-comparator
identifier:	hashmap-difference!
identifier:	hashmap-xor!
identifier:	hashmap-union!
identifier:	hashmap-intersection!
identifier:	hashmap-difference
identifier:	hashmap-xor
identifier:	hashmap-union
identifier:	hashmap-intersection
identifier:	hashmap<=?
identifier:	hashmap>=?
identifier:	hashmap<?
identifier:	hashmap>?
identifier:	alist->hashmap!
identifier:	hashmap=?
identifier:	hashmap->alist
identifier:	alist->hashmap
identifier:	hashmap-partition!
identifier:	hashmap-copy
identifier:	hashmap-remove!
identifier:	hashmap-partition
identifier:	hashmap-filter!
identifier:	hashmap-remove
identifier:	hashmap-fold
identifier:	hashmap-filter
identifier:	hashmap-map->list
identifier:	hashmap-for-each
identifier:	hashmap-entries
identifier:	hashmap-map
identifier:	hashmap-keys
identifier:	hashmap-values
identifier:	hashmap-any?
identifier:	hashmap-every?
identifier:	hashmap-find
identifier:	hashmap-count
identifier:	hashmap-search!
identifier:	hashmap-size
identifier:	hashmap-pop!
identifier:	hashmap-search
identifier:	hashmap-update!/default
identifier:	hashmap-pop
identifier:	hashmap-update!
identifier:	hashmap-update/default
identifier:	hashmap-intern!
identifier:	hashmap-update
identifier:	hashmap-delete-all!
identifier:	hashmap-intern
identifier:	hashmap-delete!
identifier:	hashmap-delete-all
identifier:	hashmap-replace!
identifier:	hashmap-delete
identifier:	hashmap-set!
identifier:	hashmap-replace
identifier:	hashmap-adjoin!
identifier:	hashmap-set
identifier:	hashmap-key-comparator
identifier:	hashmap-adjoin
identifier:	hashmap-ref
identifier:	hashmap-ref/default
identifier:	hashmap-empty?
identifier:	hashmap-disjoint?
identifier:	hashmap?
identifier:	hashmap-contains?
identifier:	hashmap
identifier:	hashmap-unfold
library:	( srfi :146 hash)
path:		./.akku/lib/srfi/:146/hash.sls
identifier:	comparator?
identifier:	make-hashmap-comparator
identifier:	hashmap-comparator
identifier:	hashmap-difference!
identifier:	hashmap-xor!
identifier:	hashmap-union!
identifier:	hashmap-intersection!
identifier:	hashmap-difference
identifier:	hashmap-xor
identifier:	hashmap-union
identifier:	hashmap-intersection
identifier:	hashmap<=?
identifier:	hashmap>=?
identifier:	hashmap<?
identifier:	hashmap>?
identifier:	alist->hashmap!
identifier:	hashmap=?
identifier:	hashmap->alist
identifier:	alist->hashmap
identifier:	hashmap-partition!
identifier:	hashmap-copy
identifier:	hashmap-remove!
identifier:	hashmap-partition
identifier:	hashmap-filter!
identifier:	hashmap-remove
identifier:	hashmap-fold
identifier:	hashmap-filter
identifier:	hashmap-map->list
identifier:	hashmap-for-each
identifier:	hashmap-entries
identifier:	hashmap-map
identifier:	hashmap-keys
identifier:	hashmap-values
identifier:	hashmap-any?
identifier:	hashmap-every?
identifier:	hashmap-find
identifier:	hashmap-count
identifier:	hashmap-search!
identifier:	hashmap-size
identifier:	hashmap-pop!
identifier:	hashmap-search
identifier:	hashmap-update!/default
identifier:	hashmap-pop
identifier:	hashmap-update!
identifier:	hashmap-update/default
identifier:	hashmap-intern!
identifier:	hashmap-update
identifier:	hashmap-delete-all!
identifier:	hashmap-intern
identifier:	hashmap-delete!
identifier:	hashmap-delete-all
identifier:	hashmap-replace!
identifier:	hashmap-delete
identifier:	hashmap-set!
identifier:	hashmap-replace
identifier:	hashmap-adjoin!
identifier:	hashmap-set
identifier:	hashmap-key-comparator
identifier:	hashmap-adjoin
identifier:	hashmap-ref
identifier:	hashmap-ref/default
identifier:	hashmap-empty?
identifier:	hashmap-disjoint?
identifier:	hashmap?
identifier:	hashmap-contains?
identifier:	hashmap
identifier:	hashmap-unfold
library:	( srfi :146 nieper rbtree)
path:		./.akku/lib/srfi/:146/nieper/rbtree.chezscheme.sls
identifier:	tree-split
identifier:	tree-map
identifier:	tree-catenate
identifier:	tree-key-predecessor
identifier:	tree-key-successor
identifier:	tree-fold/reverse
identifier:	tree-generator
identifier:	tree-for-each
identifier:	tree-fold
identifier:	make-tree
identifier:	tree-search
library:	( srfi :146 mappings)
path:		./.akku/lib/srfi/146/mappings.sls
identifier:	comparator?
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<?
identifier:	mapping>?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping
identifier:	mapping-unfold
library:	( srfi :146 mappings)
path:		./.akku/lib/srfi/%3a146/mappings.sls
identifier:	comparator?
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<?
identifier:	mapping>?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping
identifier:	mapping-unfold
library:	( srfi :146 mappings)
path:		./.akku/lib/srfi/:146/mappings.sls
identifier:	comparator?
identifier:	mapping-map/monotone!
identifier:	mapping-fold/reverse
identifier:	mapping-catenate!
identifier:	mapping-map/monotone
identifier:	mapping-split
identifier:	mapping-catenate
identifier:	mapping-range<=!
identifier:	mapping-range>=!
identifier:	mapping-range<!
identifier:	mapping-range>!
identifier:	mapping-range>=
identifier:	mapping-range=!
identifier:	mapping-range>
identifier:	mapping-range<=
identifier:	mapping-range=
identifier:	mapping-range<
identifier:	mapping-key-predecessor
identifier:	mapping-key-successor
identifier:	mapping-min-value
identifier:	mapping-max-value
identifier:	mapping-min-key
identifier:	mapping-max-key
identifier:	make-mapping-comparator
identifier:	mapping-comparator
identifier:	mapping-difference!
identifier:	mapping-xor!
identifier:	mapping-union!
identifier:	mapping-intersection!
identifier:	mapping-difference
identifier:	mapping-xor
identifier:	mapping-union
identifier:	mapping-intersection
identifier:	mapping<=?
identifier:	mapping>=?
identifier:	mapping<?
identifier:	mapping>?
identifier:	alist->mapping/ordered!
identifier:	mapping=?
identifier:	alist->mapping!
identifier:	alist->mapping/ordered
identifier:	mapping->alist
identifier:	alist->mapping
identifier:	mapping-partition!
identifier:	mapping-copy
identifier:	mapping-remove!
identifier:	mapping-partition
identifier:	mapping-filter!
identifier:	mapping-remove
identifier:	mapping-fold
identifier:	mapping-filter
identifier:	mapping-map->list
identifier:	mapping-for-each
identifier:	mapping-entries
identifier:	mapping-map
identifier:	mapping-keys
identifier:	mapping-values
identifier:	mapping-any?
identifier:	mapping-every?
identifier:	mapping-find
identifier:	mapping-count
identifier:	mapping-search!
identifier:	mapping-size
identifier:	mapping-pop!
identifier:	mapping-search
identifier:	mapping-update!/default
identifier:	mapping-pop
identifier:	mapping-update!
identifier:	mapping-update/default
identifier:	mapping-intern!
identifier:	mapping-update
identifier:	mapping-delete-all!
identifier:	mapping-intern
identifier:	mapping-delete!
identifier:	mapping-delete-all
identifier:	mapping-replace!
identifier:	mapping-delete
identifier:	mapping-set!
identifier:	mapping-replace
identifier:	mapping-adjoin!
identifier:	mapping-set
identifier:	mapping-key-comparator
identifier:	mapping-adjoin
identifier:	mapping-ref
identifier:	mapping-ref/default
identifier:	mapping-empty?
identifier:	mapping-disjoint?
identifier:	mapping?
identifier:	mapping-contains?
identifier:	mapping/ordered
identifier:	mapping-unfold/ordered
identifier:	mapping
identifier:	mapping-unfold
library:	( srfi :146 gleckler hamt-misc)
path:		./.akku/lib/srfi/146/gleckler/hamt-misc.sls
identifier:	with-output-to-string
identifier:	do-list
identifier:	make-string-hash-table
identifier:	assert
identifier:	assert
library:	( srfi :146 gleckler hamt-misc)
path:		./.akku/lib/srfi/%3a146/gleckler/hamt-misc.sls
identifier:	with-output-to-string
identifier:	do-list
identifier:	make-string-hash-table
identifier:	assert
identifier:	assert
library:	( srfi :146 gleckler hamt-misc)
path:		./.akku/lib/srfi/:146/gleckler/hamt-misc.sls
identifier:	with-output-to-string
identifier:	do-list
identifier:	make-string-hash-table
identifier:	assert
identifier:	assert
library:	( srfi :146 gleckler hamt)
path:		./.akku/lib/srfi/:146/gleckler/hamt.chezscheme.sls
identifier:	wide/children
identifier:	wide?
identifier:	next-set-bit
identifier:	wide/array
identifier:	narrow/leaves
identifier:	narrow?
identifier:	leaf-stride
identifier:	narrow/array
identifier:	hamt-hash-size
identifier:	hamt/root
identifier:	collision?
identifier:	hamt-bucket-size
identifier:	hash-array-mapped-trie?
identifier:	make-hamt
identifier:	hamt/replace
identifier:	hamt/replace!
identifier:	hamt/put
identifier:	hamt/put!
identifier:	hamt/mutable?
identifier:	hamt/payload?
identifier:	hamt/immutable
identifier:	hamt/mutable
identifier:	hamt/empty?
identifier:	hamt/for-each
identifier:	hamt-null?
identifier:	hamt/count
identifier:	hamt-fetch
identifier:	hamt-null
identifier:	fragment->mask
identifier:	hamt->list
library:	( srfi :146 gleckler vector-edit)
path:		./.akku/lib/srfi/146/gleckler/vector-edit.sls
identifier:	vector-without
identifier:	vector-edit
identifier:	vector-replace-one
library:	( srfi :146 gleckler vector-edit)
path:		./.akku/lib/srfi/%3a146/gleckler/vector-edit.sls
identifier:	vector-without
identifier:	vector-edit
identifier:	vector-replace-one
library:	( srfi :146 gleckler vector-edit)
path:		./.akku/lib/srfi/:146/gleckler/vector-edit.sls
identifier:	vector-without
identifier:	vector-edit
identifier:	vector-replace-one
library:	( srfi :146 gleckler hamt-map)
path:		./.akku/lib/srfi/146/gleckler/hamt-map.sls
identifier:	phm/data
identifier:	phm/replace
identifier:	phm/replace!
identifier:	phm/remove
identifier:	phm/remove!
identifier:	phm/put
identifier:	phm/put!
identifier:	phm/mutable
identifier:	phm/mutable?
identifier:	phm/immutable
identifier:	phm/keys
identifier:	phm/for-each
identifier:	phm/get
identifier:	phm/count
identifier:	phm/empty?
identifier:	phm/add-alist!
identifier:	phm/contains?
identifier:	phm->alist
identifier:	phm/add-alist
identifier:	make-phm
identifier:	phm?
library:	( srfi :146 gleckler hamt-map)
path:		./.akku/lib/srfi/%3a146/gleckler/hamt-map.sls
identifier:	phm/data
identifier:	phm/replace
identifier:	phm/replace!
identifier:	phm/remove
identifier:	phm/remove!
identifier:	phm/put
identifier:	phm/put!
identifier:	phm/mutable
identifier:	phm/mutable?
identifier:	phm/immutable
identifier:	phm/keys
identifier:	phm/for-each
identifier:	phm/get
identifier:	phm/count
identifier:	phm/empty?
identifier:	phm/add-alist!
identifier:	phm/contains?
identifier:	phm->alist
identifier:	phm/add-alist
identifier:	make-phm
identifier:	phm?
library:	( srfi :146 gleckler hamt-map)
path:		./.akku/lib/srfi/:146/gleckler/hamt-map.sls
identifier:	phm/data
identifier:	phm/replace
identifier:	phm/replace!
identifier:	phm/remove
identifier:	phm/remove!
identifier:	phm/put
identifier:	phm/put!
identifier:	phm/mutable
identifier:	phm/mutable?
identifier:	phm/immutable
identifier:	phm/keys
identifier:	phm/for-each
identifier:	phm/get
identifier:	phm/count
identifier:	phm/empty?
identifier:	phm/add-alist!
identifier:	phm/contains?
identifier:	phm->alist
identifier:	phm/add-alist
identifier:	make-phm
identifier:	phm?
library:	( akku-r7rs compat)
path:		./.akku/lib/akku-r7rs/compat.sls
identifier:	define-values
identifier:	define-values
identifier:	eval
identifier:	native-emergency-exit
identifier:	u8-ready?
identifier:	interaction-environment
type:		(void? <- (inner:list? ) ) 
identifier:	output-port-open?
identifier:	char-ready?
identifier:	features
type:		((inner:list? something? ... ) <- (inner:list? ) ) 
identifier:	input-port-open?
library:	( akku-r7rs compat)
path:		./.akku/lib/akku-r7rs/compat.chezscheme.sls
identifier:	define-values
identifier:	eval
identifier:	native-emergency-exit
identifier:	u8-ready?
identifier:	interaction-environment
identifier:	output-port-open?
identifier:	char-ready?
type:		([identifier-refrence boolean?] <- (inner:list? ) ) 
identifier:	features
type:		((inner:list? something? ... ) <- (inner:list? ) ) 
identifier:	input-port-open?
library:	( akku-r7rs base)
path:		./.akku/lib/akku-r7rs/base.sls
identifier:	write-u8
identifier:	zero?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	write-char
identifier:	write-string
identifier:	with-exception-handler
identifier:	write-bytevector
identifier:	vector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	when
identifier:	vector-ref
identifier:	vector-set!
type:		(void? <- (inner:list? (inner:vector? something? ... ) [identifier-refrence integer?] something? ) ) 
identifier:	vector-length
type:		([identifier-refrence integer?] <- (inner:list? (inner:vector? something? ... ) ) ) 
identifier:	vector-map
identifier:	vector-fill!
identifier:	vector-for-each
identifier:	vector-copy!
identifier:	vector-fill!
identifier:	vector-append
identifier:	vector-copy
identifier:	vector->list
identifier:	vector->string
identifier:	vector
identifier:	vector->list
identifier:	utf8->string
identifier:	values
identifier:	unquote-splicing
identifier:	utf8->string
identifier:	unless
identifier:	unquote
identifier:	truncate/
identifier:	u8-ready?
identifier:	truncate-quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	truncate-remainder
identifier:	textual-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	truncate
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	syntax-rules
identifier:	textual-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	syntax-error
identifier:	syntax-rules
identifier:	symbol=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence symbol?] [identifier-refrence symbol?] ) ) 
identifier:	symbol?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	substring
identifier:	symbol->string
identifier:	string>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	string=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] **1 ) ) 
identifier:	string-ref
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
identifier:	string-set!
identifier:	string-length
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string-map
identifier:	string-fill!
identifier:	string-for-each
identifier:	string-copy
identifier:	string-copy!
identifier:	string-append
identifier:	string-copy
identifier:	string->utf8
identifier:	string->vector
identifier:	string->symbol
type:		([identifier-refrence symbol?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string->utf8
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string->number
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence char?] ... ) ) 
identifier:	string->list
type:		((inner:list? [identifier-refrence char?] ... ) <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	set-cdr!
identifier:	square
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	set!
identifier:	set-car!
identifier:	reverse
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	round
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	real?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	remainder
identifier:	read-string
identifier:	read-u8
identifier:	read-error?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	read-line
identifier:	read-bytevector!
identifier:	read-char
type:		([identifier-refrence char?] <- (inner:list? textual-output-port? ) ) 
type:		([identifier-refrence char?] <- (inner:list? ) ) 
identifier:	rationalize
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	read-bytevector
identifier:	raise-continuable
identifier:	rational?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	quotient
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	raise
identifier:	quasiquote
identifier:	quote
identifier:	positive?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	procedure?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	peek-char
identifier:	peek-u8
identifier:	pair?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	parameterize
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	output-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	or
identifier:	output-port-open?
identifier:	open-output-bytevector
identifier:	open-output-string
identifier:	open-input-bytevector
identifier:	open-input-string
identifier:	numerator
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	odd?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	number->string
identifier:	number?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	not
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	null?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	negative?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	newline
identifier:	min
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	modulo
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	memq
identifier:	memv
identifier:	member
identifier:	member
identifier:	map
identifier:	max
type:		([identifier-refrence real?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] ) ) 
identifier:	make-vector
identifier:	map
identifier:	make-parameter
identifier:	make-string
identifier:	make-bytevector
identifier:	make-list
identifier:	list-tail
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) [identifier-refrence integer?] ) ) 
identifier:	list?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	list-ref
identifier:	list-set!
identifier:	list->vector
type:		((inner:vector? something? ... ) <- (inner:list? (inner:list? something? ... ) ) ) 
identifier:	list-copy
identifier:	list
type:		((inner:list? something? ... ) <- (inner:list? something? ... ) ) 
identifier:	list->string
type:		([identifier-refrence string?] <- (inner:list? (inner:list? [identifier-refrence char?] ... ) ) ) 
identifier:	letrec*
identifier:	letrec-syntax
identifier:	let-values
identifier:	letrec
identifier:	let-syntax
identifier:	let-syntax
identifier:	let*
identifier:	let*-values
identifier:	length
identifier:	let
identifier:	lambda
identifier:	lcm
identifier:	integer->char
type:		([identifier-refrence char?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	integer?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	input-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	inexact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	input-port-open?
identifier:	include-ci
identifier:	inexact
identifier:	if
identifier:	include
identifier:	get-output-string
identifier:	guard
identifier:	gcd
identifier:	get-output-bytevector
identifier:	for-each
identifier:	for-each
identifier:	flush-output-port
type:		([identifier-refrence flonum?] <- (inner:list? ) ) 
identifier:	flush-output-port
type:		([identifier-refrence flonum?] <- (inner:list? ) ) 
identifier:	floor-remainder
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	floor/
identifier:	floor
type:		([identifier-refrence flonum?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	floor-quotient
identifier:	features
identifier:	file-error?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	expt
identifier:	expt
identifier:	exact-integer?
identifier:	exact?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence number?] ) ) 
identifier:	exact
identifier:	exact-integer-sqrt
identifier:	error-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	even?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence integer?] ) ) 
identifier:	error-object-irritants
identifier:	error-object-message
identifier:	eqv?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	error
type:		(void? <- (inner:list? something? something? **1 ) ) 
identifier:	eq?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	equal?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eof-object?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	eof-object
identifier:	eof-object
identifier:	do
identifier:	dynamic-wind
identifier:	define-values
identifier:	denominator
type:		([identifier-refrence rational?] <- (inner:list? [identifier-refrence rational?] ) ) 
identifier:	define-record-type
identifier:	define-syntax
identifier:	define
identifier:	define-record-type
identifier:	current-output-port
identifier:	current-output-port
identifier:	current-input-port
identifier:	current-input-port
identifier:	current-error-port
identifier:	current-error-port
identifier:	cond-expand
identifier:	cons
identifier:	complex?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	cond
identifier:	close-port
identifier:	close-port
identifier:	close-input-port
identifier:	close-output-port
identifier:	char>?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	char=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char>=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char<=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char<?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence char?] [identifier-refrence char?] **1 ) ) 
identifier:	char->integer
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence char?] ) ) 
identifier:	char-ready?
identifier:	cdr
identifier:	ceiling
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	cdar
identifier:	cddr
identifier:	case
identifier:	case
identifier:	call/cc
identifier:	car
identifier:	call-with-port
identifier:	call-with-values
identifier:	call-with-current-continuation
identifier:	call-with-port
identifier:	caar
identifier:	cadr
identifier:	bytevector-u8-set!
identifier:	bytevector?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	bytevector-length
identifier:	bytevector-u8-ref
identifier:	bytevector-copy!
identifier:	bytevector-copy!
identifier:	bytevector-copy
identifier:	bytevector-copy
identifier:	bytevector
identifier:	bytevector-append
identifier:	boolean=?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence boolean?] [identifier-refrence boolean?] ) ) 
identifier:	boolean?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	binary-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	binary-port?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	assv
identifier:	begin
identifier:	assoc
identifier:	assq
identifier:	apply
identifier:	assoc
identifier:	and
identifier:	append
type:		((inner:list? something? ... ) <- (inner:list? (inner:list? something? ... ) **1 something? ) ) 
identifier:	>=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	abs
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence real?] ) ) 
identifier:	=
identifier:	>
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	<
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	<=
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence real?] [identifier-refrence real?] **1 ) ) 
identifier:	-
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	/
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] **1 ) ) 
identifier:	*
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
identifier:	+
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] ... ) ) 
library:	( akku-r7rs include)
path:		./.akku/lib/akku-r7rs/include.sls
identifier:	include-helper
library:	( ufo-match)
path:		./.akku/lib/ufo-match.chezscheme.sls
identifier:	get!
identifier:	&
identifier:	object
identifier:	$
identifier:	struct
identifier:	***
identifier:	?
identifier:	=..
identifier:	*..
identifier:	___
identifier:	**1
identifier:	match-named-let
identifier:	:_
identifier:	match-let*
identifier:	match-letrec
identifier:	match-lambda*
identifier:	match-let
identifier:	match
identifier:	match-lambda
library:	( private install sipp)
path:		./.akku/lib/private/install/sipp.chezscheme.sls
identifier:	replace-source
identifier:	directory-separator-string
type:		[identifier-refrence string?] 
identifier:	join-string
library:	( hashing xxhash)
path:		./.akku/lib/hashing/xxhash.sls
identifier:	xxh32->integer
identifier:	xxh32-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	xxh32->string
identifier:	xxh32-copy
identifier:	xxh32-finish
identifier:	xxh32-finish!
identifier:	xxh32
identifier:	make-xxh32
identifier:	xxh32-update!
library:	( hashing crc)
path:		./.akku/lib/hashing/crc.sls
identifier:	check
identifier:	ref-out
identifier:	xor-out
identifier:	init
identifier:	ref-in
identifier:	width
identifier:	polynomial
identifier:	define-crc
identifier:	define-bit-oriented-crc
library:	( hashing sha-2)
path:		./.akku/lib/hashing/sha-2.sls
identifier:	sha-512-128-hash=?
identifier:	hmac-sha-512
identifier:	sha-512->string
identifier:	sha-512-hash=?
identifier:	sha-512-128-copy-hash!
identifier:	sha-512->bytevector
identifier:	sha-512-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	sha-512-copy-hash!
identifier:	sha-512-copy
identifier:	sha-512-finish
identifier:	sha-512-clear!
identifier:	sha-512
identifier:	sha-512-update!
identifier:	sha-512-finish!
identifier:	hmac-sha-384
identifier:	make-sha-512
type:		([identifier-refrence sha-state?] <- (inner:list? ) ) 
identifier:	sha-384-hash=?
identifier:	sha-384-128-hash=?
identifier:	sha-384->bytevector
identifier:	sha-384->string
identifier:	sha-384-copy-hash!
identifier:	sha-384-128-copy-hash!
identifier:	sha-384-finish
identifier:	sha-384-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	sha-384
identifier:	sha-384-copy
identifier:	sha-384-finish!
identifier:	sha-384-clear!
identifier:	make-sha-384
type:		([identifier-refrence sha-state?] <- (inner:list? ) ) 
identifier:	sha-384-update!
identifier:	sha-256-128-hash=?
identifier:	hmac-sha-256
identifier:	sha-256->string
identifier:	sha-256-hash=?
identifier:	sha-256-128-copy-hash!
identifier:	sha-256->bytevector
identifier:	sha-256-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	sha-256-copy-hash!
identifier:	sha-256-copy
identifier:	sha-256-finish
identifier:	sha-256-clear!
identifier:	sha-256
identifier:	sha-256-update!
identifier:	sha-256-finish!
identifier:	hmac-sha-224
identifier:	make-sha-256
type:		([identifier-refrence sha-state?] <- (inner:list? ) ) 
identifier:	sha-224-hash=?
identifier:	sha-224-128-hash=?
identifier:	sha-224->bytevector
identifier:	sha-224->string
identifier:	sha-224-copy-hash!
identifier:	sha-224-128-copy-hash!
identifier:	sha-224-finish
identifier:	sha-224-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	sha-224
identifier:	sha-224-copy
identifier:	sha-224-finish!
identifier:	sha-224-clear!
identifier:	make-sha-224
type:		([identifier-refrence sha-state?] <- (inner:list? ) ) 
identifier:	sha-224-update!
library:	( hashing hmac)
path:		./.akku/lib/hashing/hmac.sls
identifier:	make-hmac
library:	( hashing sha-1)
path:		./.akku/lib/hashing/sha-1.sls
identifier:	sha-1-96-hash=?
identifier:	hmac-sha-1
identifier:	sha-1->string
identifier:	sha-1-hash=?
identifier:	sha-1-96-copy-hash!
identifier:	sha-1->bytevector
identifier:	sha-1-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	sha-1-copy-hash!
identifier:	sha-1-finish
identifier:	sha-1-transform!
identifier:	sha-1
identifier:	sha-1-copy
identifier:	sha-1-finish!
identifier:	sha-1-clear!
identifier:	make-sha-1
type:		([identifier-refrence sha1state?] <- (inner:list? ) ) 
identifier:	sha-1-update!
library:	( hashing md5)
path:		./.akku/lib/hashing/md5.sls
identifier:	hmac-md5
identifier:	md5-hash=?
identifier:	md5-96-hash=?
identifier:	md5->bytevector
identifier:	md5->string
identifier:	md5-copy-hash!
identifier:	md5-96-copy-hash!
identifier:	md5-finish
identifier:	md5-length
type:		([identifier-refrence fixnum?] <- (inner:list? ) ) 
identifier:	md5
identifier:	md5-copy
identifier:	md5-finish!
identifier:	md5-clear!
identifier:	make-md5
type:		([identifier-refrence md5state?] <- (inner:list? ) ) 
identifier:	md5-update!
library:	( hashing fixnums)
path:		./.akku/lib/hashing/fixnums.sls
identifier:	define-fixnum-procedures
library:	( hashing private compat)
path:		./.akku/lib/hashing/private/compat.sls
identifier:	bitwise-rotate-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
identifier:	bitwise-reverse-bit-field
type:		([identifier-refrence integer?] <- (inner:list? [identifier-refrence integer?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
library:	( hashing private common)
path:		./.akku/lib/hashing/private/common.sls
identifier:	symcat
identifier:	iota
identifier:	decode-coefficients
library:	( ufo-coroutines)
path:		./.akku/lib/ufo-coroutines.chezscheme.sls
identifier:	init-coroutine
identifier:	init-iterator
library:	( scheme-langserver)
path:		./scheme-langserver.sls
identifier:	init-server
library:	( scheme-langserver analysis workspace)
path:		./analysis/workspace.sls
identifier:	generate-library-node
identifier:	update-file-node-with-tail
identifier:	pick
type:		((inner:list? something? ) <- (inner:list? something? [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? [identifier-refrence real?] ) ) 
type:		((inner:list? something? ) <- (inner:list? something? [identifier-refrence real?] ) ) 
identifier:	workspace-ss/scm-import-rnrs?
identifier:	workspace-type-inference?
identifier:	workspace-library-node-set!
type:		(void? <- (inner:list? [identifier-refrence workspace?] something? ) ) 
identifier:	workspace-file-linkage
identifier:	workspace-file-node-set!
type:		(void? <- (inner:list? [identifier-refrence workspace?] something? ) ) 
identifier:	workspace-library-node
identifier:	workspace?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	workspace-file-node
identifier:	refresh-workspace
type:		([identifier-refrence workspace?] <- (inner:list? something? ) ) 
type:		([identifier-refrence workspace?] <- (inner:list? [identifier-refrence workspace?] ) ) 
identifier:	refresh-workspace-for
identifier:	init-document
identifier:	init-references
identifier:	init-library-node
identifier:	init-index-node
type:		([identifier-refrence index-node?] <- (inner:list? something? [identifier-refrence annotation?] ) ) 
type:		([identifier-refrence index-node?] <- (inner:list? something? something? ) ) 
identifier:	init-workspace
type:		([identifier-refrence workspace?] <- (inner:list? something? something? something? something? something? ) ) 
type:		([identifier-refrence workspace?] <- (inner:list? something? something? ([identifier-refrence boolean?] <- (inner:list? ) ) something? something? ) ) 
type:		([identifier-refrence workspace?] <- (inner:list? [identifier-refrence string?] something? something? something? something? ) ) 
type:		([identifier-refrence workspace?] <- (inner:list? [identifier-refrence string?] something? ([identifier-refrence boolean?] <- (inner:list? ) ) something? something? ) ) 
identifier:	init-virtual-file-system
type:		((inner:list? ) <- (inner:list? [identifier-refrence string?] something? something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? ) ) 
library:	( scheme-langserver analysis identifier reference)
path:		./analysis/identifier/reference.sls
identifier:	is-ancestor-of?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence identifier-reference?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	library-identifier?
identifier:	sort-identifier-references
identifier:	pure-identifier-reference-misture?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	identifier-reference-initialization-index-node
identifier:	transform
type:		((inner:list? ) <- (inner:list? something? (inner:pair? something? something? ) something? something? something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? something? something? ) ) 
identifier:	identifier-reference-type-expressions-set!
type:		(void? <- (inner:list? [identifier-refrence identifier-reference?] something? ) ) 
identifier:	identifier-reference-index-node
identifier:	identifier-reference-parents
identifier:	identifier-reference-parents-set!
type:		(void? <- (inner:list? [identifier-refrence identifier-reference?] something? ) ) 
identifier:	identifier-reference-type-expressions
identifier:	identifier-reference-type
identifier:	identifier-reference-document
identifier:	identifier-reference-library-identifier
identifier:	make-identifier-reference
type:		([identifier-refrence identifier-reference?] <- (inner:list? something? ... ) ) 
identifier:	identifier-reference-identifier
identifier:	guard-for
identifier:	identifier-reference?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	find-available-references-for
identifier:	find-references-in
library:	( scheme-langserver analysis identifier meta)
path:		./analysis/identifier/meta.sls
identifier:	construct-type-expression-with-meta
identifier:	find-meta
library:	( scheme-langserver analysis identifier rules library-define)
path:		./analysis/identifier/rules/define.sls
identifier:	define-process
library:	( scheme-langserver analysis identifier rules do)
path:		./analysis/identifier/rules/do.sls
identifier:	do-process
library:	( scheme-langserver analysis identifier rules syntax)
path:		./analysis/identifier/rules/syntax.sls
identifier:	syntax-process
library:	( scheme-langserver analysis identifier rules library-import)
path:		./analysis/identifier/rules/library-import.sls
identifier:	import-from-external-index-node
identifier:	process-library-identifier-excluded-references
identifier:	import-process
identifier:	import-references
library:	( scheme-langserver analysis identifier rules library-export)
path:		./analysis/identifier/rules/library-export.sls
identifier:	export-process
library:	( scheme-langserver analysis identifier rules lambda)
path:		./analysis/identifier/rules/lambda.sls
identifier:	lambda-process
library:	( scheme-langserver analysis identifier rules load)
path:		./analysis/identifier/rules/load.sls
identifier:	load-process
library:	( scheme-langserver analysis identifier rules define-record-type)
path:		./analysis/identifier/rules/define-record-type.sls
identifier:	define-record-type-process
identifier:	generative?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( scheme-langserver analysis identifier rules let)
path:		./analysis/identifier/rules/let.sls
identifier:	let-process
library:	( scheme-langserver analysis package-manager akku)
path:		./analysis/package-manager/akku.sls
identifier:	generate-akku-acceptable-file-filter
type:		(([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] ) ) <- (inner:list? something? ) ) 
type:		(([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] ) ) <- (inner:list? [identifier-refrence string?] ) ) 
type:		(([identifier-refrence boolean?] <- (inner:list? something? ) ) <- (inner:list? something? ) ) 
type:		(([identifier-refrence boolean?] <- (inner:list? something? ) ) <- (inner:list? [identifier-refrence string?] ) ) 
library:	( scheme-langserver analysis util)
path:		./analysis/util.sls
identifier:	get-library-identifiers-list
type:		((inner:list? ) <- (inner:list? something? ) ) 
identifier:	get-nearest-ancestor-library-identifier
type:		((inner:list? ) <- (inner:list? something? ) ) 
library:	( scheme-langserver analysis type domain-specific-language interpreter)
path:		./analysis/type/domain-specific-language/interpreter.sls
identifier:	make-type:environment
type:		([identifier-refrence type:environment?] <- (inner:list? something? ... ) ) 
identifier:	type:=?
identifier:	substitution:walk
identifier:	type:->?
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) something? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) (inner:pair? something? something? ) something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? (inner:pair? something? something? ) something? something? ) ) 
identifier:	type:<-?
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) (inner:pair? something? something? ) something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? (inner:pair? something? something? ) something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) something? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) (inner:pair? something? something? ) something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? (inner:pair? something? something? ) something? something? ) ) 
identifier:	type:recursive-interpret-result-list
identifier:	type:interpret->strings
identifier:	type:partially-solved?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	type:depature&interpret->result-list
identifier:	type:environment-result-list
identifier:	type:solved?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	type:interpret
identifier:	type:interpret-result-list
library:	( scheme-langserver analysis type domain-specific-language syntax-candy)
path:		./analysis/type/domain-specific-language/syntax-candy.sls
identifier:	segment-type
identifier:	segment-tail
identifier:	candy:match-right
identifier:	segment?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	candy:match
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] something? ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] something? ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? something? [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? something? [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? something? ) <- (inner:list? something? something? something? something? something? ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] something? ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? [identifier-refrence number?] something? ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? something? something? ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? something? [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? something? [identifier-refrence number?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence real?] something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence number?] something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? something? [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? something? [identifier-refrence number?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? something? something? ) ) 
identifier:	candy:match-left
identifier:	candy:segmentable?
identifier:	candy:matchable?
library:	( scheme-langserver analysis type domain-specific-language variable)
path:		./analysis/type/domain-specific-language/variable.sls
identifier:	pure-variable?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	variable-uuid
identifier:	make-variable
type:		([identifier-refrence variable?] <- (inner:list? something? ... ) ) 
identifier:	variable?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( scheme-langserver analysis type domain-specific-language inner-type-checker)
path:		./analysis/type/domain-specific-language/inner-type-checker.sls
identifier:	inner:executable?
identifier:	inner:pair-car
identifier:	inner:pair-cdr
identifier:	inner:vector?
identifier:	inner:pair?
identifier:	inner:?->pair
identifier:	inner:type->string
type:		([identifier-refrence string?] <- (inner:list? something? ) ) 
identifier:	inner:macro?
identifier:	inner:macro-template?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	inner:list?
identifier:	inner:list-content
identifier:	inner:record-properties
type:		((inner:list? ) <- (inner:list? something? ) ) 
type:		((inner:list? ) <- (inner:list? (inner:pair? something? something? ) ) ) 
identifier:	inner:record-predicator
type:		((inner:list? ) <- (inner:list? something? ) ) 
type:		((inner:list? ) <- (inner:list? (inner:pair? something? something? ) ) ) 
identifier:	inner:lambda-return
identifier:	inner:record?
identifier:	inner:lambda?
identifier:	inner:lambda-param
identifier:	inner:trivial?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	inner:contain?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
library:	( scheme-langserver analysis type substitutions rules define)
path:		./analysis/type/substitutions/rules/define.sls
identifier:	define-process
library:	( scheme-langserver analysis type substitutions rules do)
path:		./analysis/type/substitutions/rules/do.sls
identifier:	do-process
library:	( scheme-langserver analysis type substitutions rules record)
path:		./analysis/type/substitutions/rules/record.sls
identifier:	record-process
library:	( scheme-langserver analysis type substitutions rules application)
path:		./analysis/type/substitutions/rules/application.sls
identifier:	application-process
library:	( scheme-langserver analysis type substitutions rules if)
path:		./analysis/type/substitutions/rules/if.sls
identifier:	if-process
library:	( scheme-langserver analysis type substitutions rules let)
path:		./analysis/type/substitutions/rules/let.sls
identifier:	let-process
library:	( scheme-langserver analysis type substitutions rules lambda)
path:		./analysis/type/substitutions/rules/lambda.sls
identifier:	lambda-process
library:	( scheme-langserver analysis type substitutions rules trivial)
path:		./analysis/type/substitutions/rules/trivial.sls
identifier:	index-of
type:		([identifier-refrence fixnum?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence number?] <- (inner:list? something? something? ) ) 
identifier:	trivial-process
identifier:	generate-symbols-with
library:	( scheme-langserver analysis type substitutions rnrs-meta-rules)
path:		./analysis/type/substitutions/rnrs-meta-rules.sls
identifier:	rnrs-chez-rules
library:	( scheme-langserver analysis type substitutions generator)
path:		./analysis/type/substitutions/generator.sls
identifier:	construct-substitution-list-for
library:	( scheme-langserver analysis type substitutions util)
path:		./analysis/type/substitutions/util.sls
identifier:	quote?
identifier:	quasiquote?
identifier:	unquote-splicing?
identifier:	unquote?
identifier:	debug:pretty-print-substitution
identifier:	substitution->string
identifier:	add-to-substitutions
type:		((inner:list? something? ... ) <- (inner:list? something? ) ) 
type:		((inner:list? something? ) <- (inner:list? something? ) ) 
identifier:	remove-from-substitutions
identifier:	construct-substitutions-between-index-nodes
identifier:	substitution-compare
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) (inner:pair? something? something? ) ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? (inner:pair? something? something? ) something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? (inner:pair? something? something? ) ) ) 
identifier:	construct-lambdas-with
identifier:	construct-parameter-variable-products-with
library:	( scheme-langserver analysis dependency shrinker)
path:		./analysis/dependency/shrinker.sls
identifier:	shrink-paths
library:	( scheme-langserver analysis dependency file-linkage)
path:		./analysis/dependency/file-linkage.sls
identifier:	get-init-reference-path
identifier:	get-imported-libraries-from-index-node
identifier:	refresh-file-linkage&get-refresh-path
identifier:	get-reference-path-to
identifier:	get-reference-path-from
identifier:	file-linkage-from
identifier:	file-linkage-to
identifier:	file-linkage-set!
identifier:	file-linkage-head
identifier:	file-linkage-matrix
identifier:	file-linkage-take
identifier:	file-linkage?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	file-linkage-id->path-map
identifier:	init-file-linkage
identifier:	file-linkage-path->id-map
library:	( scheme-langserver analysis dependency rules load)
path:		./analysis/dependency/rules/load.sls
identifier:	load-process
library:	( scheme-langserver analysis dependency rules library-import)
path:		./analysis/dependency/rules/library-import.sls
identifier:	library-import-process
library:	( scheme-langserver analysis tokenizer)
path:		./analysis/tokenizer.sls
identifier:	source-file->annotations
library:	( scheme-langserver virtual-file-system library-node)
path:		./virtual-file-system/library-node.sls
identifier:	walk-library
type:		((inner:list? ) <- (inner:list? (inner:pair? something? something? ) [identifier-refrence library-node?] ) ) 
type:		([identifier-refrence library-node?] <- (inner:list? (inner:pair? something? something? ) [identifier-refrence library-node?] ) ) 
type:		((inner:list? ) <- (inner:list? something? [identifier-refrence library-node?] ) ) 
type:		([identifier-refrence library-node?] <- (inner:list? something? [identifier-refrence library-node?] ) ) 
identifier:	library-node-children-set!
type:		(void? <- (inner:list? [identifier-refrence library-node?] something? ) ) 
identifier:	library-node-name->string
type:		([identifier-refrence string?] <- (inner:list? [identifier-refrence library-node?] ) ) 
type:		([identifier-refrence string?] <- (inner:list? something? ) ) 
identifier:	library-node-file-nodes-set!
type:		(void? <- (inner:list? [identifier-refrence library-node?] something? ) ) 
identifier:	library-node-children
identifier:	library-node-parent
identifier:	library-node-file-nodes
identifier:	library-node?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	library-node-name
identifier:	delete-library-node-from-tree
type:		(void? <- (inner:list? [identifier-refrence library-node?] ) ) 
type:		(void? <- (inner:list? something? ) ) 
identifier:	make-library-node
type:		([identifier-refrence library-node?] <- (inner:list? something? ... ) ) 
library:	( scheme-langserver virtual-file-system file-node)
path:		./virtual-file-system/file-node.sls
identifier:	folder-or-scheme-file?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] ) ) 
identifier:	file-node-document
identifier:	walk-file
type:		((inner:list? ) <- (inner:list? [identifier-refrence file-node?] something? ) ) 
type:		([identifier-refrence file-node?] <- (inner:list? [identifier-refrence file-node?] something? ) ) 
identifier:	file-node-path
identifier:	file-node-document-set!
type:		(void? <- (inner:list? [identifier-refrence file-node?] something? ) ) 
identifier:	file-node-parent
identifier:	file-node-name
identifier:	file-node-children
identifier:	file-node-folder?
identifier:	file-node?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	file-node-children-set!
type:		(void? <- (inner:list? [identifier-refrence file-node?] something? ) ) 
identifier:	make-file-node
type:		([identifier-refrence file-node?] <- (inner:list? something? ... ) ) 
identifier:	file-node
library:	( scheme-langserver virtual-file-system document)
path:		./virtual-file-system/document.sls
identifier:	document-refreshable?-set!
type:		(void? <- (inner:list? [identifier-refrence document?] something? ) ) 
identifier:	is-ss/scm?
identifier:	document-substitution-list-set!
type:		(void? <- (inner:list? [identifier-refrence document?] something? ) ) 
identifier:	document-refreshable?
identifier:	document-reference-list-set!
type:		(void? <- (inner:list? [identifier-refrence document?] something? ) ) 
identifier:	document-substitution-list
identifier:	document-index-node-list-set!
type:		(void? <- (inner:list? [identifier-refrence document?] something? ) ) 
identifier:	document-reference-list
identifier:	document-text-set!
type:		(void? <- (inner:list? [identifier-refrence document?] something? ) ) 
identifier:	document-index-node-list
identifier:	document-uri
identifier:	document-text
identifier:	make-document
type:		([identifier-refrence document?] <- (inner:list? something? ... ) ) 
identifier:	document?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( scheme-langserver virtual-file-system index-node)
path:		./virtual-file-system/index-node.sls
identifier:	cover?
identifier:	clear-references-for
identifier:	is-leaf?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence index-node?] ) ) 
identifier:	is-ancestor?
type:		([identifier-refrence boolean?] <- (inner:list? something? [identifier-refrence index-node?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? something? ) ) 
identifier:	init-index-node
type:		([identifier-refrence index-node?] <- (inner:list? something? [identifier-refrence annotation?] ) ) 
type:		([identifier-refrence index-node?] <- (inner:list? something? something? ) ) 
identifier:	is-first-child?
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence index-node?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	index-node-excluded-references-set!
type:		(void? <- (inner:list? [identifier-refrence index-node?] something? ) ) 
identifier:	find-leaves
identifier:	index-node-references-import-in-this-node-set!
type:		(void? <- (inner:list? [identifier-refrence index-node?] something? ) ) 
identifier:	index-node-excluded-references
identifier:	index-node-references-export-to-other-node-set!
type:		(void? <- (inner:list? [identifier-refrence index-node?] something? ) ) 
identifier:	index-node-references-import-in-this-node
identifier:	index-node-children-set!
type:		(void? <- (inner:list? [identifier-refrence index-node?] something? ) ) 
identifier:	index-node-references-export-to-other-node
identifier:	index-node-variable
identifier:	index-node-children
identifier:	index-node-end
identifier:	index-node-datum/annotations
identifier:	index-node-parent
identifier:	index-node-start
identifier:	make-index-node
type:		([identifier-refrence index-node?] <- (inner:list? something? ... ) ) 
identifier:	index-node?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	pick-index-node-cover-mapper
identifier:	get-root-ancestor
type:		([identifier-refrence index-node?] <- (inner:list? [identifier-refrence index-node?] ) ) 
identifier:	pick-index-node-parent-of
identifier:	pick-index-node-with-mapper
identifier:	debug:recursive-print-expression&variable
identifier:	pick-index-node-from
identifier:	debug:print-expression
type:		(void? <- (inner:list? [identifier-refrence index-node?] ) ) 
identifier:	debug:print-expression&variable
library:	( scheme-langserver util natural-order-compare)
path:		./util/natural-order-compare.sls
identifier:	natural-order-compare
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence real?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence integer?] [identifier-refrence integer?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence integer?] [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence number?] [identifier-refrence real?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence integer?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		([identifier-refrence boolean?] <- (inner:list? [identifier-refrence string?] [identifier-refrence string?] [identifier-refrence number?] [identifier-refrence integer?] ) ) 
library:	( scheme-langserver util cartesian-product)
path:		./util/cartesian-product.sls
identifier:	cartesian-product
library:	( scheme-langserver util dedupe)
path:		./util/dedupe.sls
identifier:	dedupe-deduped
identifier:	dedupe
type:		((inner:list? ) <- (inner:list? (inner:pair? something? something? ) something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
identifier:	ordered-dedupe
type:		((inner:pair? something? something? ) <- (inner:list? (inner:pair? something? something? ) something? ) ) 
type:		((inner:pair? something? something? ) <- (inner:list? something? something? ) ) 
library:	( scheme-langserver util matrix)
path:		./util/matrix.sls
identifier:	encode
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] [identifier-refrence number?] ) ) 
identifier:	decode
type:		((inner:list? [identifier-refrence flonum?] something? ) <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? [identifier-refrence flonum?] [identifier-refrence number?] ) <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? something? ) <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? [identifier-refrence number?] ) <- (inner:list? [identifier-refrence number?] [identifier-refrence number?] ) ) 
identifier:	matrix-from
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? ) ) 
identifier:	find-cycle
type:		((inner:list? ) <- (inner:list? something? [identifier-refrence real?] ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? (inner:list? something? ... ) ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? (inner:list? something? ... ) ) ) 
identifier:	matrix-set!
identifier:	matrix-to
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? ) ) 
identifier:	matrix-expand
identifier:	matrix-take
library:	( scheme-langserver util binary-search)
path:		./util/binary-search.sls
identifier:	binary-search
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence real?] something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence real?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence number?] ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence number?] [identifier-refrence real?] ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? something? [identifier-refrence real?] ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? [identifier-refrence number?] something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? something? something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? something? something? [identifier-refrence number?] ) ) 
library:	( scheme-langserver util try)
path:		./util/try.sls
identifier:	try
identifier:	except
library:	( scheme-langserver util sub-list)
path:		./util/sub-list.sls
identifier:	find-intersection
identifier:	list-ahead-of
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? ) ) 
identifier:	list-after
type:		((inner:list? ) <- (inner:list? something? something? ) ) 
type:		((inner:list? something? ... ) <- (inner:list? something? something? ) ) 
library:	( scheme-langserver util contain)
path:		./util/contain.sls
identifier:	contain?
type:		([identifier-refrence boolean?] <- (inner:list? something? something? something? ) ) 
library:	( scheme-langserver util association)
path:		./util/association.sls
identifier:	assv-ref
identifier:	make-alist
identifier:	assq-ref
identifier:	assoc-ref
library:	( scheme-langserver util path)
path:		./util/path.sls
identifier:	path->name
identifier:	uri-is-path?
identifier:	uri->name
identifier:	path->uri
identifier:	uri->path
library:	( scheme-langserver util environment)
path:		./util/environment.sls
identifier:	windows?
library:	( scheme-langserver util json)
path:		./util/json.sls
identifier:	read-json
identifier:	generate-json
library:	( scheme-langserver util io)
path:		./util/io.sls
identifier:	write-lines
identifier:	write-string
identifier:	read-to-CRNL
identifier:	read-string
identifier:	read-lines
identifier:	read-line
library:	( scheme-langserver protocol apis document-symbol)
path:		./protocol/apis/document-symbol.sls
identifier:	document-symbol
library:	( scheme-langserver protocol apis definition)
path:		./protocol/apis/definition.sls
identifier:	definition
library:	( scheme-langserver protocol apis references)
path:		./protocol/apis/references.sls
identifier:	find-references
library:	( scheme-langserver protocol apis document-sync)
path:		./protocol/apis/document-sync.sls
identifier:	did-change
identifier:	did-open
identifier:	did-close
library:	( scheme-langserver protocol apis document-diagnostic)
path:		./protocol/apis/document-diagnostic.sls
identifier:	diagnostic
library:	( scheme-langserver protocol apis document-highlight)
path:		./protocol/apis/document-highlight.sls
identifier:	find-highlight
library:	( scheme-langserver protocol apis completion)
path:		./protocol/apis/completion.sls
identifier:	completion
library:	( scheme-langserver protocol apis hover)
path:		./protocol/apis/hover.sls
identifier:	hover
library:	( scheme-langserver protocol response)
path:		./protocol/response.sls
identifier:	success-response
identifier:	fail-response
identifier:	make-notification
identifier:	send-message
identifier:	response-content
identifier:	response-error
identifier:	response?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	response-id
identifier:	response
identifier:	make-response
type:		([identifier-refrence response?] <- (inner:list? something? ... ) ) 
library:	( scheme-langserver protocol error-code)
path:		./protocol/error-code.sls
identifier:	unknown-error-code
type:		[identifier-refrence fixnum?] 
identifier:	request-cancelled
type:		[identifier-refrence fixnum?] 
identifier:	server-error-end
type:		[identifier-refrence fixnum?] 
identifier:	server-not-initialized
type:		[identifier-refrence fixnum?] 
identifier:	internal-error
type:		[identifier-refrence fixnum?] 
identifier:	server-error-start
type:		[identifier-refrence fixnum?] 
identifier:	method-not-found
type:		[identifier-refrence fixnum?] 
identifier:	invalid-params
type:		[identifier-refrence fixnum?] 
identifier:	parse-error
type:		[identifier-refrence fixnum?] 
identifier:	invalid-request
type:		[identifier-refrence fixnum?] 
library:	( scheme-langserver protocol analysis request-queue)
path:		./protocol/analysis/request-queue.sls
identifier:	request-queue-push
identifier:	init-request-queue
type:		([identifier-refrence request-queue?] <- (inner:list? ) ) 
identifier:	request-queue-pop
library:	( scheme-langserver protocol analysis util)
path:		./protocol/analysis/util.sls
identifier:	scan-queue&pick-out
identifier:	scan-queue&replace
type:		((inner:list? something? something? ) <- (inner:list? something? something? something? ) ) 
type:		((inner:list? ) <- (inner:list? something? something? something? ) ) 
library:	( scheme-langserver protocol request)
path:		./protocol/request.sls
identifier:	read-message
type:		((inner:list? ) <- (inner:list? something? ) ) 
type:		([identifier-refrence request?] <- (inner:list? something? ) ) 
identifier:	request-params
identifier:	request-method
identifier:	request?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	request-id
identifier:	request
identifier:	make-request
type:		([identifier-refrence request?] <- (inner:list? something? ... ) ) 
library:	( scheme-langserver protocol alist-access-object)
path:		./protocol/alist-access-object.sls
identifier:	document-symbol->alist
identifier:	make-document-symbol
type:		([identifier-refrence document-symbol?] <- (inner:list? something? ... ) ) 
identifier:	alist->versioned-text-document-identifier
identifier:	versioned-text-document-identifier->alist
identifier:	versioned-text-document-identifier-uri
identifier:	versioned-text-document-identifier-version
identifier:	location->alist
identifier:	make-location
type:		([identifier-refrence location?] <- (inner:list? something? ... ) ) 
identifier:	int+text->position
type:		([identifier-refrence position?] <- (inner:list? [identifier-refrence number?] [identifier-refrence string?] ) ) 
type:		([identifier-refrence position?] <- (inner:list? [identifier-refrence real?] [identifier-refrence string?] ) ) 
identifier:	text+position->int
type:		([identifier-refrence number?] <- (inner:list? [identifier-refrence string?] [identifier-refrence position?] ) ) 
identifier:	range-end
identifier:	range->alist
identifier:	make-range
type:		([identifier-refrence range?] <- (inner:list? something? ... ) ) 
identifier:	range-start
identifier:	text-edit-range
identifier:	text-edit-text
identifier:	alist->text-edit
identifier:	text-edit->alist-with-newText
identifier:	text-document-version
identifier:	make-text-edit
type:		([identifier-refrence text-edit?] <- (inner:list? something? ... ) ) 
identifier:	text-document-uri
identifier:	text-document-language-id
identifier:	alist->text-document
identifier:	text-document-text
identifier:	alist->diagnostic
identifier:	diagnostic->alist
identifier:	position->alist
identifier:	make-position
type:		([identifier-refrence position?] <- (inner:list? something? ... ) ) 
identifier:	position?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	alist->position
identifier:	position-line
identifier:	position-character
library:	( scheme-langserver protocol server)
path:		./protocol/server.sls
identifier:	server-work-done-progress?
identifier:	server-work-done-progress?-set!
type:		(void? <- (inner:list? [identifier-refrence server?] something? ) ) 
identifier:	server-condition
identifier:	server-request-queue
identifier:	server-ss/scm-import-rnrs?
identifier:	server-type-inference?
identifier:	server-input-port
identifier:	server-output-port
identifier:	server-workspace-set!
type:		(void? <- (inner:list? [identifier-refrence server?] something? ) ) 
identifier:	server-thread-pool
identifier:	server-shutdown?-set!
type:		(void? <- (inner:list? [identifier-refrence server?] something? ) ) 
identifier:	server-workspace
identifier:	server-mutex
identifier:	server-shutdown?
identifier:	make-server
type:		([identifier-refrence server?] <- (inner:list? something? ... ) ) 
identifier:	server?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
identifier:	do-log
identifier:	do-log-timestamp
library:	( ufo-thread-pool)
path:		./.akku/lib/ufo-thread-pool.chezscheme.sls
identifier:	with-thread-pool-increment
identifier:	thread-pool-add-job
identifier:	thread-pool-stop!
identifier:	thread-pool-size-ref
identifier:	thread-pool-size-add
identifier:	thread-pool-thread-number-ref
identifier:	thread-pool-job-number-ref
identifier:	thread-pool-blocked?-ref
identifier:	thread-pool-blocked?-change
identifier:	init-thread-pool
type:		([identifier-refrence thread-pool?] <- (inner:list? [identifier-refrence real?] ) ) 
type:		([identifier-refrence thread-pool?] <- (inner:list? something? ) ) 
type:		([identifier-refrence thread-pool?] <- (inner:list? something? something? ) ) 
type:		([identifier-refrence thread-pool?] <- (inner:list? [identifier-refrence real?] something? ) ) 
identifier:	thread-pool?
type:		([identifier-refrence boolean?] <- (inner:list? something? ) ) 
library:	( ufo-thread-pool util blocking-queue)
path:		./.akku/lib/ufo-thread-pool/util/blocking-queue.chezscheme.sls
identifier:	blocking-queue-push
identifier:	init-blocking-queue
type:		([identifier-refrence blocking-queue?] <- (inner:list? ) ) 
identifier:	blocking-queue-pop
library:	( ufo-thread-pool util try)
path:		./.akku/lib/ufo-thread-pool/util/try.chezscheme.sls
identifier:	try
identifier:	except
